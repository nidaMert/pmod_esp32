
STM32_ESP32_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004708  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  0800496c  0800496c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800496c  0800496c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004970  08004970  00005970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004974  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  2000005c  080049d0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  080049d0  00006608  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa81  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d58  00000000  00000000  00010b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00012860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000671  00000000  00000000  000130a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4b1  00000000  00000000  00013711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6a0  00000000  00000000  0002dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb6a  00000000  00000000  00039262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8dcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002144  00000000  00000000  000d8e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000daf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047ac 	.word	0x080047ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080047ac 	.word	0x080047ac

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000242:	b085      	sub	sp, #20
 8000244:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 fd8b 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f92f 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 fa41 	bl	80006d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000252:	f000 fa21 	bl	8000698 <MX_DMA_Init>
  MX_ADC_Init();
 8000256:	f000 f993 	bl	8000580 <MX_ADC_Init>
  MX_USART3_UART_Init();
 800025a:	f000 f9ed 	bl	8000638 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 800025e:	4b7b      	ldr	r3, [pc, #492]	@ (800044c <main+0x20c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b79      	ldr	r3, [pc, #484]	@ (800044c <main+0x20c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2120      	movs	r1, #32
 800026a:	430a      	orrs	r2, r1
 800026c:	601a      	str	r2, [r3, #0]

    HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 1);
 800026e:	4978      	ldr	r1, [pc, #480]	@ (8000450 <main+0x210>)
 8000270:	4b78      	ldr	r3, [pc, #480]	@ (8000454 <main+0x214>)
 8000272:	2201      	movs	r2, #1
 8000274:	0018      	movs	r0, r3
 8000276:	f000 ff3b 	bl	80010f0 <HAL_ADC_Start_DMA>
 800027a:	e004      	b.n	8000286 <main+0x46>

  start:
    if (ESP_INIT()) goto start;
 800027c:	46c0      	nop			@ (mov r8, r8)
 800027e:	e002      	b.n	8000286 <main+0x46>
	  	  if(counter>=2000)
	  	  {
	  		  counter = 0;

	  		  ret = ESP_Check_AT();
	  		  if(ret==1) goto start;
 8000280:	46c0      	nop			@ (mov r8, r8)
 8000282:	e000      	b.n	8000286 <main+0x46>

	  		  sprintf(Buffer,"MSG:%d ADC:%d BTN:%d LED1:%d LED2:%d\r\n\0",cnt++,adc,button,led1,led2);

	  		  sprintf(Uart_TxData,"AT+CIPSEND=%d\r\n",strlen(Buffer));
	  		  ret = ESP_AT_Send(Uart_TxData, strlen(Uart_TxData), ESP_SEND_RET, sizeof(ESP_SEND_RET), CMD_TRIAL);
	  		  if(ret==1) goto start;
 8000284:	46c0      	nop			@ (mov r8, r8)
    if (ESP_INIT()) goto start;
 8000286:	f000 faa5 	bl	80007d4 <ESP_INIT>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d1f6      	bne.n	800027c <main+0x3c>
	  	  button = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 800028e:	2380      	movs	r3, #128	@ 0x80
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	4a71      	ldr	r2, [pc, #452]	@ (8000458 <main+0x218>)
 8000294:	0019      	movs	r1, r3
 8000296:	0010      	movs	r0, r2
 8000298:	f001 fe64 	bl	8001f64 <HAL_GPIO_ReadPin>
 800029c:	0003      	movs	r3, r0
 800029e:	001a      	movs	r2, r3
 80002a0:	4b6e      	ldr	r3, [pc, #440]	@ (800045c <main+0x21c>)
 80002a2:	701a      	strb	r2, [r3, #0]
	  	  led1    = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 80002a4:	2390      	movs	r3, #144	@ 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2140      	movs	r1, #64	@ 0x40
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fe5a 	bl	8001f64 <HAL_GPIO_ReadPin>
 80002b0:	0003      	movs	r3, r0
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000460 <main+0x220>)
 80002b6:	701a      	strb	r2, [r3, #0]
	  	  led2    = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 80002b8:	2390      	movs	r3, #144	@ 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2120      	movs	r1, #32
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fe50 	bl	8001f64 <HAL_GPIO_ReadPin>
 80002c4:	0003      	movs	r3, r0
 80002c6:	001a      	movs	r2, r3
 80002c8:	4b66      	ldr	r3, [pc, #408]	@ (8000464 <main+0x224>)
 80002ca:	701a      	strb	r2, [r3, #0]
	  	  adc = adc_buffer[0];
 80002cc:	4b60      	ldr	r3, [pc, #384]	@ (8000450 <main+0x210>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b65      	ldr	r3, [pc, #404]	@ (8000468 <main+0x228>)
 80002d2:	601a      	str	r2, [r3, #0]
	  	  if(counter>=2000)
 80002d4:	4b65      	ldr	r3, [pc, #404]	@ (800046c <main+0x22c>)
 80002d6:	881a      	ldrh	r2, [r3, #0]
 80002d8:	23fa      	movs	r3, #250	@ 0xfa
 80002da:	00db      	lsls	r3, r3, #3
 80002dc:	429a      	cmp	r2, r3
 80002de:	d35c      	bcc.n	800039a <main+0x15a>
	  		  counter = 0;
 80002e0:	4b62      	ldr	r3, [pc, #392]	@ (800046c <main+0x22c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	801a      	strh	r2, [r3, #0]
	  		  ret = ESP_Check_AT();
 80002e6:	f000 fb21 	bl	800092c <ESP_Check_AT>
 80002ea:	0003      	movs	r3, r0
 80002ec:	001a      	movs	r2, r3
 80002ee:	4b60      	ldr	r3, [pc, #384]	@ (8000470 <main+0x230>)
 80002f0:	701a      	strb	r2, [r3, #0]
	  		  if(ret==1) goto start;
 80002f2:	4b5f      	ldr	r3, [pc, #380]	@ (8000470 <main+0x230>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d0c2      	beq.n	8000280 <main+0x40>
	  		  sprintf(Buffer,"MSG:%d ADC:%d BTN:%d LED1:%d LED2:%d\r\n\0",cnt++,adc,button,led1,led2);
 80002fa:	4b5e      	ldr	r3, [pc, #376]	@ (8000474 <main+0x234>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	b2d1      	uxtb	r1, r2
 8000302:	4a5c      	ldr	r2, [pc, #368]	@ (8000474 <main+0x234>)
 8000304:	7011      	strb	r1, [r2, #0]
 8000306:	001e      	movs	r6, r3
 8000308:	4b57      	ldr	r3, [pc, #348]	@ (8000468 <main+0x228>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	4b53      	ldr	r3, [pc, #332]	@ (800045c <main+0x21c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	001c      	movs	r4, r3
 8000312:	4b53      	ldr	r3, [pc, #332]	@ (8000460 <main+0x220>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	001d      	movs	r5, r3
 8000318:	4b52      	ldr	r3, [pc, #328]	@ (8000464 <main+0x224>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4956      	ldr	r1, [pc, #344]	@ (8000478 <main+0x238>)
 800031e:	4857      	ldr	r0, [pc, #348]	@ (800047c <main+0x23c>)
 8000320:	9302      	str	r3, [sp, #8]
 8000322:	9501      	str	r5, [sp, #4]
 8000324:	9400      	str	r4, [sp, #0]
 8000326:	0013      	movs	r3, r2
 8000328:	0032      	movs	r2, r6
 800032a:	f003 fd81 	bl	8003e30 <siprintf>
	  		  sprintf(Uart_TxData,"AT+CIPSEND=%d\r\n",strlen(Buffer));
 800032e:	4b53      	ldr	r3, [pc, #332]	@ (800047c <main+0x23c>)
 8000330:	0018      	movs	r0, r3
 8000332:	f7ff fee7 	bl	8000104 <strlen>
 8000336:	0002      	movs	r2, r0
 8000338:	4951      	ldr	r1, [pc, #324]	@ (8000480 <main+0x240>)
 800033a:	4b52      	ldr	r3, [pc, #328]	@ (8000484 <main+0x244>)
 800033c:	0018      	movs	r0, r3
 800033e:	f003 fd77 	bl	8003e30 <siprintf>
	  		  ret = ESP_AT_Send(Uart_TxData, strlen(Uart_TxData), ESP_SEND_RET, sizeof(ESP_SEND_RET), CMD_TRIAL);
 8000342:	4b50      	ldr	r3, [pc, #320]	@ (8000484 <main+0x244>)
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff fedd 	bl	8000104 <strlen>
 800034a:	0003      	movs	r3, r0
 800034c:	b2d9      	uxtb	r1, r3
 800034e:	4a4e      	ldr	r2, [pc, #312]	@ (8000488 <main+0x248>)
 8000350:	484c      	ldr	r0, [pc, #304]	@ (8000484 <main+0x244>)
 8000352:	2305      	movs	r3, #5
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2305      	movs	r3, #5
 8000358:	f000 fb06 	bl	8000968 <ESP_AT_Send>
 800035c:	0003      	movs	r3, r0
 800035e:	001a      	movs	r2, r3
 8000360:	4b43      	ldr	r3, [pc, #268]	@ (8000470 <main+0x230>)
 8000362:	701a      	strb	r2, [r3, #0]
	  		  if(ret==1) goto start;
 8000364:	4b42      	ldr	r3, [pc, #264]	@ (8000470 <main+0x230>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d08b      	beq.n	8000284 <main+0x44>

	  		  ret = ESP_AT_Send(Buffer, strlen(Buffer), ESP_SEND_OK, sizeof(ESP_SEND_OK), CMD_TRIAL);
 800036c:	4b43      	ldr	r3, [pc, #268]	@ (800047c <main+0x23c>)
 800036e:	0018      	movs	r0, r3
 8000370:	f7ff fec8 	bl	8000104 <strlen>
 8000374:	0003      	movs	r3, r0
 8000376:	b2d9      	uxtb	r1, r3
 8000378:	4a44      	ldr	r2, [pc, #272]	@ (800048c <main+0x24c>)
 800037a:	4840      	ldr	r0, [pc, #256]	@ (800047c <main+0x23c>)
 800037c:	2305      	movs	r3, #5
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	230b      	movs	r3, #11
 8000382:	f000 faf1 	bl	8000968 <ESP_AT_Send>
 8000386:	0003      	movs	r3, r0
 8000388:	001a      	movs	r2, r3
 800038a:	4b39      	ldr	r3, [pc, #228]	@ (8000470 <main+0x230>)
 800038c:	701a      	strb	r2, [r3, #0]

	  		  memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 800038e:	4b40      	ldr	r3, [pc, #256]	@ (8000490 <main+0x250>)
 8000390:	22ff      	movs	r2, #255	@ 0xff
 8000392:	2100      	movs	r1, #0
 8000394:	0018      	movs	r0, r3
 8000396:	f003 fd6b 	bl	8003e70 <memset>
	  	  }

	  	  if(Rx_Message)
 800039a:	4b3e      	ldr	r3, [pc, #248]	@ (8000494 <main+0x254>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d04a      	beq.n	8000438 <main+0x1f8>
	  	  {
	  		  HAL_Delay(50);
 80003a2:	2032      	movs	r0, #50	@ 0x32
 80003a4:	f000 fd40 	bl	8000e28 <HAL_Delay>
	  		  Rx_Cnt = 0;
 80003a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000498 <main+0x258>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
	  		  Rx_Message = 0;
 80003ae:	4b39      	ldr	r3, [pc, #228]	@ (8000494 <main+0x254>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]

	  		  if(strstr(Uart_RxData,"LED1 ON") != 0)
 80003b4:	4a39      	ldr	r2, [pc, #228]	@ (800049c <main+0x25c>)
 80003b6:	4b36      	ldr	r3, [pc, #216]	@ (8000490 <main+0x250>)
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f003 fd60 	bl	8003e80 <strstr>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d006      	beq.n	80003d2 <main+0x192>
	  		  {
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);		// Red LED ON
 80003c4:	2390      	movs	r3, #144	@ 0x90
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	2201      	movs	r2, #1
 80003ca:	2140      	movs	r1, #64	@ 0x40
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 fde6 	bl	8001f9e <HAL_GPIO_WritePin>
	  		  }
	  		  if(strstr(Uart_RxData,"LED1 OFF") != 0)
 80003d2:	4a33      	ldr	r2, [pc, #204]	@ (80004a0 <main+0x260>)
 80003d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000490 <main+0x250>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f003 fd51 	bl	8003e80 <strstr>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d006      	beq.n	80003f0 <main+0x1b0>
	  		  {
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	// Red LED OFF
 80003e2:	2390      	movs	r3, #144	@ 0x90
 80003e4:	05db      	lsls	r3, r3, #23
 80003e6:	2200      	movs	r2, #0
 80003e8:	2140      	movs	r1, #64	@ 0x40
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fdd7 	bl	8001f9e <HAL_GPIO_WritePin>
	  		  }
	  		  if(strstr(Uart_RxData,"LED2 ON") != 0)
 80003f0:	4a2c      	ldr	r2, [pc, #176]	@ (80004a4 <main+0x264>)
 80003f2:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <main+0x250>)
 80003f4:	0011      	movs	r1, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f003 fd42 	bl	8003e80 <strstr>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d006      	beq.n	800040e <main+0x1ce>
	  		  {
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);		// Green LED ON
 8000400:	2390      	movs	r3, #144	@ 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2201      	movs	r2, #1
 8000406:	2120      	movs	r1, #32
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fdc8 	bl	8001f9e <HAL_GPIO_WritePin>
	  		  }
	  		  if(strstr(Uart_RxData,"LED2 OFF") != 0)
 800040e:	4a26      	ldr	r2, [pc, #152]	@ (80004a8 <main+0x268>)
 8000410:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <main+0x250>)
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f003 fd33 	bl	8003e80 <strstr>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d006      	beq.n	800042c <main+0x1ec>
	  		  {
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);	// Green LED OFF
 800041e:	2390      	movs	r3, #144	@ 0x90
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2200      	movs	r2, #0
 8000424:	2120      	movs	r1, #32
 8000426:	0018      	movs	r0, r3
 8000428:	f001 fdb9 	bl	8001f9e <HAL_GPIO_WritePin>
	  		  }

	  		  memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 800042c:	4b18      	ldr	r3, [pc, #96]	@ (8000490 <main+0x250>)
 800042e:	22ff      	movs	r2, #255	@ 0xff
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f003 fd1c 	bl	8003e70 <memset>

	  	  }


	  	  HAL_Delay(0);
 8000438:	2000      	movs	r0, #0
 800043a:	f000 fcf5 	bl	8000e28 <HAL_Delay>
	  	  counter++;
 800043e:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <main+0x22c>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	b29a      	uxth	r2, r3
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <main+0x22c>)
 8000448:	801a      	strh	r2, [r3, #0]
	  	  button = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 800044a:	e720      	b.n	800028e <main+0x4e>
 800044c:	200000fc 	.word	0x200000fc
 8000450:	200004a8 	.word	0x200004a8
 8000454:	20000078 	.word	0x20000078
 8000458:	48000800 	.word	0x48000800
 800045c:	200004a4 	.word	0x200004a4
 8000460:	200004b0 	.word	0x200004b0
 8000464:	200004b1 	.word	0x200004b1
 8000468:	200004ac 	.word	0x200004ac
 800046c:	200004b2 	.word	0x200004b2
 8000470:	200004a3 	.word	0x200004a3
 8000474:	200004a2 	.word	0x200004a2
 8000478:	080047c4 	.word	0x080047c4
 800047c:	200003a0 	.word	0x200003a0
 8000480:	080047ec 	.word	0x080047ec
 8000484:	20000284 	.word	0x20000284
 8000488:	080048ec 	.word	0x080048ec
 800048c:	080048f4 	.word	0x080048f4
 8000490:	20000184 	.word	0x20000184
 8000494:	200004a1 	.word	0x200004a1
 8000498:	2000049f 	.word	0x2000049f
 800049c:	080047fc 	.word	0x080047fc
 80004a0:	08004804 	.word	0x08004804
 80004a4:	08004810 	.word	0x08004810
 80004a8:	08004818 	.word	0x08004818

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b099      	sub	sp, #100	@ 0x64
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	242c      	movs	r4, #44	@ 0x2c
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2334      	movs	r3, #52	@ 0x34
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 fcd7 	bl	8003e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	231c      	movs	r3, #28
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2310      	movs	r3, #16
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 fccf 	bl	8003e70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	231c      	movs	r3, #28
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 fcc8 	bl	8003e70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80004e0:	0021      	movs	r1, r4
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2212      	movs	r2, #18
 80004e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2201      	movs	r2, #1
 80004f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2210      	movs	r2, #16
 80004f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2210      	movs	r2, #16
 80004fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2202      	movs	r2, #2
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	0212      	lsls	r2, r2, #8
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	22a0      	movs	r2, #160	@ 0xa0
 8000512:	0392      	lsls	r2, r2, #14
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	187b      	adds	r3, r7, r1
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fd5a 	bl	8001fd8 <HAL_RCC_OscConfig>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000528:	f000 fa7c 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	211c      	movs	r1, #28
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2207      	movs	r2, #7
 8000532:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2202      	movs	r2, #2
 8000538:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2101      	movs	r1, #1
 800054a:	0018      	movs	r0, r3
 800054c:	f002 f8ca 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000554:	f000 fa66 	bl	8000a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000558:	003b      	movs	r3, r7
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	02d2      	lsls	r2, r2, #11
 800055e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	f002 fa27 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000572:	f000 fa57 	bl	8000a24 <Error_Handler>
  }
}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b019      	add	sp, #100	@ 0x64
 800057c:	bd90      	pop	{r4, r7, pc}
	...

08000580 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	0018      	movs	r0, r3
 800058a:	230c      	movs	r3, #12
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f003 fc6e 	bl	8003e70 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_ADC_Init+0xb0>)
 8000596:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <MX_ADC_Init+0xb4>)
 8000598:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059a:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <MX_ADC_Init+0xb0>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d0:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005d2:	22c2      	movs	r2, #194	@ 0xc2
 80005d4:	32ff      	adds	r2, #255	@ 0xff
 80005d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005e0:	2224      	movs	r2, #36	@ 0x24
 80005e2:	2101      	movs	r1, #1
 80005e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <MX_ADC_Init+0xb0>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fc3e 	bl	8000e70 <HAL_ADC_Init>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80005f8:	f000 fa14 	bl	8000a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	0152      	lsls	r2, r2, #5
 8000608:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	0552      	lsls	r2, r2, #21
 8000610:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_ADC_Init+0xb0>)
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 fe03 	bl	8001224 <HAL_ADC_ConfigChannel>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000622:	f000 f9ff 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b004      	add	sp, #16
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	20000078 	.word	0x20000078
 8000634:	40012400 	.word	0x40012400

08000638 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <MX_USART3_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 8000644:	22e1      	movs	r2, #225	@ 0xe1
 8000646:	0252      	lsls	r2, r2, #9
 8000648:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <MX_USART3_UART_Init+0x58>)
 800067c:	0018      	movs	r0, r3
 800067e:	f002 fa9d 	bl	8002bbc <HAL_UART_Init>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 f9cd 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000fc 	.word	0x200000fc
 8000694:	40004800 	.word	0x40004800

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_DMA_Init+0x38>)
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_DMA_Init+0x38>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_DMA_Init+0x38>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2009      	movs	r0, #9
 80006bc:	f001 f874 	bl	80017a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80006c0:	2009      	movs	r0, #9
 80006c2:	f001 f886 	bl	80017d2 <HAL_NVIC_EnableIRQ>

}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b089      	sub	sp, #36	@ 0x24
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	240c      	movs	r4, #12
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0018      	movs	r0, r3
 80006e0:	2314      	movs	r3, #20
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f003 fbc3 	bl	8003e70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b38      	ldr	r3, [pc, #224]	@ (80007cc <MX_GPIO_Init+0xf8>)
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	4b37      	ldr	r3, [pc, #220]	@ (80007cc <MX_GPIO_Init+0xf8>)
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	0309      	lsls	r1, r1, #12
 80006f4:	430a      	orrs	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	4b34      	ldr	r3, [pc, #208]	@ (80007cc <MX_GPIO_Init+0xf8>)
 80006fa:	695a      	ldr	r2, [r3, #20]
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	031b      	lsls	r3, r3, #12
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	4b31      	ldr	r3, [pc, #196]	@ (80007cc <MX_GPIO_Init+0xf8>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b30      	ldr	r3, [pc, #192]	@ (80007cc <MX_GPIO_Init+0xf8>)
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	03c9      	lsls	r1, r1, #15
 8000710:	430a      	orrs	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b2d      	ldr	r3, [pc, #180]	@ (80007cc <MX_GPIO_Init+0xf8>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	@ 0x80
 800071a:	03db      	lsls	r3, r3, #15
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <MX_GPIO_Init+0xf8>)
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <MX_GPIO_Init+0xf8>)
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	0289      	lsls	r1, r1, #10
 800072c:	430a      	orrs	r2, r1
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <MX_GPIO_Init+0xf8>)
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	029b      	lsls	r3, r3, #10
 8000738:	4013      	ands	r3, r2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|External_Led_Pin|Rst_Pin, GPIO_PIN_RESET);
 800073e:	23b0      	movs	r3, #176	@ 0xb0
 8000740:	0059      	lsls	r1, r3, #1
 8000742:	2390      	movs	r3, #144	@ 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2200      	movs	r2, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fc28 	bl	8001f9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	0192      	lsls	r2, r2, #6
 8000754:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000762:	193b      	adds	r3, r7, r4
 8000764:	4a1a      	ldr	r2, [pc, #104]	@ (80007d0 <MX_GPIO_Init+0xfc>)
 8000766:	0019      	movs	r1, r3
 8000768:	0010      	movs	r0, r2
 800076a:	f001 fa83 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	220c      	movs	r2, #12
 8000772:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2202      	movs	r2, #2
 8000778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2201      	movs	r2, #1
 800078a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	193a      	adds	r2, r7, r4
 800078e:	2390      	movs	r3, #144	@ 0x90
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fa6d 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin External_Led_Pin Rst_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|External_Led_Pin|Rst_Pin;
 800079a:	0021      	movs	r1, r4
 800079c:	187b      	adds	r3, r7, r1
 800079e:	22b0      	movs	r2, #176	@ 0xb0
 80007a0:	0052      	lsls	r2, r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2201      	movs	r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	187a      	adds	r2, r7, r1
 80007b8:	2390      	movs	r3, #144	@ 0x90
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fa58 	bl	8001c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b009      	add	sp, #36	@ 0x24
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000800 	.word	0x48000800

080007d4 <ESP_INIT>:

/* USER CODE BEGIN 4 */
char ESP_INIT(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af02      	add	r7, sp, #8
	char ret;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	0059      	lsls	r1, r3, #1
 80007de:	2390      	movs	r3, #144	@ 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2200      	movs	r2, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fbda 	bl	8001f9e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80007ea:	20c8      	movs	r0, #200	@ 0xc8
 80007ec:	f000 fb1c 	bl	8000e28 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	0059      	lsls	r1, r3, #1
 80007f4:	2390      	movs	r3, #144	@ 0x90
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	2201      	movs	r2, #1
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 fbcf 	bl	8001f9e <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000800:	23fa      	movs	r3, #250	@ 0xfa
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fb0f 	bl	8000e28 <HAL_Delay>

	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 800080a:	1dfc      	adds	r4, r7, #7
 800080c:	4a3f      	ldr	r2, [pc, #252]	@ (800090c <ESP_INIT+0x138>)
 800080e:	4840      	ldr	r0, [pc, #256]	@ (8000910 <ESP_INIT+0x13c>)
 8000810:	2305      	movs	r3, #5
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2308      	movs	r3, #8
 8000816:	2108      	movs	r1, #8
 8000818:	f000 f8a6 	bl	8000968 <ESP_AT_Send>
 800081c:	0003      	movs	r3, r0
 800081e:	7023      	strb	r3, [r4, #0]
	if(ret==1) return 1;
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d101      	bne.n	800082c <ESP_INIT+0x58>
 8000828:	2301      	movs	r3, #1
 800082a:	e06a      	b.n	8000902 <ESP_INIT+0x12e>
	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 800082c:	1dfc      	adds	r4, r7, #7
 800082e:	4a37      	ldr	r2, [pc, #220]	@ (800090c <ESP_INIT+0x138>)
 8000830:	4837      	ldr	r0, [pc, #220]	@ (8000910 <ESP_INIT+0x13c>)
 8000832:	2305      	movs	r3, #5
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2308      	movs	r3, #8
 8000838:	2108      	movs	r1, #8
 800083a:	f000 f895 	bl	8000968 <ESP_AT_Send>
 800083e:	0003      	movs	r3, r0
 8000840:	7023      	strb	r3, [r4, #0]
	if(ret==1) return 1;
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d101      	bne.n	800084e <ESP_INIT+0x7a>
 800084a:	2301      	movs	r3, #1
 800084c:	e059      	b.n	8000902 <ESP_INIT+0x12e>
	HAL_Delay(200);
 800084e:	20c8      	movs	r0, #200	@ 0xc8
 8000850:	f000 faea 	bl	8000e28 <HAL_Delay>
	ret = ESP_AT_Send(ESP_MODE_CMD, sizeof(ESP_MODE_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000854:	1dfc      	adds	r4, r7, #7
 8000856:	4a2d      	ldr	r2, [pc, #180]	@ (800090c <ESP_INIT+0x138>)
 8000858:	482e      	ldr	r0, [pc, #184]	@ (8000914 <ESP_INIT+0x140>)
 800085a:	2305      	movs	r3, #5
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2308      	movs	r3, #8
 8000860:	210f      	movs	r1, #15
 8000862:	f000 f881 	bl	8000968 <ESP_AT_Send>
 8000866:	0003      	movs	r3, r0
 8000868:	7023      	strb	r3, [r4, #0]
	if(ret==1) return 1;
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <ESP_INIT+0xa2>
 8000872:	2301      	movs	r3, #1
 8000874:	e045      	b.n	8000902 <ESP_INIT+0x12e>
	HAL_Delay(200);
 8000876:	20c8      	movs	r0, #200	@ 0xc8
 8000878:	f000 fad6 	bl	8000e28 <HAL_Delay>
	ret = ESP_AT_Send(ESP_WIFI_SET_CMD, sizeof(ESP_WIFI_SET_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 800087c:	1dfc      	adds	r4, r7, #7
 800087e:	4a23      	ldr	r2, [pc, #140]	@ (800090c <ESP_INIT+0x138>)
 8000880:	4825      	ldr	r0, [pc, #148]	@ (8000918 <ESP_INIT+0x144>)
 8000882:	2305      	movs	r3, #5
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2308      	movs	r3, #8
 8000888:	2123      	movs	r1, #35	@ 0x23
 800088a:	f000 f86d 	bl	8000968 <ESP_AT_Send>
 800088e:	0003      	movs	r3, r0
 8000890:	7023      	strb	r3, [r4, #0]
	if(ret==1) return 1;
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d101      	bne.n	800089e <ESP_INIT+0xca>
 800089a:	2301      	movs	r3, #1
 800089c:	e031      	b.n	8000902 <ESP_INIT+0x12e>
	HAL_Delay(200);
 800089e:	20c8      	movs	r0, #200	@ 0xc8
 80008a0:	f000 fac2 	bl	8000e28 <HAL_Delay>
	ret = ESP_AT_Send(ESP_WIFI_IP_CMD, sizeof(ESP_WIFI_IP_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 80008a4:	1dfc      	adds	r4, r7, #7
 80008a6:	4a19      	ldr	r2, [pc, #100]	@ (800090c <ESP_INIT+0x138>)
 80008a8:	481c      	ldr	r0, [pc, #112]	@ (800091c <ESP_INIT+0x148>)
 80008aa:	2305      	movs	r3, #5
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2308      	movs	r3, #8
 80008b0:	213c      	movs	r1, #60	@ 0x3c
 80008b2:	f000 f859 	bl	8000968 <ESP_AT_Send>
 80008b6:	0003      	movs	r3, r0
 80008b8:	7023      	strb	r3, [r4, #0]
	if(ret==1) return 1;
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <ESP_INIT+0xf2>
 80008c2:	2301      	movs	r3, #1
 80008c4:	e01d      	b.n	8000902 <ESP_INIT+0x12e>
	HAL_Delay(200);
 80008c6:	20c8      	movs	r0, #200	@ 0xc8
 80008c8:	f000 faae 	bl	8000e28 <HAL_Delay>
	ret = ESP_AT_Send(ESP_UDP_CMD, sizeof(ESP_UDP_CMD), ESP_UDP_RET, sizeof(ESP_UDP_RET), CMD_TRIAL);
 80008cc:	1dfc      	adds	r4, r7, #7
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <ESP_INIT+0x14c>)
 80008d0:	4814      	ldr	r0, [pc, #80]	@ (8000924 <ESP_INIT+0x150>)
 80008d2:	2305      	movs	r3, #5
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	230d      	movs	r3, #13
 80008d8:	212f      	movs	r1, #47	@ 0x2f
 80008da:	f000 f845 	bl	8000968 <ESP_AT_Send>
 80008de:	0003      	movs	r3, r0
 80008e0:	7023      	strb	r3, [r4, #0]
	if(ret==1) return 1;
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d101      	bne.n	80008ee <ESP_INIT+0x11a>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e009      	b.n	8000902 <ESP_INIT+0x12e>
	HAL_Delay(200);
 80008ee:	20c8      	movs	r0, #200	@ 0xc8
 80008f0:	f000 fa9a 	bl	8000e28 <HAL_Delay>



	memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <ESP_INIT+0x154>)
 80008f6:	22ff      	movs	r2, #255	@ 0xff
 80008f8:	2100      	movs	r1, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f003 fab8 	bl	8003e70 <memset>

	return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	0018      	movs	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	b003      	add	sp, #12
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	08004834 	.word	0x08004834
 8000910:	0800482c 	.word	0x0800482c
 8000914:	0800483c 	.word	0x0800483c
 8000918:	0800484c 	.word	0x0800484c
 800091c:	08004870 	.word	0x08004870
 8000920:	080048dc 	.word	0x080048dc
 8000924:	080048ac 	.word	0x080048ac
 8000928:	20000184 	.word	0x20000184

0800092c <ESP_Check_AT>:

char ESP_Check_AT(void)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b085      	sub	sp, #20
 8000930:	af02      	add	r7, sp, #8
	char ret;

	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000932:	1dfc      	adds	r4, r7, #7
 8000934:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <ESP_Check_AT+0x34>)
 8000936:	480b      	ldr	r0, [pc, #44]	@ (8000964 <ESP_Check_AT+0x38>)
 8000938:	2305      	movs	r3, #5
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2308      	movs	r3, #8
 800093e:	2108      	movs	r1, #8
 8000940:	f000 f812 	bl	8000968 <ESP_AT_Send>
 8000944:	0003      	movs	r3, r0
 8000946:	7023      	strb	r3, [r4, #0]
	if(ret==1) return 1;
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d101      	bne.n	8000954 <ESP_Check_AT+0x28>
 8000950:	2301      	movs	r3, #1
 8000952:	e000      	b.n	8000956 <ESP_Check_AT+0x2a>

	return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b003      	add	sp, #12
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	08004834 	.word	0x08004834
 8000964:	0800482c 	.word	0x0800482c

08000968 <ESP_AT_Send>:

char ESP_AT_Send(char *Cmd, char CmdSize, char *rData, char RetSize, char trial)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	0008      	movs	r0, r1
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	0019      	movs	r1, r3
 8000976:	230b      	movs	r3, #11
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	240a      	movs	r4, #10
 8000980:	193b      	adds	r3, r7, r4
 8000982:	1c0a      	adds	r2, r1, #0
 8000984:	701a      	strb	r2, [r3, #0]
    char cnt=0;
 8000986:	2317      	movs	r3, #23
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]

	memset(returnData,0x00,sizeof(returnData));
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <ESP_AT_Send+0xa8>)
 8000990:	2219      	movs	r2, #25
 8000992:	2100      	movs	r1, #0
 8000994:	0018      	movs	r0, r3
 8000996:	f003 fa6b 	bl	8003e70 <memset>
	memcpy(returnData,rData,RetSize);
 800099a:	193b      	adds	r3, r7, r4
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <ESP_AT_Send+0xa8>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 faa8 	bl	8003ef8 <memcpy>

    while(cnt<trial)
 80009a8:	e023      	b.n	80009f2 <ESP_AT_Send+0x8a>
    {

    	Rx_Cnt = 0;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <ESP_AT_Send+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
        memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <ESP_AT_Send+0xb0>)
 80009b2:	22ff      	movs	r2, #255	@ 0xff
 80009b4:	2100      	movs	r1, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f003 fa5a 	bl	8003e70 <memset>
        HAL_UART_Transmit(&huart3, (uint8_t*)Cmd, CmdSize, 50);
 80009bc:	230b      	movs	r3, #11
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	68f9      	ldr	r1, [r7, #12]
 80009c6:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <ESP_AT_Send+0xb4>)
 80009c8:	2332      	movs	r3, #50	@ 0x32
 80009ca:	f002 f94b 	bl	8002c64 <HAL_UART_Transmit>
        HAL_Delay(50);
 80009ce:	2032      	movs	r0, #50	@ 0x32
 80009d0:	f000 fa2a 	bl	8000e28 <HAL_Delay>
        if(Rx_Flag)
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <ESP_AT_Send+0xb8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d004      	beq.n	80009e6 <ESP_AT_Send+0x7e>
        {
        	Rx_Flag = 0;
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <ESP_AT_Send+0xb8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
        	return 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e010      	b.n	8000a08 <ESP_AT_Send+0xa0>
        }
    	cnt++;
 80009e6:	2117      	movs	r1, #23
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	3201      	adds	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
    while(cnt<trial)
 80009f2:	2317      	movs	r3, #23
 80009f4:	18fa      	adds	r2, r7, r3
 80009f6:	2320      	movs	r3, #32
 80009f8:	2108      	movs	r1, #8
 80009fa:	185b      	adds	r3, r3, r1
 80009fc:	19db      	adds	r3, r3, r7
 80009fe:	7812      	ldrb	r2, [r2, #0]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3d1      	bcc.n	80009aa <ESP_AT_Send+0x42>
    }

    return 1;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b007      	add	sp, #28
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000384 	.word	0x20000384
 8000a14:	2000049f 	.word	0x2000049f
 8000a18:	20000184 	.word	0x20000184
 8000a1c:	200000fc 	.word	0x200000fc
 8000a20:	200004a0 	.word	0x200004a0

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	619a      	str	r2, [r3, #24]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a54:	2180      	movs	r1, #128	@ 0x80
 8000a56:	0549      	lsls	r1, r1, #21
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	61da      	str	r2, [r3, #28]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	055b      	lsls	r3, r3, #21
 8000a64:	4013      	ands	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b08b      	sub	sp, #44	@ 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	2414      	movs	r4, #20
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f003 f9f0 	bl	8003e70 <memset>
  if(hadc->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a35      	ldr	r2, [pc, #212]	@ (8000b6c <HAL_ADC_MspInit+0xf4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d164      	bne.n	8000b64 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	4b34      	ldr	r3, [pc, #208]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	0089      	lsls	r1, r1, #2
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	619a      	str	r2, [r3, #24]
 8000aa8:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000aaa:	699a      	ldr	r2, [r3, #24]
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000ab8:	695a      	ldr	r2, [r3, #20]
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	0289      	lsls	r1, r1, #10
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000ac6:	695a      	ldr	r2, [r3, #20]
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	029b      	lsls	r3, r3, #10
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2203      	movs	r2, #3
 8000adc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	193a      	adds	r2, r7, r4
 8000ae6:	2390      	movs	r3, #144	@ 0x90
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f001 f8c1 	bl	8001c74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000af4:	4a20      	ldr	r2, [pc, #128]	@ (8000b78 <HAL_ADC_MspInit+0x100>)
 8000af6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b06:	2280      	movs	r2, #128	@ 0x80
 8000b08:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b12:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b14:	2280      	movs	r2, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b22:	2280      	movs	r2, #128	@ 0x80
 8000b24:	0192      	lsls	r2, r2, #6
 8000b26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fe6e 	bl	800180c <HAL_DMA_Init>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000b34:	f7ff ff76 	bl	8000a24 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000b38:	4a10      	ldr	r2, [pc, #64]	@ (8000b7c <HAL_ADC_MspInit+0x104>)
 8000b3a:	23a8      	movs	r3, #168	@ 0xa8
 8000b3c:	58d3      	ldr	r3, [r2, r3]
 8000b3e:	490f      	ldr	r1, [pc, #60]	@ (8000b7c <HAL_ADC_MspInit+0x104>)
 8000b40:	220f      	movs	r2, #15
 8000b42:	4393      	bics	r3, r2
 8000b44:	22a8      	movs	r2, #168	@ 0xa8
 8000b46:	508b      	str	r3, [r1, r2]
 8000b48:	4a0c      	ldr	r2, [pc, #48]	@ (8000b7c <HAL_ADC_MspInit+0x104>)
 8000b4a:	23a8      	movs	r3, #168	@ 0xa8
 8000b4c:	58d3      	ldr	r3, [r2, r3]
 8000b4e:	490b      	ldr	r1, [pc, #44]	@ (8000b7c <HAL_ADC_MspInit+0x104>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	4313      	orrs	r3, r2
 8000b54:	22a8      	movs	r2, #168	@ 0xa8
 8000b56:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b00b      	add	sp, #44	@ 0x2c
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	40012400 	.word	0x40012400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	200000b8 	.word	0x200000b8
 8000b78:	40020008 	.word	0x40020008
 8000b7c:	40020000 	.word	0x40020000

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b08b      	sub	sp, #44	@ 0x2c
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	2414      	movs	r4, #20
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	2314      	movs	r3, #20
 8000b90:	001a      	movs	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	f003 f96c 	bl	8003e70 <memset>
  if(huart->Instance==USART3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	@ (8000c20 <HAL_UART_MspInit+0xa0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d139      	bne.n	8000c16 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <HAL_UART_MspInit+0xa4>)
 8000ba4:	69da      	ldr	r2, [r3, #28]
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <HAL_UART_MspInit+0xa4>)
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	02c9      	lsls	r1, r1, #11
 8000bac:	430a      	orrs	r2, r1
 8000bae:	61da      	str	r2, [r3, #28]
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <HAL_UART_MspInit+0xa4>)
 8000bb2:	69da      	ldr	r2, [r3, #28]
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	02db      	lsls	r3, r3, #11
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_UART_MspInit+0xa4>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_UART_MspInit+0xa4>)
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	0309      	lsls	r1, r1, #12
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_UART_MspInit+0xa4>)
 8000bce:	695a      	ldr	r2, [r3, #20]
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	031b      	lsls	r3, r3, #12
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2230      	movs	r2, #48	@ 0x30
 8000be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2202      	movs	r2, #2
 8000be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_UART_MspInit+0xa8>)
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0010      	movs	r0, r2
 8000c02:	f001 f837 	bl	8001c74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	201d      	movs	r0, #29
 8000c0c:	f000 fdcc 	bl	80017a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000c10:	201d      	movs	r0, #29
 8000c12:	f000 fdde 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b00b      	add	sp, #44	@ 0x2c
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	40004800 	.word	0x40004800
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000800 	.word	0x48000800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f8cc 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <DMA1_Ch1_IRQHandler+0x14>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fefb 	bl	8001a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	200000b8 	.word	0x200000b8

08000c78 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */
	HAL_UART_Receive(&huart3, &Rx_Byte[0], 1, 10);
 8000c7c:	4918      	ldr	r1, [pc, #96]	@ (8000ce0 <USART3_8_IRQHandler+0x68>)
 8000c7e:	4819      	ldr	r0, [pc, #100]	@ (8000ce4 <USART3_8_IRQHandler+0x6c>)
 8000c80:	230a      	movs	r3, #10
 8000c82:	2201      	movs	r2, #1
 8000c84:	f002 f88e 	bl	8002da4 <HAL_UART_Receive>
  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <USART3_8_IRQHandler+0x6c>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f972 	bl	8002f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */
  	  Uart_RxData[Rx_Cnt++] = Rx_Byte[0];
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <USART3_8_IRQHandler+0x70>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	b2d1      	uxtb	r1, r2
 8000c98:	4a13      	ldr	r2, [pc, #76]	@ (8000ce8 <USART3_8_IRQHandler+0x70>)
 8000c9a:	7011      	strb	r1, [r2, #0]
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <USART3_8_IRQHandler+0x68>)
 8000ca0:	7819      	ldrb	r1, [r3, #0]
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <USART3_8_IRQHandler+0x74>)
 8000ca4:	5499      	strb	r1, [r3, r2]

    if(strstr(Uart_RxData,"+IPD") != 0)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <USART3_8_IRQHandler+0x78>)
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <USART3_8_IRQHandler+0x74>)
 8000caa:	0011      	movs	r1, r2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f003 f8e7 	bl	8003e80 <strstr>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d002      	beq.n	8000cbc <USART3_8_IRQHandler+0x44>
    {
  	Rx_Message = 1;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <USART3_8_IRQHandler+0x7c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
    }

    if(strstr(Uart_RxData,returnData) != 0)
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <USART3_8_IRQHandler+0x80>)
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <USART3_8_IRQHandler+0x74>)
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f003 f8dc 	bl	8003e80 <strstr>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d005      	beq.n	8000cd8 <USART3_8_IRQHandler+0x60>
    {
  	Rx_Cnt = 0;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <USART3_8_IRQHandler+0x70>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
  	Rx_Flag = 1;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <USART3_8_IRQHandler+0x84>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
    }
  /* USER CODE END USART3_8_IRQn 1 */
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	200004b4 	.word	0x200004b4
 8000ce4:	200000fc 	.word	0x200000fc
 8000ce8:	2000049f 	.word	0x2000049f
 8000cec:	20000184 	.word	0x20000184
 8000cf0:	08004824 	.word	0x08004824
 8000cf4:	200004a1 	.word	0x200004a1
 8000cf8:	20000384 	.word	0x20000384
 8000cfc:	200004a0 	.word	0x200004a0

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d0c:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d10:	f7ff fff6 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d3a:	f003 f8b7 	bl	8003eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fa7f 	bl	8000240 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   r0, =_estack
 8000d44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d50:	08004974 	.word	0x08004974
  ldr r2, =_sbss
 8000d54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d58:	20000608 	.word	0x20000608

08000d5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_COMP_IRQHandler>
	...

08000d60 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <HAL_Init+0x24>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_Init+0x24>)
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 f809 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d76:	f7ff fe5b 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_InitTick+0x5c>)
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_InitTick+0x60>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0019      	movs	r1, r3
 8000d9a:	23fa      	movs	r3, #250	@ 0xfa
 8000d9c:	0098      	lsls	r0, r3, #2
 8000d9e:	f7ff f9c3 	bl	8000128 <__udivsi3>
 8000da2:	0003      	movs	r3, r0
 8000da4:	0019      	movs	r1, r3
 8000da6:	0020      	movs	r0, r4
 8000da8:	f7ff f9be 	bl	8000128 <__udivsi3>
 8000dac:	0003      	movs	r3, r0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fd1f 	bl	80017f2 <HAL_SYSTICK_Config>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e00f      	b.n	8000ddc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d80b      	bhi.n	8000dda <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fcec 	bl	80017a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_InitTick+0x64>)
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b003      	add	sp, #12
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_IncTick+0x1c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	001a      	movs	r2, r3
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_IncTick+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	18d2      	adds	r2, r2, r3
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_IncTick+0x20>)
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200004b8 	.word	0x200004b8

08000e14 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b02      	ldr	r3, [pc, #8]	@ (8000e24 <HAL_GetTick+0x10>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	200004b8 	.word	0x200004b8

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff fff0 	bl	8000e14 <HAL_GetTick>
 8000e34:	0003      	movs	r3, r0
 8000e36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	001a      	movs	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	189b      	adds	r3, r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	f7ff ffe0 	bl	8000e14 <HAL_GetTick>
 8000e54:	0002      	movs	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e78:	230f      	movs	r3, #15
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e125      	b.n	80010da <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10a      	bne.n	8000eac <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2234      	movs	r2, #52	@ 0x34
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff fde6 	bl	8000a78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d000      	beq.n	8000eb8 <HAL_ADC_Init+0x48>
 8000eb6:	e103      	b.n	80010c0 <HAL_ADC_Init+0x250>
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d000      	beq.n	8000ec4 <HAL_ADC_Init+0x54>
 8000ec2:	e0fd      	b.n	80010c0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2204      	movs	r2, #4
 8000ecc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000ece:	d000      	beq.n	8000ed2 <HAL_ADC_Init+0x62>
 8000ed0:	e0f6      	b.n	80010c0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ed6:	4a83      	ldr	r2, [pc, #524]	@ (80010e4 <HAL_ADC_Init+0x274>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2202      	movs	r2, #2
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d112      	bne.n	8000f16 <HAL_ADC_Init+0xa6>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d009      	beq.n	8000f12 <HAL_ADC_Init+0xa2>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	401a      	ands	r2, r3
 8000f0a:	2380      	movs	r3, #128	@ 0x80
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_Init+0xa6>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_ADC_Init+0xa8>
 8000f16:	2300      	movs	r3, #0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d116      	bne.n	8000f4a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2218      	movs	r2, #24
 8000f24:	4393      	bics	r3, r2
 8000f26:	0019      	movs	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	0899      	lsrs	r1, r3, #2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4964      	ldr	r1, [pc, #400]	@ (80010e8 <HAL_ADC_Init+0x278>)
 8000f56:	400a      	ands	r2, r1
 8000f58:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7e1b      	ldrb	r3, [r3, #24]
 8000f5e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7e5b      	ldrb	r3, [r3, #25]
 8000f64:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f66:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7e9b      	ldrb	r3, [r3, #26]
 8000f6c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d002      	beq.n	8000f7e <HAL_ADC_Init+0x10e>
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	e000      	b.n	8000f80 <HAL_ADC_Init+0x110>
 8000f7e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f80:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f86:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d101      	bne.n	8000f94 <HAL_ADC_Init+0x124>
 8000f90:	2304      	movs	r3, #4
 8000f92:	e000      	b.n	8000f96 <HAL_ADC_Init+0x126>
 8000f94:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f96:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2124      	movs	r1, #36	@ 0x24
 8000f9c:	5c5b      	ldrb	r3, [r3, r1]
 8000f9e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fa0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7edb      	ldrb	r3, [r3, #27]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d115      	bne.n	8000fdc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7e9b      	ldrb	r3, [r3, #26]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2280      	movs	r2, #128	@ 0x80
 8000fbc:	0252      	lsls	r2, r2, #9
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	e00b      	b.n	8000fdc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc8:	2220      	movs	r2, #32
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69da      	ldr	r2, [r3, #28]
 8000fe0:	23c2      	movs	r3, #194	@ 0xc2
 8000fe2:	33ff      	adds	r3, #255	@ 0xff
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d007      	beq.n	8000ff8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68d9      	ldr	r1, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	430a      	orrs	r2, r1
 8001006:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	055b      	lsls	r3, r3, #21
 8001010:	429a      	cmp	r2, r3
 8001012:	d01b      	beq.n	800104c <HAL_ADC_Init+0x1dc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001018:	2b01      	cmp	r3, #1
 800101a:	d017      	beq.n	800104c <HAL_ADC_Init+0x1dc>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001020:	2b02      	cmp	r3, #2
 8001022:	d013      	beq.n	800104c <HAL_ADC_Init+0x1dc>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001028:	2b03      	cmp	r3, #3
 800102a:	d00f      	beq.n	800104c <HAL_ADC_Init+0x1dc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001030:	2b04      	cmp	r3, #4
 8001032:	d00b      	beq.n	800104c <HAL_ADC_Init+0x1dc>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001038:	2b05      	cmp	r3, #5
 800103a:	d007      	beq.n	800104c <HAL_ADC_Init+0x1dc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001040:	2b06      	cmp	r3, #6
 8001042:	d003      	beq.n	800104c <HAL_ADC_Init+0x1dc>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001048:	2b07      	cmp	r3, #7
 800104a:	d112      	bne.n	8001072 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2107      	movs	r1, #7
 8001058:	438a      	bics	r2, r1
 800105a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6959      	ldr	r1, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	2207      	movs	r2, #7
 8001068:	401a      	ands	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <HAL_ADC_Init+0x27c>)
 800107a:	4013      	ands	r3, r2
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	429a      	cmp	r2, r3
 8001080:	d10b      	bne.n	800109a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108c:	2203      	movs	r2, #3
 800108e:	4393      	bics	r3, r2
 8001090:	2201      	movs	r2, #1
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001098:	e01c      	b.n	80010d4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109e:	2212      	movs	r2, #18
 80010a0:	4393      	bics	r3, r2
 80010a2:	2210      	movs	r2, #16
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010ae:	2201      	movs	r2, #1
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80010b6:	230f      	movs	r3, #15
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010be:	e009      	b.n	80010d4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c4:	2210      	movs	r2, #16
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	781b      	ldrb	r3, [r3, #0]
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	fffffefd 	.word	0xfffffefd
 80010e8:	fffe0219 	.word	0xfffe0219
 80010ec:	833fffe7 	.word	0x833fffe7

080010f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2317      	movs	r3, #23
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2204      	movs	r2, #4
 800110c:	4013      	ands	r3, r2
 800110e:	d15e      	bne.n	80011ce <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2234      	movs	r2, #52	@ 0x34
 8001114:	5c9b      	ldrb	r3, [r3, r2]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <HAL_ADC_Start_DMA+0x2e>
 800111a:	2302      	movs	r3, #2
 800111c:	e05e      	b.n	80011dc <HAL_ADC_Start_DMA+0xec>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2234      	movs	r2, #52	@ 0x34
 8001122:	2101      	movs	r1, #1
 8001124:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	7e5b      	ldrb	r3, [r3, #25]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d007      	beq.n	800113e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800112e:	2317      	movs	r3, #23
 8001130:	18fc      	adds	r4, r7, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 f983 	bl	8001440 <ADC_Enable>
 800113a:	0003      	movs	r3, r0
 800113c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800113e:	2317      	movs	r3, #23
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d146      	bne.n	80011d6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114c:	4a25      	ldr	r2, [pc, #148]	@ (80011e4 <HAL_ADC_Start_DMA+0xf4>)
 800114e:	4013      	ands	r3, r2
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	0052      	lsls	r2, r2, #1
 8001154:	431a      	orrs	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2234      	movs	r2, #52	@ 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <HAL_ADC_Start_DMA+0xf8>)
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	4a1d      	ldr	r2, [pc, #116]	@ (80011ec <HAL_ADC_Start_DMA+0xfc>)
 8001176:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <HAL_ADC_Start_DMA+0x100>)
 800117e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	221c      	movs	r2, #28
 8001186:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2110      	movs	r1, #16
 8001194:	430a      	orrs	r2, r1
 8001196:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2101      	movs	r1, #1
 80011a4:	430a      	orrs	r2, r1
 80011a6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3340      	adds	r3, #64	@ 0x40
 80011b2:	0019      	movs	r1, r3
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f000 fb70 	bl	800189c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2104      	movs	r1, #4
 80011c8:	430a      	orrs	r2, r1
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e003      	b.n	80011d6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011ce:	2317      	movs	r3, #23
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011d6:	2317      	movs	r3, #23
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b007      	add	sp, #28
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	fffff0fe 	.word	0xfffff0fe
 80011e8:	08001549 	.word	0x08001549
 80011ec:	080015fd 	.word	0x080015fd
 80011f0:	0800161b 	.word	0x0800161b

080011f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122e:	230f      	movs	r3, #15
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	055b      	lsls	r3, r3, #21
 8001242:	429a      	cmp	r2, r3
 8001244:	d011      	beq.n	800126a <HAL_ADC_ConfigChannel+0x46>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124a:	2b01      	cmp	r3, #1
 800124c:	d00d      	beq.n	800126a <HAL_ADC_ConfigChannel+0x46>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001252:	2b02      	cmp	r3, #2
 8001254:	d009      	beq.n	800126a <HAL_ADC_ConfigChannel+0x46>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125a:	2b03      	cmp	r3, #3
 800125c:	d005      	beq.n	800126a <HAL_ADC_ConfigChannel+0x46>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	2b04      	cmp	r3, #4
 8001264:	d001      	beq.n	800126a <HAL_ADC_ConfigChannel+0x46>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2234      	movs	r2, #52	@ 0x34
 800126e:	5c9b      	ldrb	r3, [r3, r2]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x54>
 8001274:	2302      	movs	r3, #2
 8001276:	e0d0      	b.n	800141a <HAL_ADC_ConfigChannel+0x1f6>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2234      	movs	r2, #52	@ 0x34
 800127c:	2101      	movs	r1, #1
 800127e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2204      	movs	r2, #4
 8001288:	4013      	ands	r3, r2
 800128a:	d000      	beq.n	800128e <HAL_ADC_ConfigChannel+0x6a>
 800128c:	e0b4      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a64      	ldr	r2, [pc, #400]	@ (8001424 <HAL_ADC_ConfigChannel+0x200>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d100      	bne.n	800129a <HAL_ADC_ConfigChannel+0x76>
 8001298:	e082      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	055b      	lsls	r3, r3, #21
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d037      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d033      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d02f      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d02b      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d027      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d023      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	d01f      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d01b      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2107      	movs	r1, #7
 8001300:	400b      	ands	r3, r1
 8001302:	429a      	cmp	r2, r3
 8001304:	d012      	beq.n	800132c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2107      	movs	r1, #7
 8001312:	438a      	bics	r2, r1
 8001314:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6959      	ldr	r1, [r3, #20]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2207      	movs	r2, #7
 8001322:	401a      	ands	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b10      	cmp	r3, #16
 8001332:	d007      	beq.n	8001344 <HAL_ADC_ConfigChannel+0x120>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b11      	cmp	r3, #17
 800133a:	d003      	beq.n	8001344 <HAL_ADC_ConfigChannel+0x120>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b12      	cmp	r3, #18
 8001342:	d163      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001344:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <HAL_ADC_ConfigChannel+0x204>)
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b10      	cmp	r3, #16
 800134e:	d009      	beq.n	8001364 <HAL_ADC_ConfigChannel+0x140>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b11      	cmp	r3, #17
 8001356:	d102      	bne.n	800135e <HAL_ADC_ConfigChannel+0x13a>
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	03db      	lsls	r3, r3, #15
 800135c:	e004      	b.n	8001368 <HAL_ADC_ConfigChannel+0x144>
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	045b      	lsls	r3, r3, #17
 8001362:	e001      	b.n	8001368 <HAL_ADC_ConfigChannel+0x144>
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	4a2f      	ldr	r2, [pc, #188]	@ (8001428 <HAL_ADC_ConfigChannel+0x204>)
 800136a:	430b      	orrs	r3, r1
 800136c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d14a      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001376:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <HAL_ADC_ConfigChannel+0x208>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	492d      	ldr	r1, [pc, #180]	@ (8001430 <HAL_ADC_ConfigChannel+0x20c>)
 800137c:	0018      	movs	r0, r3
 800137e:	f7fe fed3 	bl	8000128 <__udivsi3>
 8001382:	0003      	movs	r3, r0
 8001384:	001a      	movs	r2, r3
 8001386:	0013      	movs	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	189b      	adds	r3, r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001390:	e002      	b.n	8001398 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3b01      	subs	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f9      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x16e>
 800139e:	e035      	b.n	800140c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2101      	movs	r1, #1
 80013ac:	4099      	lsls	r1, r3
 80013ae:	000b      	movs	r3, r1
 80013b0:	43d9      	mvns	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d007      	beq.n	80013d2 <HAL_ADC_ConfigChannel+0x1ae>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b11      	cmp	r3, #17
 80013c8:	d003      	beq.n	80013d2 <HAL_ADC_ConfigChannel+0x1ae>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d11c      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_ADC_ConfigChannel+0x204>)
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d007      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x1ca>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b11      	cmp	r3, #17
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x1c6>
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_ADC_ConfigChannel+0x210>)
 80013e8:	e002      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1cc>
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <HAL_ADC_ConfigChannel+0x214>)
 80013ec:	e000      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1cc>
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_ADC_ConfigChannel+0x218>)
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <HAL_ADC_ConfigChannel+0x204>)
 80013f2:	400b      	ands	r3, r1
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e009      	b.n	800140c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fc:	2220      	movs	r2, #32
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2234      	movs	r2, #52	@ 0x34
 8001410:	2100      	movs	r1, #0
 8001412:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001414:	230f      	movs	r3, #15
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	781b      	ldrb	r3, [r3, #0]
}
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	00001001 	.word	0x00001001
 8001428:	40012708 	.word	0x40012708
 800142c:	20000000 	.word	0x20000000
 8001430:	000f4240 	.word	0x000f4240
 8001434:	ffbfffff 	.word	0xffbfffff
 8001438:	feffffff 	.word	0xfeffffff
 800143c:	ff7fffff 	.word	0xff7fffff

08001440 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2203      	movs	r2, #3
 8001458:	4013      	ands	r3, r2
 800145a:	2b01      	cmp	r3, #1
 800145c:	d112      	bne.n	8001484 <ADC_Enable+0x44>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	2b01      	cmp	r3, #1
 800146a:	d009      	beq.n	8001480 <ADC_Enable+0x40>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	401a      	ands	r2, r3
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	429a      	cmp	r2, r3
 800147e:	d101      	bne.n	8001484 <ADC_Enable+0x44>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <ADC_Enable+0x46>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d152      	bne.n	8001530 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <ADC_Enable+0xfc>)
 8001492:	4013      	ands	r3, r2
 8001494:	d00d      	beq.n	80014b2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149a:	2210      	movs	r2, #16
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a6:	2201      	movs	r2, #1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e03f      	b.n	8001532 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <ADC_Enable+0x100>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	491f      	ldr	r1, [pc, #124]	@ (8001544 <ADC_Enable+0x104>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7fe fe2d 	bl	8000128 <__udivsi3>
 80014ce:	0003      	movs	r3, r0
 80014d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014d2:	e002      	b.n	80014da <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014e0:	f7ff fc98 	bl	8000e14 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014e8:	e01b      	b.n	8001522 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ea:	f7ff fc93 	bl	8000e14 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d914      	bls.n	8001522 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	2b01      	cmp	r3, #1
 8001504:	d00d      	beq.n	8001522 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150a:	2210      	movs	r2, #16
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001516:	2201      	movs	r2, #1
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e007      	b.n	8001532 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1dc      	bne.n	80014ea <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	80000017 	.word	0x80000017
 8001540:	20000000 	.word	0x20000000
 8001544:	000f4240 	.word	0x000f4240

08001548 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155a:	2250      	movs	r2, #80	@ 0x50
 800155c:	4013      	ands	r3, r2
 800155e:	d140      	bne.n	80015e2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	431a      	orrs	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	23c0      	movs	r3, #192	@ 0xc0
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d12d      	bne.n	80015d8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001580:	2b00      	cmp	r3, #0
 8001582:	d129      	bne.n	80015d8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2208      	movs	r2, #8
 800158c:	4013      	ands	r3, r2
 800158e:	2b08      	cmp	r3, #8
 8001590:	d122      	bne.n	80015d8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d110      	bne.n	80015c0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	210c      	movs	r1, #12
 80015aa:	438a      	bics	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b2:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <ADC_DMAConvCplt+0xb0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	2201      	movs	r2, #1
 80015b8:	431a      	orrs	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80015be:	e00b      	b.n	80015d8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c4:	2220      	movs	r2, #32
 80015c6:	431a      	orrs	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d0:	2201      	movs	r2, #1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	0018      	movs	r0, r3
 80015dc:	f7ff fe0a 	bl	80011f4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80015e0:	e005      	b.n	80015ee <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	0010      	movs	r0, r2
 80015ec:	4798      	blx	r3
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	fffffefe 	.word	0xfffffefe

080015fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fdf9 	bl	8001204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}

0800161a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800162c:	2240      	movs	r2, #64	@ 0x40
 800162e:	431a      	orrs	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001638:	2204      	movs	r2, #4
 800163a:	431a      	orrs	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	0018      	movs	r0, r3
 8001644:	f7ff fde6 	bl	8001214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	0002      	movs	r2, r0
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b7f      	cmp	r3, #127	@ 0x7f
 8001662:	d809      	bhi.n	8001678 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	001a      	movs	r2, r3
 800166a:	231f      	movs	r3, #31
 800166c:	401a      	ands	r2, r3
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <__NVIC_EnableIRQ+0x30>)
 8001670:	2101      	movs	r1, #1
 8001672:	4091      	lsls	r1, r2
 8001674:	000a      	movs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
  }
}
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	0002      	movs	r2, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b7f      	cmp	r3, #127	@ 0x7f
 8001698:	d828      	bhi.n	80016ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169a:	4a2f      	ldr	r2, [pc, #188]	@ (8001758 <__NVIC_SetPriority+0xd4>)
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	33c0      	adds	r3, #192	@ 0xc0
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	589b      	ldr	r3, [r3, r2]
 80016aa:	1dfa      	adds	r2, r7, #7
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	0011      	movs	r1, r2
 80016b0:	2203      	movs	r2, #3
 80016b2:	400a      	ands	r2, r1
 80016b4:	00d2      	lsls	r2, r2, #3
 80016b6:	21ff      	movs	r1, #255	@ 0xff
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	43d2      	mvns	r2, r2
 80016be:	401a      	ands	r2, r3
 80016c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	22ff      	movs	r2, #255	@ 0xff
 80016c8:	401a      	ands	r2, r3
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	0018      	movs	r0, r3
 80016d0:	2303      	movs	r3, #3
 80016d2:	4003      	ands	r3, r0
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d8:	481f      	ldr	r0, [pc, #124]	@ (8001758 <__NVIC_SetPriority+0xd4>)
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	430a      	orrs	r2, r1
 80016e4:	33c0      	adds	r3, #192	@ 0xc0
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ea:	e031      	b.n	8001750 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ec:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <__NVIC_SetPriority+0xd8>)
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	0019      	movs	r1, r3
 80016f4:	230f      	movs	r3, #15
 80016f6:	400b      	ands	r3, r1
 80016f8:	3b08      	subs	r3, #8
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3306      	adds	r3, #6
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	3304      	adds	r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	1dfa      	adds	r2, r7, #7
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	0011      	movs	r1, r2
 800170c:	2203      	movs	r2, #3
 800170e:	400a      	ands	r2, r1
 8001710:	00d2      	lsls	r2, r2, #3
 8001712:	21ff      	movs	r1, #255	@ 0xff
 8001714:	4091      	lsls	r1, r2
 8001716:	000a      	movs	r2, r1
 8001718:	43d2      	mvns	r2, r2
 800171a:	401a      	ands	r2, r3
 800171c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	019b      	lsls	r3, r3, #6
 8001722:	22ff      	movs	r2, #255	@ 0xff
 8001724:	401a      	ands	r2, r3
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	0018      	movs	r0, r3
 800172c:	2303      	movs	r3, #3
 800172e:	4003      	ands	r3, r0
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001734:	4809      	ldr	r0, [pc, #36]	@ (800175c <__NVIC_SetPriority+0xd8>)
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	001c      	movs	r4, r3
 800173c:	230f      	movs	r3, #15
 800173e:	4023      	ands	r3, r4
 8001740:	3b08      	subs	r3, #8
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	430a      	orrs	r2, r1
 8001746:	3306      	adds	r3, #6
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	18c3      	adds	r3, r0, r3
 800174c:	3304      	adds	r3, #4
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	46c0      	nop			@ (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b003      	add	sp, #12
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	045b      	lsls	r3, r3, #17
 8001770:	429a      	cmp	r2, r3
 8001772:	d301      	bcc.n	8001778 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001774:	2301      	movs	r3, #1
 8001776:	e010      	b.n	800179a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <SysTick_Config+0x44>)
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	3a01      	subs	r2, #1
 800177e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001780:	2301      	movs	r3, #1
 8001782:	425b      	negs	r3, r3
 8001784:	2103      	movs	r1, #3
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff ff7c 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <SysTick_Config+0x44>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <SysTick_Config+0x44>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	210f      	movs	r1, #15
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	1c02      	adds	r2, r0, #0
 80017b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	0011      	movs	r1, r2
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b004      	add	sp, #16
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	0002      	movs	r2, r0
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff ff33 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff ffaf 	bl	8001760 <SysTick_Config>
 8001802:	0003      	movs	r3, r0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e036      	b.n	8001890 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2221      	movs	r2, #33	@ 0x21
 8001826:	2102      	movs	r1, #2
 8001828:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <HAL_DMA_Init+0x8c>)
 8001836:	4013      	ands	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0018      	movs	r0, r3
 8001874:	f000 f9c4 	bl	8001c00 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2221      	movs	r2, #33	@ 0x21
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2220      	movs	r2, #32
 800188a:	2100      	movs	r1, #0
 800188c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b004      	add	sp, #16
 8001896:	bd80      	pop	{r7, pc}
 8001898:	ffffc00f 	.word	0xffffc00f

0800189c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2317      	movs	r3, #23
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2220      	movs	r2, #32
 80018b6:	5c9b      	ldrb	r3, [r3, r2]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Start_IT+0x24>
 80018bc:	2302      	movs	r3, #2
 80018be:	e04f      	b.n	8001960 <HAL_DMA_Start_IT+0xc4>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	2101      	movs	r1, #1
 80018c6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2221      	movs	r2, #33	@ 0x21
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d13a      	bne.n	800194a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2221      	movs	r2, #33	@ 0x21
 80018d8:	2102      	movs	r1, #2
 80018da:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	438a      	bics	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f954 	bl	8001ba6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	210e      	movs	r1, #14
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e00f      	b.n	8001938 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	210a      	movs	r1, #10
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2104      	movs	r1, #4
 8001934:	438a      	bics	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2101      	movs	r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e007      	b.n	800195a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2220      	movs	r2, #32
 800194e:	2100      	movs	r1, #0
 8001950:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001952:	2317      	movs	r3, #23
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2202      	movs	r2, #2
 8001958:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800195a:	2317      	movs	r3, #23
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	781b      	ldrb	r3, [r3, #0]
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b006      	add	sp, #24
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2221      	movs	r2, #33	@ 0x21
 8001974:	5c9b      	ldrb	r3, [r3, r2]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d008      	beq.n	800198e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2204      	movs	r2, #4
 8001980:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2220      	movs	r2, #32
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e020      	b.n	80019d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	210e      	movs	r1, #14
 800199a:	438a      	bics	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	438a      	bics	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b6:	2101      	movs	r1, #1
 80019b8:	4091      	lsls	r1, r2
 80019ba:	000a      	movs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2221      	movs	r2, #33	@ 0x21
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	2100      	movs	r1, #0
 80019cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e0:	210f      	movs	r1, #15
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2221      	movs	r2, #33	@ 0x21
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d006      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2204      	movs	r2, #4
 80019f8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e028      	b.n	8001a54 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	210e      	movs	r1, #14
 8001a0e:	438a      	bics	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	438a      	bics	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4091      	lsls	r1, r2
 8001a2e:	000a      	movs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2221      	movs	r2, #33	@ 0x21
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	2100      	movs	r1, #0
 8001a40:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	0010      	movs	r0, r2
 8001a52:	4798      	blx	r3
    }
  }
  return status;
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	781b      	ldrb	r3, [r3, #0]
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	2204      	movs	r2, #4
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	d024      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x72>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d020      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d107      	bne.n	8001aae <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	438a      	bics	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	4091      	lsls	r1, r2
 8001aba:	000a      	movs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d100      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x66>
 8001ac6:	e06a      	b.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	0010      	movs	r0, r2
 8001ad0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ad2:	e064      	b.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	2202      	movs	r2, #2
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d02b      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xda>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d027      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2220      	movs	r2, #32
 8001af4:	4013      	ands	r3, r2
 8001af6:	d10b      	bne.n	8001b10 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	210a      	movs	r1, #10
 8001b04:	438a      	bics	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2221      	movs	r2, #33	@ 0x21
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4091      	lsls	r1, r2
 8001b1c:	000a      	movs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	2100      	movs	r1, #0
 8001b26:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d036      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	0010      	movs	r0, r2
 8001b38:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b3a:	e030      	b.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	2208      	movs	r2, #8
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d028      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	4013      	ands	r3, r2
 8001b52:	d024      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	210e      	movs	r1, #14
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4091      	lsls	r1, r2
 8001b70:	000a      	movs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2221      	movs	r2, #33	@ 0x21
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	0010      	movs	r0, r2
 8001b9a:	4798      	blx	r3
    }
  }
}
 8001b9c:	e7ff      	b.n	8001b9e <HAL_DMA_IRQHandler+0x13c>
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b004      	add	sp, #16
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4091      	lsls	r1, r2
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d108      	bne.n	8001be6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001be4:	e007      	b.n	8001bf6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	60da      	str	r2, [r3, #12]
}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b004      	add	sp, #16
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <DMA_CalcBaseAndBitshift+0x60>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d810      	bhi.n	8001c36 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <DMA_CalcBaseAndBitshift+0x64>)
 8001c1a:	4694      	mov	ip, r2
 8001c1c:	4463      	add	r3, ip
 8001c1e:	2114      	movs	r1, #20
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7fe fa81 	bl	8000128 <__udivsi3>
 8001c26:	0003      	movs	r3, r0
 8001c28:	009a      	lsls	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	@ (8001c68 <DMA_CalcBaseAndBitshift+0x68>)
 8001c32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001c34:	e00f      	b.n	8001c56 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <DMA_CalcBaseAndBitshift+0x6c>)
 8001c3c:	4694      	mov	ip, r2
 8001c3e:	4463      	add	r3, ip
 8001c40:	2114      	movs	r1, #20
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7fe fa70 	bl	8000128 <__udivsi3>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	009a      	lsls	r2, r3, #2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <DMA_CalcBaseAndBitshift+0x70>)
 8001c54:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	40020407 	.word	0x40020407
 8001c64:	bffdfff8 	.word	0xbffdfff8
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	bffdfbf8 	.word	0xbffdfbf8
 8001c70:	40020400 	.word	0x40020400

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e155      	b.n	8001f30 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	000a      	movs	r2, r1
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d100      	bne.n	8001c9c <HAL_GPIO_Init+0x28>
 8001c9a:	e146      	b.n	8001f2a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d005      	beq.n	8001cb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2203      	movs	r2, #3
 8001cae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d130      	bne.n	8001d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cea:	2201      	movs	r2, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	2201      	movs	r2, #1
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
 8001d08:	0013      	movs	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d017      	beq.n	8001d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	43da      	mvns	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d123      	bne.n	8001da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	58d3      	ldr	r3, [r2, r3]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2207      	movs	r2, #7
 8001d70:	4013      	ands	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2107      	movs	r1, #7
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	6939      	ldr	r1, [r7, #16]
 8001da4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	43da      	mvns	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	23c0      	movs	r3, #192	@ 0xc0
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4013      	ands	r3, r2
 8001de4:	d100      	bne.n	8001de8 <HAL_GPIO_Init+0x174>
 8001de6:	e0a0      	b.n	8001f2a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de8:	4b57      	ldr	r3, [pc, #348]	@ (8001f48 <HAL_GPIO_Init+0x2d4>)
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	4b56      	ldr	r3, [pc, #344]	@ (8001f48 <HAL_GPIO_Init+0x2d4>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	619a      	str	r2, [r3, #24]
 8001df4:	4b54      	ldr	r3, [pc, #336]	@ (8001f48 <HAL_GPIO_Init+0x2d4>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e00:	4a52      	ldr	r2, [pc, #328]	@ (8001f4c <HAL_GPIO_Init+0x2d8>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	589b      	ldr	r3, [r3, r2]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	2390      	movs	r3, #144	@ 0x90
 8001e28:	05db      	lsls	r3, r3, #23
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x1ee>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a47      	ldr	r2, [pc, #284]	@ (8001f50 <HAL_GPIO_Init+0x2dc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x1ea>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a46      	ldr	r2, [pc, #280]	@ (8001f54 <HAL_GPIO_Init+0x2e0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x1e6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a45      	ldr	r2, [pc, #276]	@ (8001f58 <HAL_GPIO_Init+0x2e4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x1e2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a44      	ldr	r2, [pc, #272]	@ (8001f5c <HAL_GPIO_Init+0x2e8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x1de>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x1f0>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x1f0>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x1f0>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x1f0>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x1f0>
 8001e62:	2300      	movs	r3, #0
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	2103      	movs	r1, #3
 8001e68:	400a      	ands	r2, r1
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e74:	4935      	ldr	r1, [pc, #212]	@ (8001f4c <HAL_GPIO_Init+0x2d8>)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	035b      	lsls	r3, r3, #13
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001eac:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	039b      	lsls	r3, r3, #14
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	025b      	lsls	r3, r3, #9
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_GPIO_Init+0x2ec>)
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	40da      	lsrs	r2, r3
 8001f38:	1e13      	subs	r3, r2, #0
 8001f3a:	d000      	beq.n	8001f3e <HAL_GPIO_Init+0x2ca>
 8001f3c:	e6a2      	b.n	8001c84 <HAL_GPIO_Init+0x10>
  } 
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46c0      	nop			@ (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b006      	add	sp, #24
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	48000400 	.word	0x48000400
 8001f54:	48000800 	.word	0x48000800
 8001f58:	48000c00 	.word	0x48000c00
 8001f5c:	48001000 	.word	0x48001000
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	1cbb      	adds	r3, r7, #2
 8001f70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	1cba      	adds	r2, r7, #2
 8001f78:	8812      	ldrh	r2, [r2, #0]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f7e:	230f      	movs	r3, #15
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e003      	b.n	8001f90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f90:	230f      	movs	r3, #15
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	781b      	ldrb	r3, [r3, #0]
  }
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	0008      	movs	r0, r1
 8001fa8:	0011      	movs	r1, r2
 8001faa:	1cbb      	adds	r3, r7, #2
 8001fac:	1c02      	adds	r2, r0, #0
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	1c7b      	adds	r3, r7, #1
 8001fb2:	1c0a      	adds	r2, r1, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb6:	1c7b      	adds	r3, r7, #1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fbe:	1cbb      	adds	r3, r7, #2
 8001fc0:	881a      	ldrh	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc6:	e003      	b.n	8001fd0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc8:	1cbb      	adds	r3, r7, #2
 8001fca:	881a      	ldrh	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fd0:	46c0      	nop			@ (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f000 fb76 	bl	80026d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d100      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x20>
 8001ff6:	e08e      	b.n	8002116 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ff8:	4bc5      	ldr	r3, [pc, #788]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	220c      	movs	r2, #12
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b04      	cmp	r3, #4
 8002002:	d00e      	beq.n	8002022 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002004:	4bc2      	ldr	r3, [pc, #776]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	220c      	movs	r2, #12
 800200a:	4013      	ands	r3, r2
 800200c:	2b08      	cmp	r3, #8
 800200e:	d117      	bne.n	8002040 <HAL_RCC_OscConfig+0x68>
 8002010:	4bbf      	ldr	r3, [pc, #764]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	23c0      	movs	r3, #192	@ 0xc0
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	401a      	ands	r2, r3
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	025b      	lsls	r3, r3, #9
 800201e:	429a      	cmp	r2, r3
 8002020:	d10e      	bne.n	8002040 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	4bbb      	ldr	r3, [pc, #748]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	4013      	ands	r3, r2
 800202c:	d100      	bne.n	8002030 <HAL_RCC_OscConfig+0x58>
 800202e:	e071      	b.n	8002114 <HAL_RCC_OscConfig+0x13c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d000      	beq.n	800203a <HAL_RCC_OscConfig+0x62>
 8002038:	e06c      	b.n	8002114 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	f000 fb4c 	bl	80026d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x80>
 8002048:	4bb1      	ldr	r3, [pc, #708]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4bb0      	ldr	r3, [pc, #704]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	0249      	lsls	r1, r1, #9
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e02f      	b.n	80020b8 <HAL_RCC_OscConfig+0xe0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10c      	bne.n	800207a <HAL_RCC_OscConfig+0xa2>
 8002060:	4bab      	ldr	r3, [pc, #684]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4baa      	ldr	r3, [pc, #680]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002066:	49ab      	ldr	r1, [pc, #684]	@ (8002314 <HAL_RCC_OscConfig+0x33c>)
 8002068:	400a      	ands	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	4ba8      	ldr	r3, [pc, #672]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4ba7      	ldr	r3, [pc, #668]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002072:	49a9      	ldr	r1, [pc, #676]	@ (8002318 <HAL_RCC_OscConfig+0x340>)
 8002074:	400a      	ands	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e01e      	b.n	80020b8 <HAL_RCC_OscConfig+0xe0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b05      	cmp	r3, #5
 8002080:	d10e      	bne.n	80020a0 <HAL_RCC_OscConfig+0xc8>
 8002082:	4ba3      	ldr	r3, [pc, #652]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4ba2      	ldr	r3, [pc, #648]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	02c9      	lsls	r1, r1, #11
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	4b9f      	ldr	r3, [pc, #636]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b9e      	ldr	r3, [pc, #632]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002096:	2180      	movs	r1, #128	@ 0x80
 8002098:	0249      	lsls	r1, r1, #9
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0xe0>
 80020a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b9a      	ldr	r3, [pc, #616]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80020a6:	499b      	ldr	r1, [pc, #620]	@ (8002314 <HAL_RCC_OscConfig+0x33c>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	4b98      	ldr	r3, [pc, #608]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b97      	ldr	r3, [pc, #604]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80020b2:	4999      	ldr	r1, [pc, #612]	@ (8002318 <HAL_RCC_OscConfig+0x340>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d014      	beq.n	80020ea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fea8 	bl	8000e14 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ca:	f7fe fea3 	bl	8000e14 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b64      	cmp	r3, #100	@ 0x64
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e2fd      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	029b      	lsls	r3, r3, #10
 80020e4:	4013      	ands	r3, r2
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0xf2>
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7fe fe93 	bl	8000e14 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7fe fe8e 	bl	8000e14 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	@ 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e2e8      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	4b82      	ldr	r3, [pc, #520]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	029b      	lsls	r3, r3, #10
 800210e:	4013      	ands	r3, r2
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x11c>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d100      	bne.n	8002122 <HAL_RCC_OscConfig+0x14a>
 8002120:	e06c      	b.n	80021fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002122:	4b7b      	ldr	r3, [pc, #492]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	220c      	movs	r2, #12
 8002128:	4013      	ands	r3, r2
 800212a:	d00e      	beq.n	800214a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800212c:	4b78      	ldr	r3, [pc, #480]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	220c      	movs	r2, #12
 8002132:	4013      	ands	r3, r2
 8002134:	2b08      	cmp	r3, #8
 8002136:	d11f      	bne.n	8002178 <HAL_RCC_OscConfig+0x1a0>
 8002138:	4b75      	ldr	r3, [pc, #468]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	23c0      	movs	r3, #192	@ 0xc0
 800213e:	025b      	lsls	r3, r3, #9
 8002140:	401a      	ands	r2, r3
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	429a      	cmp	r2, r3
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b71      	ldr	r3, [pc, #452]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d005      	beq.n	8002160 <HAL_RCC_OscConfig+0x188>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e2bb      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b6b      	ldr	r3, [pc, #428]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	22f8      	movs	r2, #248	@ 0xf8
 8002166:	4393      	bics	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00da      	lsls	r2, r3, #3
 8002170:	4b67      	ldr	r3, [pc, #412]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e041      	b.n	80021fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d024      	beq.n	80021ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b63      	ldr	r3, [pc, #396]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b62      	ldr	r3, [pc, #392]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fe42 	bl	8000e14 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002196:	f7fe fe3d 	bl	8000e14 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e297      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2202      	movs	r2, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	d0f1      	beq.n	8002196 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	22f8      	movs	r2, #248	@ 0xf8
 80021b8:	4393      	bics	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	00da      	lsls	r2, r3, #3
 80021c2:	4b53      	ldr	r3, [pc, #332]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e018      	b.n	80021fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b51      	ldr	r3, [pc, #324]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80021d0:	2101      	movs	r1, #1
 80021d2:	438a      	bics	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fe1d 	bl	8000e14 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e0:	f7fe fe18 	bl	8000e14 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e272      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d1f1      	bne.n	80021e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2208      	movs	r2, #8
 8002202:	4013      	ands	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d019      	beq.n	8002242 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b40      	ldr	r3, [pc, #256]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002212:	4b3f      	ldr	r3, [pc, #252]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002214:	2101      	movs	r1, #1
 8002216:	430a      	orrs	r2, r1
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7fe fdfb 	bl	8000e14 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002224:	f7fe fdf6 	bl	8000e14 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e250      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d0f1      	beq.n	8002224 <HAL_RCC_OscConfig+0x24c>
 8002240:	e018      	b.n	8002274 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002246:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002248:	2101      	movs	r1, #1
 800224a:	438a      	bics	r2, r1
 800224c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe fde1 	bl	8000e14 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7fe fddc 	bl	8000e14 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e236      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d1f1      	bne.n	8002258 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2204      	movs	r2, #4
 800227a:	4013      	ands	r3, r2
 800227c:	d100      	bne.n	8002280 <HAL_RCC_OscConfig+0x2a8>
 800227e:	e0b5      	b.n	80023ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002280:	201f      	movs	r0, #31
 8002282:	183b      	adds	r3, r7, r0
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	055b      	lsls	r3, r3, #21
 8002290:	4013      	ands	r3, r2
 8002292:	d110      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 800229a:	2180      	movs	r1, #128	@ 0x80
 800229c:	0549      	lsls	r1, r1, #21
 800229e:	430a      	orrs	r2, r1
 80022a0:	61da      	str	r2, [r3, #28]
 80022a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	055b      	lsls	r3, r3, #21
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022b0:	183b      	adds	r3, r7, r0
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_RCC_OscConfig+0x344>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <HAL_RCC_OscConfig+0x344>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_RCC_OscConfig+0x344>)
 80022c8:	2180      	movs	r1, #128	@ 0x80
 80022ca:	0049      	lsls	r1, r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fda0 	bl	8000e14 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7fe fd9b 	bl	8000e14 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b64      	cmp	r3, #100	@ 0x64
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1f5      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_RCC_OscConfig+0x344>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10f      	bne.n	8002320 <HAL_RCC_OscConfig+0x348>
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	4b02      	ldr	r3, [pc, #8]	@ (8002310 <HAL_RCC_OscConfig+0x338>)
 8002306:	2101      	movs	r1, #1
 8002308:	430a      	orrs	r2, r1
 800230a:	621a      	str	r2, [r3, #32]
 800230c:	e036      	b.n	800237c <HAL_RCC_OscConfig+0x3a4>
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	40021000 	.word	0x40021000
 8002314:	fffeffff 	.word	0xfffeffff
 8002318:	fffbffff 	.word	0xfffbffff
 800231c:	40007000 	.word	0x40007000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10c      	bne.n	8002342 <HAL_RCC_OscConfig+0x36a>
 8002328:	4bca      	ldr	r3, [pc, #808]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	4bc9      	ldr	r3, [pc, #804]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	621a      	str	r2, [r3, #32]
 8002334:	4bc7      	ldr	r3, [pc, #796]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	4bc6      	ldr	r3, [pc, #792]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800233a:	2104      	movs	r1, #4
 800233c:	438a      	bics	r2, r1
 800233e:	621a      	str	r2, [r3, #32]
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x3a4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x38c>
 800234a:	4bc2      	ldr	r3, [pc, #776]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	4bc1      	ldr	r3, [pc, #772]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002350:	2104      	movs	r1, #4
 8002352:	430a      	orrs	r2, r1
 8002354:	621a      	str	r2, [r3, #32]
 8002356:	4bbf      	ldr	r3, [pc, #764]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002358:	6a1a      	ldr	r2, [r3, #32]
 800235a:	4bbe      	ldr	r3, [pc, #760]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	621a      	str	r2, [r3, #32]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x3a4>
 8002364:	4bbb      	ldr	r3, [pc, #748]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	4bba      	ldr	r3, [pc, #744]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800236a:	2101      	movs	r1, #1
 800236c:	438a      	bics	r2, r1
 800236e:	621a      	str	r2, [r3, #32]
 8002370:	4bb8      	ldr	r3, [pc, #736]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002372:	6a1a      	ldr	r2, [r3, #32]
 8002374:	4bb7      	ldr	r3, [pc, #732]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002376:	2104      	movs	r1, #4
 8002378:	438a      	bics	r2, r1
 800237a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d014      	beq.n	80023ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7fe fd46 	bl	8000e14 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	e009      	b.n	80023a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fd41 	bl	8000e14 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4aaf      	ldr	r2, [pc, #700]	@ (8002658 <HAL_RCC_OscConfig+0x680>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e19a      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	4bac      	ldr	r3, [pc, #688]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x3b6>
 80023ac:	e013      	b.n	80023d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fd31 	bl	8000e14 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b6:	e009      	b.n	80023cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe fd2c 	bl	8000e14 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	4aa5      	ldr	r2, [pc, #660]	@ (8002658 <HAL_RCC_OscConfig+0x680>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e185      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	4ba1      	ldr	r3, [pc, #644]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d6:	231f      	movs	r3, #31
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	4b9b      	ldr	r3, [pc, #620]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80023e6:	499d      	ldr	r1, [pc, #628]	@ (800265c <HAL_RCC_OscConfig+0x684>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4013      	ands	r3, r2
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d12a      	bne.n	8002454 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023fe:	4b95      	ldr	r3, [pc, #596]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002402:	4b94      	ldr	r3, [pc, #592]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002404:	2104      	movs	r1, #4
 8002406:	430a      	orrs	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800240a:	4b92      	ldr	r3, [pc, #584]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800240c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800240e:	4b91      	ldr	r3, [pc, #580]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002410:	2101      	movs	r1, #1
 8002412:	430a      	orrs	r2, r1
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe fcfd 	bl	8000e14 <HAL_GetTick>
 800241a:	0003      	movs	r3, r0
 800241c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002420:	f7fe fcf8 	bl	8000e14 <HAL_GetTick>
 8002424:	0002      	movs	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e152      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002436:	2202      	movs	r2, #2
 8002438:	4013      	ands	r3, r2
 800243a:	d0f1      	beq.n	8002420 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800243c:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800243e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002440:	22f8      	movs	r2, #248	@ 0xf8
 8002442:	4393      	bics	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	00da      	lsls	r2, r3, #3
 800244c:	4b81      	ldr	r3, [pc, #516]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800244e:	430a      	orrs	r2, r1
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34
 8002452:	e034      	b.n	80024be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	3305      	adds	r3, #5
 800245a:	d111      	bne.n	8002480 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800245c:	4b7d      	ldr	r3, [pc, #500]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800245e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002460:	4b7c      	ldr	r3, [pc, #496]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002462:	2104      	movs	r1, #4
 8002464:	438a      	bics	r2, r1
 8002466:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002468:	4b7a      	ldr	r3, [pc, #488]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800246a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246c:	22f8      	movs	r2, #248	@ 0xf8
 800246e:	4393      	bics	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	00da      	lsls	r2, r3, #3
 8002478:	4b76      	ldr	r3, [pc, #472]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800247a:	430a      	orrs	r2, r1
 800247c:	635a      	str	r2, [r3, #52]	@ 0x34
 800247e:	e01e      	b.n	80024be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002480:	4b74      	ldr	r3, [pc, #464]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002484:	4b73      	ldr	r3, [pc, #460]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002486:	2104      	movs	r1, #4
 8002488:	430a      	orrs	r2, r1
 800248a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800248c:	4b71      	ldr	r3, [pc, #452]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800248e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002490:	4b70      	ldr	r3, [pc, #448]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002492:	2101      	movs	r1, #1
 8002494:	438a      	bics	r2, r1
 8002496:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7fe fcbc 	bl	8000e14 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024a2:	f7fe fcb7 	bl	8000e14 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e111      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024b4:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	2202      	movs	r2, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	d1f1      	bne.n	80024a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2220      	movs	r2, #32
 80024c4:	4013      	ands	r3, r2
 80024c6:	d05c      	beq.n	8002582 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024c8:	4b62      	ldr	r3, [pc, #392]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	220c      	movs	r2, #12
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d00e      	beq.n	80024f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	220c      	movs	r2, #12
 80024da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d114      	bne.n	800250a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	23c0      	movs	r3, #192	@ 0xc0
 80024e6:	025b      	lsls	r3, r3, #9
 80024e8:	401a      	ands	r2, r3
 80024ea:	23c0      	movs	r3, #192	@ 0xc0
 80024ec:	025b      	lsls	r3, r3, #9
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d10b      	bne.n	800250a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024f2:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	4013      	ands	r3, r2
 80024fc:	d040      	beq.n	8002580 <HAL_RCC_OscConfig+0x5a8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d03c      	beq.n	8002580 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0e6      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01b      	beq.n	800254a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002512:	4b50      	ldr	r3, [pc, #320]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002516:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	0249      	lsls	r1, r1, #9
 800251c:	430a      	orrs	r2, r1
 800251e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fc78 	bl	8000e14 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800252a:	f7fe fc73 	bl	8000e14 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0cd      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800253c:	4b45      	ldr	r3, [pc, #276]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800253e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	029b      	lsls	r3, r3, #10
 8002544:	4013      	ands	r3, r2
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x552>
 8002548:	e01b      	b.n	8002582 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800254a:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800254c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002550:	4943      	ldr	r1, [pc, #268]	@ (8002660 <HAL_RCC_OscConfig+0x688>)
 8002552:	400a      	ands	r2, r1
 8002554:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fc5d 	bl	8000e14 <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002560:	f7fe fc58 	bl	8000e14 <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0b2      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002572:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	029b      	lsls	r3, r3, #10
 800257a:	4013      	ands	r3, r2
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x588>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002580:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <HAL_RCC_OscConfig+0x5b4>
 800258a:	e0a4      	b.n	80026d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	220c      	movs	r2, #12
 8002592:	4013      	ands	r3, r2
 8002594:	2b08      	cmp	r3, #8
 8002596:	d100      	bne.n	800259a <HAL_RCC_OscConfig+0x5c2>
 8002598:	e078      	b.n	800268c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d14c      	bne.n	800263c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80025a8:	492e      	ldr	r1, [pc, #184]	@ (8002664 <HAL_RCC_OscConfig+0x68c>)
 80025aa:	400a      	ands	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe fc31 	bl	8000e14 <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fc2c 	bl	8000e14 <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e086      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	049b      	lsls	r3, r3, #18
 80025d2:	4013      	ands	r3, r2
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80025d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025da:	220f      	movs	r2, #15
 80025dc:	4393      	bics	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002668 <HAL_RCC_OscConfig+0x690>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	431a      	orrs	r2, r3
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	0449      	lsls	r1, r1, #17
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fbff 	bl	8000e14 <HAL_GetTick>
 8002616:	0003      	movs	r3, r0
 8002618:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fbfa 	bl	8000e14 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e054      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	@ 0x80
 8002634:	049b      	lsls	r3, r3, #18
 8002636:	4013      	ands	r3, r2
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x644>
 800263a:	e04c      	b.n	80026d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <HAL_RCC_OscConfig+0x67c>)
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <HAL_RCC_OscConfig+0x68c>)
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fbe4 	bl	8000e14 <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x6a6>
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	40021000 	.word	0x40021000
 8002658:	00001388 	.word	0x00001388
 800265c:	efffffff 	.word	0xefffffff
 8002660:	fffeffff 	.word	0xfffeffff
 8002664:	feffffff 	.word	0xfeffffff
 8002668:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe fbd2 	bl	8000e14 <HAL_GetTick>
 8002670:	0002      	movs	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e02c      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267e:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_RCC_OscConfig+0x708>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	@ 0x80
 8002684:	049b      	lsls	r3, r3, #18
 8002686:	4013      	ands	r3, r2
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x694>
 800268a:	e024      	b.n	80026d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01f      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_RCC_OscConfig+0x708>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <HAL_RCC_OscConfig+0x708>)
 80026a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	23c0      	movs	r3, #192	@ 0xc0
 80026a8:	025b      	lsls	r3, r3, #9
 80026aa:	401a      	ands	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10e      	bne.n	80026d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	220f      	movs	r2, #15
 80026b8:	401a      	ands	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	23f0      	movs	r3, #240	@ 0xf0
 80026c6:	039b      	lsls	r3, r3, #14
 80026c8:	401a      	ands	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b008      	add	sp, #32
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0bf      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d911      	bls.n	800272a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b5e      	ldr	r3, [pc, #376]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4393      	bics	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	4b5b      	ldr	r3, [pc, #364]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002718:	4b59      	ldr	r3, [pc, #356]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0a6      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2202      	movs	r2, #2
 8002730:	4013      	ands	r3, r2
 8002732:	d015      	beq.n	8002760 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2204      	movs	r2, #4
 800273a:	4013      	ands	r3, r2
 800273c:	d006      	beq.n	800274c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800273e:	4b51      	ldr	r3, [pc, #324]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4b50      	ldr	r3, [pc, #320]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 8002744:	21e0      	movs	r1, #224	@ 0xe0
 8002746:	00c9      	lsls	r1, r1, #3
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b4d      	ldr	r3, [pc, #308]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	22f0      	movs	r2, #240	@ 0xf0
 8002752:	4393      	bics	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	4b4a      	ldr	r3, [pc, #296]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	d04c      	beq.n	8002804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b44      	ldr	r3, [pc, #272]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d120      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e07a      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	049b      	lsls	r3, r3, #18
 8002792:	4013      	ands	r3, r2
 8002794:	d114      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06e      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027a2:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 80027a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	029b      	lsls	r3, r3, #10
 80027aa:	4013      	ands	r3, r2
 80027ac:	d108      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e062      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e05b      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fb1e 	bl	8000e14 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f7fe fb19 	bl	8000e14 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	4a27      	ldr	r2, [pc, #156]	@ (8002888 <HAL_RCC_ClockConfig+0x1a4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e042      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	220c      	movs	r2, #12
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1ec      	bne.n	80027de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d211      	bcs.n	8002836 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	4393      	bics	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002824:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <HAL_RCC_ClockConfig+0x19c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e020      	b.n	8002878 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2204      	movs	r2, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a11      	ldr	r2, [pc, #68]	@ (800288c <HAL_RCC_ClockConfig+0x1a8>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002854:	f000 f820 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002858:	0001      	movs	r1, r0
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_RCC_ClockConfig+0x1a0>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	220f      	movs	r2, #15
 8002862:	4013      	ands	r3, r2
 8002864:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <HAL_RCC_ClockConfig+0x1ac>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	000a      	movs	r2, r1
 800286a:	40da      	lsrs	r2, r3
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_ClockConfig+0x1b0>)
 800286e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe fa89 	bl	8000d88 <HAL_InitTick>
  
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b004      	add	sp, #16
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	00001388 	.word	0x00001388
 800288c:	fffff8ff 	.word	0xfffff8ff
 8002890:	08004900 	.word	0x08004900
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002968 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	220c      	movs	r2, #12
 80028bc:	4013      	ands	r3, r2
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d046      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0xb8>
 80028c2:	d848      	bhi.n	8002956 <HAL_RCC_GetSysClockFreq+0xbe>
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d002      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x36>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d003      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x3c>
 80028cc:	e043      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ce:	4b27      	ldr	r3, [pc, #156]	@ (800296c <HAL_RCC_GetSysClockFreq+0xd4>)
 80028d0:	613b      	str	r3, [r7, #16]
      break;
 80028d2:	e043      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	0c9b      	lsrs	r3, r3, #18
 80028d8:	220f      	movs	r2, #15
 80028da:	4013      	ands	r3, r2
 80028dc:	4a24      	ldr	r2, [pc, #144]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xd8>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028e2:	4b21      	ldr	r3, [pc, #132]	@ (8002968 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	220f      	movs	r2, #15
 80028e8:	4013      	ands	r3, r2
 80028ea:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <HAL_RCC_GetSysClockFreq+0xdc>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	23c0      	movs	r3, #192	@ 0xc0
 80028f4:	025b      	lsls	r3, r3, #9
 80028f6:	401a      	ands	r2, r3
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d109      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	481a      	ldr	r0, [pc, #104]	@ (800296c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002904:	f7fd fc10 	bl	8000128 <__udivsi3>
 8002908:	0003      	movs	r3, r0
 800290a:	001a      	movs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4353      	muls	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e01a      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	23c0      	movs	r3, #192	@ 0xc0
 8002918:	025b      	lsls	r3, r3, #9
 800291a:	401a      	ands	r2, r3
 800291c:	23c0      	movs	r3, #192	@ 0xc0
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	429a      	cmp	r2, r3
 8002922:	d109      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	4814      	ldr	r0, [pc, #80]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002928:	f7fd fbfe 	bl	8000128 <__udivsi3>
 800292c:	0003      	movs	r3, r0
 800292e:	001a      	movs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4353      	muls	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	e008      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	480c      	ldr	r0, [pc, #48]	@ (800296c <HAL_RCC_GetSysClockFreq+0xd4>)
 800293c:	f7fd fbf4 	bl	8000128 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	001a      	movs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4353      	muls	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	613b      	str	r3, [r7, #16]
      break;
 800294e:	e005      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	e002      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002958:	613b      	str	r3, [r7, #16]
      break;
 800295a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800295c:	693b      	ldr	r3, [r7, #16]
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b006      	add	sp, #24
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	40021000 	.word	0x40021000
 800296c:	007a1200 	.word	0x007a1200
 8002970:	08004918 	.word	0x08004918
 8002974:	08004928 	.word	0x08004928
 8002978:	02dc6c00 	.word	0x02dc6c00

0800297c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b02      	ldr	r3, [pc, #8]	@ (800298c <HAL_RCC_GetHCLKFreq+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002994:	f7ff fff2 	bl	800297c <HAL_RCC_GetHCLKFreq>
 8002998:	0001      	movs	r1, r0
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	2207      	movs	r2, #7
 80029a2:	4013      	ands	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	40d9      	lsrs	r1, r3
 80029aa:	000b      	movs	r3, r1
}    
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08004910 	.word	0x08004910

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	@ 0x80
 80029d2:	025b      	lsls	r3, r3, #9
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029d8:	e08e      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2017      	movs	r0, #23
 80029dc:	183b      	adds	r3, r7, r0
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b6e      	ldr	r3, [pc, #440]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	055b      	lsls	r3, r3, #21
 80029ea:	4013      	ands	r3, r2
 80029ec:	d110      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b6b      	ldr	r3, [pc, #428]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	0549      	lsls	r1, r1, #21
 80029f8:	430a      	orrs	r2, r1
 80029fa:	61da      	str	r2, [r3, #28]
 80029fc:	4b67      	ldr	r3, [pc, #412]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	055b      	lsls	r3, r3, #21
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	183b      	adds	r3, r7, r0
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	4b63      	ldr	r3, [pc, #396]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d11a      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1c:	4b60      	ldr	r3, [pc, #384]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a22:	2180      	movs	r1, #128	@ 0x80
 8002a24:	0049      	lsls	r1, r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe f9f3 	bl	8000e14 <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	e008      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe f9ee 	bl	8000e14 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0a6      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b56      	ldr	r3, [pc, #344]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a52:	4b52      	ldr	r3, [pc, #328]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	23c0      	movs	r3, #192	@ 0xc0
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d034      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	23c0      	movs	r3, #192	@ 0xc0
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d02c      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a74:	4b49      	ldr	r3, [pc, #292]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7e:	4b47      	ldr	r3, [pc, #284]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	4b46      	ldr	r3, [pc, #280]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a84:	2180      	movs	r1, #128	@ 0x80
 8002a86:	0249      	lsls	r1, r1, #9
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a8c:	4b43      	ldr	r3, [pc, #268]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	4b42      	ldr	r3, [pc, #264]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a92:	4945      	ldr	r1, [pc, #276]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a98:	4b40      	ldr	r3, [pc, #256]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe f9b5 	bl	8000e14 <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	e009      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe f9b0 	bl	8000e14 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	4a3c      	ldr	r2, [pc, #240]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e067      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	4b35      	ldr	r3, [pc, #212]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	4013      	ands	r3, r2
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ace:	4b33      	ldr	r3, [pc, #204]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a34      	ldr	r2, [pc, #208]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ae2:	2317      	movs	r3, #23
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002af2:	492f      	ldr	r1, [pc, #188]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b02:	4b26      	ldr	r3, [pc, #152]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	2203      	movs	r2, #3
 8002b08:	4393      	bics	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b22      	ldr	r3, [pc, #136]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b20:	4b1e      	ldr	r3, [pc, #120]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	02db      	lsls	r3, r3, #11
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b40:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	2210      	movs	r2, #16
 8002b64:	4393      	bics	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b7e:	4b07      	ldr	r3, [pc, #28]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	2240      	movs	r2, #64	@ 0x40
 8002b84:	4393      	bics	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b006      	add	sp, #24
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	fffffcff 	.word	0xfffffcff
 8002ba8:	fffeffff 	.word	0xfffeffff
 8002bac:	00001388 	.word	0x00001388
 8002bb0:	efffffff 	.word	0xefffffff
 8002bb4:	fffcffff 	.word	0xfffcffff
 8002bb8:	fff3ffff 	.word	0xfff3ffff

08002bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e044      	b.n	8002c58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2278      	movs	r2, #120	@ 0x78
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7fd ffcd 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2224      	movs	r2, #36	@ 0x24
 8002bea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fe98 	bl	800393c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 fcac 	bl	800356c <UART_SetConfig>
 8002c14:	0003      	movs	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e01c      	b.n	8002c58 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	490d      	ldr	r1, [pc, #52]	@ (8002c60 <HAL_UART_Init+0xa4>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	212a      	movs	r1, #42	@ 0x2a
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 ff27 	bl	8003aa4 <UART_CheckIdleState>
 8002c56:	0003      	movs	r3, r0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	ffffb7ff 	.word	0xffffb7ff

08002c64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	1dbb      	adds	r3, r7, #6
 8002c72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d000      	beq.n	8002c7e <HAL_UART_Transmit+0x1a>
 8002c7c:	e08c      	b.n	8002d98 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_UART_Transmit+0x28>
 8002c84:	1dbb      	adds	r3, r7, #6
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e084      	b.n	8002d9a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	015b      	lsls	r3, r3, #5
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d109      	bne.n	8002cb0 <HAL_UART_Transmit+0x4c>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d001      	beq.n	8002cb0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e074      	b.n	8002d9a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2284      	movs	r2, #132	@ 0x84
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2221      	movs	r2, #33	@ 0x21
 8002cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe f8a9 	bl	8000e14 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1dba      	adds	r2, r7, #6
 8002cca:	2150      	movs	r1, #80	@ 0x50
 8002ccc:	8812      	ldrh	r2, [r2, #0]
 8002cce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1dba      	adds	r2, r7, #6
 8002cd4:	2152      	movs	r1, #82	@ 0x52
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d108      	bne.n	8002cf8 <HAL_UART_Transmit+0x94>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e003      	b.n	8002d00 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d00:	e02f      	b.n	8002d62 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2180      	movs	r1, #128	@ 0x80
 8002d10:	f000 ff70 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e03b      	b.n	8002d9a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	881a      	ldrh	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	05d2      	lsls	r2, r2, #23
 8002d32:	0dd2      	lsrs	r2, r2, #23
 8002d34:	b292      	uxth	r2, r2
 8002d36:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e007      	b.n	8002d50 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2252      	movs	r2, #82	@ 0x52
 8002d54:	5a9b      	ldrh	r3, [r3, r2]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b299      	uxth	r1, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2252      	movs	r2, #82	@ 0x52
 8002d60:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2252      	movs	r2, #82	@ 0x52
 8002d66:	5a9b      	ldrh	r3, [r3, r2]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1c9      	bne.n	8002d02 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	0013      	movs	r3, r2
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2140      	movs	r1, #64	@ 0x40
 8002d7c:	f000 ff3a 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e005      	b.n	8002d9a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b008      	add	sp, #32
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	@ 0x28
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	1dbb      	adds	r3, r7, #6
 8002db2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2280      	movs	r2, #128	@ 0x80
 8002db8:	589b      	ldr	r3, [r3, r2]
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d000      	beq.n	8002dc0 <HAL_UART_Receive+0x1c>
 8002dbe:	e0d1      	b.n	8002f64 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_UART_Receive+0x2a>
 8002dc6:	1dbb      	adds	r3, r7, #6
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0c9      	b.n	8002f66 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	015b      	lsls	r3, r3, #5
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d109      	bne.n	8002df2 <HAL_UART_Receive+0x4e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2201      	movs	r2, #1
 8002dea:	4013      	ands	r3, r2
 8002dec:	d001      	beq.n	8002df2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0b9      	b.n	8002f66 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2284      	movs	r2, #132	@ 0x84
 8002df6:	2100      	movs	r1, #0
 8002df8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2280      	movs	r2, #128	@ 0x80
 8002dfe:	2122      	movs	r1, #34	@ 0x22
 8002e00:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e08:	f7fe f804 	bl	8000e14 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1dba      	adds	r2, r7, #6
 8002e14:	2158      	movs	r1, #88	@ 0x58
 8002e16:	8812      	ldrh	r2, [r2, #0]
 8002e18:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1dba      	adds	r2, r7, #6
 8002e1e:	215a      	movs	r1, #90	@ 0x5a
 8002e20:	8812      	ldrh	r2, [r2, #0]
 8002e22:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	015b      	lsls	r3, r3, #5
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d10d      	bne.n	8002e4c <HAL_UART_Receive+0xa8>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <HAL_UART_Receive+0x9e>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	225c      	movs	r2, #92	@ 0x5c
 8002e3c:	494c      	ldr	r1, [pc, #304]	@ (8002f70 <HAL_UART_Receive+0x1cc>)
 8002e3e:	5299      	strh	r1, [r3, r2]
 8002e40:	e02e      	b.n	8002ea0 <HAL_UART_Receive+0xfc>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	225c      	movs	r2, #92	@ 0x5c
 8002e46:	21ff      	movs	r1, #255	@ 0xff
 8002e48:	5299      	strh	r1, [r3, r2]
 8002e4a:	e029      	b.n	8002ea0 <HAL_UART_Receive+0xfc>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_UART_Receive+0xcc>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <HAL_UART_Receive+0xc2>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	225c      	movs	r2, #92	@ 0x5c
 8002e60:	21ff      	movs	r1, #255	@ 0xff
 8002e62:	5299      	strh	r1, [r3, r2]
 8002e64:	e01c      	b.n	8002ea0 <HAL_UART_Receive+0xfc>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	225c      	movs	r2, #92	@ 0x5c
 8002e6a:	217f      	movs	r1, #127	@ 0x7f
 8002e6c:	5299      	strh	r1, [r3, r2]
 8002e6e:	e017      	b.n	8002ea0 <HAL_UART_Receive+0xfc>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	2380      	movs	r3, #128	@ 0x80
 8002e76:	055b      	lsls	r3, r3, #21
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d10d      	bne.n	8002e98 <HAL_UART_Receive+0xf4>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <HAL_UART_Receive+0xea>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	225c      	movs	r2, #92	@ 0x5c
 8002e88:	217f      	movs	r1, #127	@ 0x7f
 8002e8a:	5299      	strh	r1, [r3, r2]
 8002e8c:	e008      	b.n	8002ea0 <HAL_UART_Receive+0xfc>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	225c      	movs	r2, #92	@ 0x5c
 8002e92:	213f      	movs	r1, #63	@ 0x3f
 8002e94:	5299      	strh	r1, [r3, r2]
 8002e96:	e003      	b.n	8002ea0 <HAL_UART_Receive+0xfc>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	225c      	movs	r2, #92	@ 0x5c
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002ea0:	2312      	movs	r3, #18
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	215c      	movs	r1, #92	@ 0x5c
 8002ea8:	5a52      	ldrh	r2, [r2, r1]
 8002eaa:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d108      	bne.n	8002eca <HAL_UART_Receive+0x126>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e003      	b.n	8002ed2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ed2:	e03b      	b.n	8002f4c <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	0013      	movs	r3, r2
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	f000 fe87 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2280      	movs	r2, #128	@ 0x80
 8002eee:	2120      	movs	r1, #32
 8002ef0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e037      	b.n	8002f66 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10e      	bne.n	8002f1a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2212      	movs	r2, #18
 8002f06:	18ba      	adds	r2, r7, r2
 8002f08:	8812      	ldrh	r2, [r2, #0]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3302      	adds	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e00f      	b.n	8002f3a <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2212      	movs	r2, #18
 8002f26:	18ba      	adds	r2, r7, r2
 8002f28:	8812      	ldrh	r2, [r2, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	225a      	movs	r2, #90	@ 0x5a
 8002f3e:	5a9b      	ldrh	r3, [r3, r2]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b299      	uxth	r1, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	225a      	movs	r2, #90	@ 0x5a
 8002f4a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	225a      	movs	r2, #90	@ 0x5a
 8002f50:	5a9b      	ldrh	r3, [r3, r2]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1bd      	bne.n	8002ed4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b008      	add	sp, #32
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	000001ff 	.word	0x000001ff

08002f74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b0ab      	sub	sp, #172	@ 0xac
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	22a4      	movs	r2, #164	@ 0xa4
 8002f84:	18b9      	adds	r1, r7, r2
 8002f86:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	20a0      	movs	r0, #160	@ 0xa0
 8002f90:	1839      	adds	r1, r7, r0
 8002f92:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	219c      	movs	r1, #156	@ 0x9c
 8002f9c:	1879      	adds	r1, r7, r1
 8002f9e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	18bb      	adds	r3, r7, r2
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a99      	ldr	r2, [pc, #612]	@ (800320c <HAL_UART_IRQHandler+0x298>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2298      	movs	r2, #152	@ 0x98
 8002fac:	18bc      	adds	r4, r7, r2
 8002fae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002fb0:	18bb      	adds	r3, r7, r2
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d114      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d00f      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fc2:	183b      	adds	r3, r7, r0
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d00a      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d100      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x62>
 8002fd4:	e29e      	b.n	8003514 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	0010      	movs	r0, r2
 8002fde:	4798      	blx	r3
      }
      return;
 8002fe0:	e298      	b.n	8003514 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fe2:	2398      	movs	r3, #152	@ 0x98
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d100      	bne.n	8002fee <HAL_UART_IRQHandler+0x7a>
 8002fec:	e114      	b.n	8003218 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fee:	239c      	movs	r3, #156	@ 0x9c
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d106      	bne.n	8003008 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ffa:	23a0      	movs	r3, #160	@ 0xa0
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a83      	ldr	r2, [pc, #524]	@ (8003210 <HAL_UART_IRQHandler+0x29c>)
 8003002:	4013      	ands	r3, r2
 8003004:	d100      	bne.n	8003008 <HAL_UART_IRQHandler+0x94>
 8003006:	e107      	b.n	8003218 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003008:	23a4      	movs	r3, #164	@ 0xa4
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	4013      	ands	r3, r2
 8003012:	d012      	beq.n	800303a <HAL_UART_IRQHandler+0xc6>
 8003014:	23a0      	movs	r3, #160	@ 0xa0
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4013      	ands	r3, r2
 8003020:	d00b      	beq.n	800303a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2284      	movs	r2, #132	@ 0x84
 800302e:	589b      	ldr	r3, [r3, r2]
 8003030:	2201      	movs	r2, #1
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2184      	movs	r1, #132	@ 0x84
 8003038:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800303a:	23a4      	movs	r3, #164	@ 0xa4
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2202      	movs	r2, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d011      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
 8003046:	239c      	movs	r3, #156	@ 0x9c
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	d00b      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2202      	movs	r2, #2
 8003058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2284      	movs	r2, #132	@ 0x84
 800305e:	589b      	ldr	r3, [r3, r2]
 8003060:	2204      	movs	r2, #4
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2184      	movs	r1, #132	@ 0x84
 8003068:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800306a:	23a4      	movs	r3, #164	@ 0xa4
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2204      	movs	r2, #4
 8003072:	4013      	ands	r3, r2
 8003074:	d011      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
 8003076:	239c      	movs	r3, #156	@ 0x9c
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2201      	movs	r2, #1
 800307e:	4013      	ands	r3, r2
 8003080:	d00b      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2204      	movs	r2, #4
 8003088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2284      	movs	r2, #132	@ 0x84
 800308e:	589b      	ldr	r3, [r3, r2]
 8003090:	2202      	movs	r2, #2
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2184      	movs	r1, #132	@ 0x84
 8003098:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800309a:	23a4      	movs	r3, #164	@ 0xa4
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2208      	movs	r2, #8
 80030a2:	4013      	ands	r3, r2
 80030a4:	d017      	beq.n	80030d6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030a6:	23a0      	movs	r3, #160	@ 0xa0
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	4013      	ands	r3, r2
 80030b0:	d105      	bne.n	80030be <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030b2:	239c      	movs	r3, #156	@ 0x9c
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2201      	movs	r2, #1
 80030ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030bc:	d00b      	beq.n	80030d6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2208      	movs	r2, #8
 80030c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2284      	movs	r2, #132	@ 0x84
 80030ca:	589b      	ldr	r3, [r3, r2]
 80030cc:	2208      	movs	r2, #8
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2184      	movs	r1, #132	@ 0x84
 80030d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030d6:	23a4      	movs	r3, #164	@ 0xa4
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	@ 0x80
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_UART_IRQHandler+0x198>
 80030e4:	23a0      	movs	r3, #160	@ 0xa0
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	04db      	lsls	r3, r3, #19
 80030ee:	4013      	ands	r3, r2
 80030f0:	d00c      	beq.n	800310c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2284      	movs	r2, #132	@ 0x84
 8003100:	589b      	ldr	r3, [r3, r2]
 8003102:	2220      	movs	r2, #32
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2184      	movs	r1, #132	@ 0x84
 800310a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2284      	movs	r2, #132	@ 0x84
 8003110:	589b      	ldr	r3, [r3, r2]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d100      	bne.n	8003118 <HAL_UART_IRQHandler+0x1a4>
 8003116:	e1ff      	b.n	8003518 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003118:	23a4      	movs	r3, #164	@ 0xa4
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2220      	movs	r2, #32
 8003120:	4013      	ands	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003124:	23a0      	movs	r3, #160	@ 0xa0
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2220      	movs	r2, #32
 800312c:	4013      	ands	r3, r2
 800312e:	d008      	beq.n	8003142 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	0010      	movs	r0, r2
 8003140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2284      	movs	r2, #132	@ 0x84
 8003146:	589b      	ldr	r3, [r3, r2]
 8003148:	2194      	movs	r1, #148	@ 0x94
 800314a:	187a      	adds	r2, r7, r1
 800314c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2240      	movs	r2, #64	@ 0x40
 8003156:	4013      	ands	r3, r2
 8003158:	2b40      	cmp	r3, #64	@ 0x40
 800315a:	d004      	beq.n	8003166 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800315c:	187b      	adds	r3, r7, r1
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2228      	movs	r2, #40	@ 0x28
 8003162:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003164:	d047      	beq.n	80031f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	0018      	movs	r0, r3
 800316a:	f000 fdb3 	bl	8003cd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2240      	movs	r2, #64	@ 0x40
 8003176:	4013      	ands	r3, r2
 8003178:	2b40      	cmp	r3, #64	@ 0x40
 800317a:	d137      	bne.n	80031ec <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317c:	f3ef 8310 	mrs	r3, PRIMASK
 8003180:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003184:	2090      	movs	r0, #144	@ 0x90
 8003186:	183a      	adds	r2, r7, r0
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	2301      	movs	r3, #1
 800318c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003190:	f383 8810 	msr	PRIMASK, r3
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2140      	movs	r1, #64	@ 0x40
 80031a2:	438a      	bics	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031ae:	f383 8810 	msr	PRIMASK, r3
}
 80031b2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <HAL_UART_IRQHandler+0x2a0>)
 80031c2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fe fc05 	bl	80019d8 <HAL_DMA_Abort_IT>
 80031ce:	1e03      	subs	r3, r0, #0
 80031d0:	d01a      	beq.n	8003208 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031dc:	0018      	movs	r0, r3
 80031de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	e012      	b.n	8003208 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 f9ad 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	e00d      	b.n	8003208 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f9a8 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	e008      	b.n	8003208 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 f9a3 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2284      	movs	r2, #132	@ 0x84
 8003202:	2100      	movs	r1, #0
 8003204:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003206:	e187      	b.n	8003518 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	46c0      	nop			@ (mov r8, r8)
    return;
 800320a:	e185      	b.n	8003518 <HAL_UART_IRQHandler+0x5a4>
 800320c:	0000080f 	.word	0x0000080f
 8003210:	04000120 	.word	0x04000120
 8003214:	08003d9d 	.word	0x08003d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321c:	2b01      	cmp	r3, #1
 800321e:	d000      	beq.n	8003222 <HAL_UART_IRQHandler+0x2ae>
 8003220:	e139      	b.n	8003496 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003222:	23a4      	movs	r3, #164	@ 0xa4
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2210      	movs	r2, #16
 800322a:	4013      	ands	r3, r2
 800322c:	d100      	bne.n	8003230 <HAL_UART_IRQHandler+0x2bc>
 800322e:	e132      	b.n	8003496 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003230:	23a0      	movs	r3, #160	@ 0xa0
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2210      	movs	r2, #16
 8003238:	4013      	ands	r3, r2
 800323a:	d100      	bne.n	800323e <HAL_UART_IRQHandler+0x2ca>
 800323c:	e12b      	b.n	8003496 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2210      	movs	r2, #16
 8003244:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2240      	movs	r2, #64	@ 0x40
 800324e:	4013      	ands	r3, r2
 8003250:	2b40      	cmp	r3, #64	@ 0x40
 8003252:	d000      	beq.n	8003256 <HAL_UART_IRQHandler+0x2e2>
 8003254:	e09f      	b.n	8003396 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	217e      	movs	r1, #126	@ 0x7e
 8003260:	187b      	adds	r3, r7, r1
 8003262:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003264:	187b      	adds	r3, r7, r1
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d100      	bne.n	800326e <HAL_UART_IRQHandler+0x2fa>
 800326c:	e156      	b.n	800351c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2258      	movs	r2, #88	@ 0x58
 8003272:	5a9b      	ldrh	r3, [r3, r2]
 8003274:	187a      	adds	r2, r7, r1
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d300      	bcc.n	800327e <HAL_UART_IRQHandler+0x30a>
 800327c:	e14e      	b.n	800351c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	187a      	adds	r2, r7, r1
 8003282:	215a      	movs	r1, #90	@ 0x5a
 8003284:	8812      	ldrh	r2, [r2, #0]
 8003286:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b20      	cmp	r3, #32
 8003290:	d06f      	beq.n	8003372 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003292:	f3ef 8310 	mrs	r3, PRIMASK
 8003296:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800329a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800329c:	2301      	movs	r3, #1
 800329e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	499e      	ldr	r1, [pc, #632]	@ (800352c <HAL_UART_IRQHandler+0x5b8>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c4:	f3ef 8310 	mrs	r3, PRIMASK
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80032ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80032ce:	2301      	movs	r3, #1
 80032d0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	438a      	bics	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f0:	f383 8810 	msr	PRIMASK, r3
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f6:	f3ef 8310 	mrs	r3, PRIMASK
 80032fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80032fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003300:	2301      	movs	r3, #1
 8003302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2140      	movs	r1, #64	@ 0x40
 8003318:	438a      	bics	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800331e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2280      	movs	r2, #128	@ 0x80
 800332c:	2120      	movs	r1, #32
 800332e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003336:	f3ef 8310 	mrs	r3, PRIMASK
 800333a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800333c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800333e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003340:	2301      	movs	r3, #1
 8003342:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003346:	f383 8810 	msr	PRIMASK, r3
}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2110      	movs	r1, #16
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800335e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336c:	0018      	movs	r0, r3
 800336e:	f7fe fafb 	bl	8001968 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2258      	movs	r2, #88	@ 0x58
 800337c:	5a9a      	ldrh	r2, [r3, r2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	215a      	movs	r1, #90	@ 0x5a
 8003382:	5a5b      	ldrh	r3, [r3, r1]
 8003384:	b29b      	uxth	r3, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f000 f8e0 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003394:	e0c2      	b.n	800351c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2258      	movs	r2, #88	@ 0x58
 800339a:	5a99      	ldrh	r1, [r3, r2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	225a      	movs	r2, #90	@ 0x5a
 80033a0:	5a9b      	ldrh	r3, [r3, r2]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	208e      	movs	r0, #142	@ 0x8e
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	1a8a      	subs	r2, r1, r2
 80033aa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	225a      	movs	r2, #90	@ 0x5a
 80033b0:	5a9b      	ldrh	r3, [r3, r2]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d100      	bne.n	80033ba <HAL_UART_IRQHandler+0x446>
 80033b8:	e0b2      	b.n	8003520 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d100      	bne.n	80033c4 <HAL_UART_IRQHandler+0x450>
 80033c2:	e0ad      	b.n	8003520 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c4:	f3ef 8310 	mrs	r3, PRIMASK
 80033c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033cc:	2488      	movs	r4, #136	@ 0x88
 80033ce:	193a      	adds	r2, r7, r4
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	2301      	movs	r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			@ (mov r8, r8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4951      	ldr	r1, [pc, #324]	@ (8003530 <HAL_UART_IRQHandler+0x5bc>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	193b      	adds	r3, r7, r4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003400:	61bb      	str	r3, [r7, #24]
  return(result);
 8003402:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003404:	2484      	movs	r4, #132	@ 0x84
 8003406:	193a      	adds	r2, r7, r4
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	2301      	movs	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f383 8810 	msr	PRIMASK, r3
}
 8003414:	46c0      	nop			@ (mov r8, r8)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	438a      	bics	r2, r1
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	193b      	adds	r3, r7, r4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	2120      	movs	r1, #32
 800343a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003448:	f3ef 8310 	mrs	r3, PRIMASK
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003450:	2480      	movs	r4, #128	@ 0x80
 8003452:	193a      	adds	r2, r7, r4
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	2301      	movs	r3, #1
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2110      	movs	r1, #16
 800346e:	438a      	bics	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	193b      	adds	r3, r7, r4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003486:	183b      	adds	r3, r7, r0
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f860 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003494:	e044      	b.n	8003520 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003496:	23a4      	movs	r3, #164	@ 0xa4
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	035b      	lsls	r3, r3, #13
 80034a0:	4013      	ands	r3, r2
 80034a2:	d010      	beq.n	80034c6 <HAL_UART_IRQHandler+0x552>
 80034a4:	239c      	movs	r3, #156	@ 0x9c
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	03db      	lsls	r3, r3, #15
 80034ae:	4013      	ands	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2280      	movs	r2, #128	@ 0x80
 80034b8:	0352      	lsls	r2, r2, #13
 80034ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 fcae 	bl	8003e20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034c4:	e02f      	b.n	8003526 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034c6:	23a4      	movs	r3, #164	@ 0xa4
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2280      	movs	r2, #128	@ 0x80
 80034ce:	4013      	ands	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034d2:	23a0      	movs	r3, #160	@ 0xa0
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2280      	movs	r2, #128	@ 0x80
 80034da:	4013      	ands	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01e      	beq.n	8003524 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	0010      	movs	r0, r2
 80034ee:	4798      	blx	r3
    }
    return;
 80034f0:	e018      	b.n	8003524 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034f2:	23a4      	movs	r3, #164	@ 0xa4
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2240      	movs	r2, #64	@ 0x40
 80034fa:	4013      	ands	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_UART_IRQHandler+0x5b2>
 80034fe:	23a0      	movs	r3, #160	@ 0xa0
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2240      	movs	r2, #64	@ 0x40
 8003506:	4013      	ands	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fc5c 	bl	8003dca <UART_EndTransmit_IT>
    return;
 8003512:	e008      	b.n	8003526 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003514:	46c0      	nop			@ (mov r8, r8)
 8003516:	e006      	b.n	8003526 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	e004      	b.n	8003526 <HAL_UART_IRQHandler+0x5b2>
      return;
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	e002      	b.n	8003526 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	e000      	b.n	8003526 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003524:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003526:	46bd      	mov	sp, r7
 8003528:	b02b      	add	sp, #172	@ 0xac
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	fffffeff 	.word	0xfffffeff
 8003530:	fffffedf 	.word	0xfffffedf

08003534 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800354c:	46c0      	nop			@ (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	000a      	movs	r2, r1
 800355e:	1cbb      	adds	r3, r7, #2
 8003560:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003574:	231e      	movs	r3, #30
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4abe      	ldr	r2, [pc, #760]	@ (8003894 <UART_SetConfig+0x328>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4ab9      	ldr	r2, [pc, #740]	@ (8003898 <UART_SetConfig+0x32c>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4ab0      	ldr	r2, [pc, #704]	@ (800389c <UART_SetConfig+0x330>)
 80035da:	4013      	ands	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4aac      	ldr	r2, [pc, #688]	@ (80038a0 <UART_SetConfig+0x334>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d127      	bne.n	8003642 <UART_SetConfig+0xd6>
 80035f2:	4bac      	ldr	r3, [pc, #688]	@ (80038a4 <UART_SetConfig+0x338>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	2203      	movs	r2, #3
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d00d      	beq.n	800361a <UART_SetConfig+0xae>
 80035fe:	d81b      	bhi.n	8003638 <UART_SetConfig+0xcc>
 8003600:	2b02      	cmp	r3, #2
 8003602:	d014      	beq.n	800362e <UART_SetConfig+0xc2>
 8003604:	d818      	bhi.n	8003638 <UART_SetConfig+0xcc>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <UART_SetConfig+0xa4>
 800360a:	2b01      	cmp	r3, #1
 800360c:	d00a      	beq.n	8003624 <UART_SetConfig+0xb8>
 800360e:	e013      	b.n	8003638 <UART_SetConfig+0xcc>
 8003610:	231f      	movs	r3, #31
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e0bd      	b.n	8003796 <UART_SetConfig+0x22a>
 800361a:	231f      	movs	r3, #31
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e0b8      	b.n	8003796 <UART_SetConfig+0x22a>
 8003624:	231f      	movs	r3, #31
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	2204      	movs	r2, #4
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	e0b3      	b.n	8003796 <UART_SetConfig+0x22a>
 800362e:	231f      	movs	r3, #31
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	2208      	movs	r2, #8
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e0ae      	b.n	8003796 <UART_SetConfig+0x22a>
 8003638:	231f      	movs	r3, #31
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2210      	movs	r2, #16
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e0a9      	b.n	8003796 <UART_SetConfig+0x22a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a98      	ldr	r2, [pc, #608]	@ (80038a8 <UART_SetConfig+0x33c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d134      	bne.n	80036b6 <UART_SetConfig+0x14a>
 800364c:	4b95      	ldr	r3, [pc, #596]	@ (80038a4 <UART_SetConfig+0x338>)
 800364e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003650:	23c0      	movs	r3, #192	@ 0xc0
 8003652:	029b      	lsls	r3, r3, #10
 8003654:	4013      	ands	r3, r2
 8003656:	22c0      	movs	r2, #192	@ 0xc0
 8003658:	0292      	lsls	r2, r2, #10
 800365a:	4293      	cmp	r3, r2
 800365c:	d017      	beq.n	800368e <UART_SetConfig+0x122>
 800365e:	22c0      	movs	r2, #192	@ 0xc0
 8003660:	0292      	lsls	r2, r2, #10
 8003662:	4293      	cmp	r3, r2
 8003664:	d822      	bhi.n	80036ac <UART_SetConfig+0x140>
 8003666:	2280      	movs	r2, #128	@ 0x80
 8003668:	0292      	lsls	r2, r2, #10
 800366a:	4293      	cmp	r3, r2
 800366c:	d019      	beq.n	80036a2 <UART_SetConfig+0x136>
 800366e:	2280      	movs	r2, #128	@ 0x80
 8003670:	0292      	lsls	r2, r2, #10
 8003672:	4293      	cmp	r3, r2
 8003674:	d81a      	bhi.n	80036ac <UART_SetConfig+0x140>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <UART_SetConfig+0x118>
 800367a:	2280      	movs	r2, #128	@ 0x80
 800367c:	0252      	lsls	r2, r2, #9
 800367e:	4293      	cmp	r3, r2
 8003680:	d00a      	beq.n	8003698 <UART_SetConfig+0x12c>
 8003682:	e013      	b.n	80036ac <UART_SetConfig+0x140>
 8003684:	231f      	movs	r3, #31
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e083      	b.n	8003796 <UART_SetConfig+0x22a>
 800368e:	231f      	movs	r3, #31
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2202      	movs	r2, #2
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e07e      	b.n	8003796 <UART_SetConfig+0x22a>
 8003698:	231f      	movs	r3, #31
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2204      	movs	r2, #4
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e079      	b.n	8003796 <UART_SetConfig+0x22a>
 80036a2:	231f      	movs	r3, #31
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2208      	movs	r2, #8
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e074      	b.n	8003796 <UART_SetConfig+0x22a>
 80036ac:	231f      	movs	r3, #31
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2210      	movs	r2, #16
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e06f      	b.n	8003796 <UART_SetConfig+0x22a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7c      	ldr	r2, [pc, #496]	@ (80038ac <UART_SetConfig+0x340>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d134      	bne.n	800372a <UART_SetConfig+0x1be>
 80036c0:	4b78      	ldr	r3, [pc, #480]	@ (80038a4 <UART_SetConfig+0x338>)
 80036c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c4:	23c0      	movs	r3, #192	@ 0xc0
 80036c6:	031b      	lsls	r3, r3, #12
 80036c8:	4013      	ands	r3, r2
 80036ca:	22c0      	movs	r2, #192	@ 0xc0
 80036cc:	0312      	lsls	r2, r2, #12
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d017      	beq.n	8003702 <UART_SetConfig+0x196>
 80036d2:	22c0      	movs	r2, #192	@ 0xc0
 80036d4:	0312      	lsls	r2, r2, #12
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d822      	bhi.n	8003720 <UART_SetConfig+0x1b4>
 80036da:	2280      	movs	r2, #128	@ 0x80
 80036dc:	0312      	lsls	r2, r2, #12
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <UART_SetConfig+0x1aa>
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	0312      	lsls	r2, r2, #12
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d81a      	bhi.n	8003720 <UART_SetConfig+0x1b4>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <UART_SetConfig+0x18c>
 80036ee:	2280      	movs	r2, #128	@ 0x80
 80036f0:	02d2      	lsls	r2, r2, #11
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00a      	beq.n	800370c <UART_SetConfig+0x1a0>
 80036f6:	e013      	b.n	8003720 <UART_SetConfig+0x1b4>
 80036f8:	231f      	movs	r3, #31
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e049      	b.n	8003796 <UART_SetConfig+0x22a>
 8003702:	231f      	movs	r3, #31
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	2202      	movs	r2, #2
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e044      	b.n	8003796 <UART_SetConfig+0x22a>
 800370c:	231f      	movs	r3, #31
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2204      	movs	r2, #4
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e03f      	b.n	8003796 <UART_SetConfig+0x22a>
 8003716:	231f      	movs	r3, #31
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2208      	movs	r2, #8
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e03a      	b.n	8003796 <UART_SetConfig+0x22a>
 8003720:	231f      	movs	r3, #31
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2210      	movs	r2, #16
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e035      	b.n	8003796 <UART_SetConfig+0x22a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a60      	ldr	r2, [pc, #384]	@ (80038b0 <UART_SetConfig+0x344>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d104      	bne.n	800373e <UART_SetConfig+0x1d2>
 8003734:	231f      	movs	r3, #31
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e02b      	b.n	8003796 <UART_SetConfig+0x22a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a5c      	ldr	r2, [pc, #368]	@ (80038b4 <UART_SetConfig+0x348>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d104      	bne.n	8003752 <UART_SetConfig+0x1e6>
 8003748:	231f      	movs	r3, #31
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e021      	b.n	8003796 <UART_SetConfig+0x22a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a58      	ldr	r2, [pc, #352]	@ (80038b8 <UART_SetConfig+0x34c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d104      	bne.n	8003766 <UART_SetConfig+0x1fa>
 800375c:	231f      	movs	r3, #31
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e017      	b.n	8003796 <UART_SetConfig+0x22a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a54      	ldr	r2, [pc, #336]	@ (80038bc <UART_SetConfig+0x350>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d104      	bne.n	800377a <UART_SetConfig+0x20e>
 8003770:	231f      	movs	r3, #31
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e00d      	b.n	8003796 <UART_SetConfig+0x22a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a50      	ldr	r2, [pc, #320]	@ (80038c0 <UART_SetConfig+0x354>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d104      	bne.n	800378e <UART_SetConfig+0x222>
 8003784:	231f      	movs	r3, #31
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e003      	b.n	8003796 <UART_SetConfig+0x22a>
 800378e:	231f      	movs	r3, #31
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	2210      	movs	r2, #16
 8003794:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	429a      	cmp	r2, r3
 80037a0:	d15c      	bne.n	800385c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80037a2:	231f      	movs	r3, #31
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d015      	beq.n	80037d8 <UART_SetConfig+0x26c>
 80037ac:	dc18      	bgt.n	80037e0 <UART_SetConfig+0x274>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00d      	beq.n	80037ce <UART_SetConfig+0x262>
 80037b2:	dc15      	bgt.n	80037e0 <UART_SetConfig+0x274>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <UART_SetConfig+0x252>
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d005      	beq.n	80037c8 <UART_SetConfig+0x25c>
 80037bc:	e010      	b.n	80037e0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037be:	f7ff f8e7 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80037c2:	0003      	movs	r3, r0
 80037c4:	61bb      	str	r3, [r7, #24]
        break;
 80037c6:	e012      	b.n	80037ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b3e      	ldr	r3, [pc, #248]	@ (80038c4 <UART_SetConfig+0x358>)
 80037ca:	61bb      	str	r3, [r7, #24]
        break;
 80037cc:	e00f      	b.n	80037ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7ff f863 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 80037d2:	0003      	movs	r3, r0
 80037d4:	61bb      	str	r3, [r7, #24]
        break;
 80037d6:	e00a      	b.n	80037ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d8:	2380      	movs	r3, #128	@ 0x80
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	61bb      	str	r3, [r7, #24]
        break;
 80037de:	e006      	b.n	80037ee <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e4:	231e      	movs	r3, #30
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
        break;
 80037ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d100      	bne.n	80037f6 <UART_SetConfig+0x28a>
 80037f4:	e095      	b.n	8003922 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	005a      	lsls	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0019      	movs	r1, r3
 8003808:	0010      	movs	r0, r2
 800380a:	f7fc fc8d 	bl	8000128 <__udivsi3>
 800380e:	0003      	movs	r3, r0
 8003810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d91c      	bls.n	8003852 <UART_SetConfig+0x2e6>
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	025b      	lsls	r3, r3, #9
 800381e:	429a      	cmp	r2, r3
 8003820:	d217      	bcs.n	8003852 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	b29a      	uxth	r2, r3
 8003826:	200e      	movs	r0, #14
 8003828:	183b      	adds	r3, r7, r0
 800382a:	210f      	movs	r1, #15
 800382c:	438a      	bics	r2, r1
 800382e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	2207      	movs	r2, #7
 8003838:	4013      	ands	r3, r2
 800383a:	b299      	uxth	r1, r3
 800383c:	183b      	adds	r3, r7, r0
 800383e:	183a      	adds	r2, r7, r0
 8003840:	8812      	ldrh	r2, [r2, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	183a      	adds	r2, r7, r0
 800384c:	8812      	ldrh	r2, [r2, #0]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	e067      	b.n	8003922 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003852:	231e      	movs	r3, #30
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e062      	b.n	8003922 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800385c:	231f      	movs	r3, #31
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d030      	beq.n	80038c8 <UART_SetConfig+0x35c>
 8003866:	dc33      	bgt.n	80038d0 <UART_SetConfig+0x364>
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00d      	beq.n	8003888 <UART_SetConfig+0x31c>
 800386c:	dc30      	bgt.n	80038d0 <UART_SetConfig+0x364>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <UART_SetConfig+0x30c>
 8003872:	2b02      	cmp	r3, #2
 8003874:	d005      	beq.n	8003882 <UART_SetConfig+0x316>
 8003876:	e02b      	b.n	80038d0 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7ff f88a 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 800387c:	0003      	movs	r3, r0
 800387e:	61bb      	str	r3, [r7, #24]
        break;
 8003880:	e02d      	b.n	80038de <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <UART_SetConfig+0x358>)
 8003884:	61bb      	str	r3, [r7, #24]
        break;
 8003886:	e02a      	b.n	80038de <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003888:	f7ff f806 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 800388c:	0003      	movs	r3, r0
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e025      	b.n	80038de <UART_SetConfig+0x372>
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	efff69f3 	.word	0xefff69f3
 8003898:	ffffcfff 	.word	0xffffcfff
 800389c:	fffff4ff 	.word	0xfffff4ff
 80038a0:	40013800 	.word	0x40013800
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40004400 	.word	0x40004400
 80038ac:	40004800 	.word	0x40004800
 80038b0:	40004c00 	.word	0x40004c00
 80038b4:	40005000 	.word	0x40005000
 80038b8:	40011400 	.word	0x40011400
 80038bc:	40011800 	.word	0x40011800
 80038c0:	40011c00 	.word	0x40011c00
 80038c4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	61bb      	str	r3, [r7, #24]
        break;
 80038ce:	e006      	b.n	80038de <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038d4:	231e      	movs	r3, #30
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
        break;
 80038dc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01e      	beq.n	8003922 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	085a      	lsrs	r2, r3, #1
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	18d2      	adds	r2, r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0019      	movs	r1, r3
 80038f4:	0010      	movs	r0, r2
 80038f6:	f7fc fc17 	bl	8000128 <__udivsi3>
 80038fa:	0003      	movs	r3, r0
 80038fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b0f      	cmp	r3, #15
 8003902:	d90a      	bls.n	800391a <UART_SetConfig+0x3ae>
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	025b      	lsls	r3, r3, #9
 800390a:	429a      	cmp	r2, r3
 800390c:	d205      	bcs.n	800391a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	e003      	b.n	8003922 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800391a:	231e      	movs	r3, #30
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800392e:	231e      	movs	r3, #30
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	781b      	ldrb	r3, [r3, #0]
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b008      	add	sp, #32
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	2208      	movs	r2, #8
 800394a:	4013      	ands	r3, r2
 800394c:	d00b      	beq.n	8003966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a4a      	ldr	r2, [pc, #296]	@ (8003a80 <UART_AdvFeatureConfig+0x144>)
 8003956:	4013      	ands	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	2201      	movs	r2, #1
 800396c:	4013      	ands	r3, r2
 800396e:	d00b      	beq.n	8003988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4a43      	ldr	r2, [pc, #268]	@ (8003a84 <UART_AdvFeatureConfig+0x148>)
 8003978:	4013      	ands	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	2202      	movs	r2, #2
 800398e:	4013      	ands	r3, r2
 8003990:	d00b      	beq.n	80039aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a3b      	ldr	r2, [pc, #236]	@ (8003a88 <UART_AdvFeatureConfig+0x14c>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d00b      	beq.n	80039cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4a34      	ldr	r2, [pc, #208]	@ (8003a8c <UART_AdvFeatureConfig+0x150>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	2210      	movs	r2, #16
 80039d2:	4013      	ands	r3, r2
 80039d4:	d00b      	beq.n	80039ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003a90 <UART_AdvFeatureConfig+0x154>)
 80039de:	4013      	ands	r3, r2
 80039e0:	0019      	movs	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2220      	movs	r2, #32
 80039f4:	4013      	ands	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4a25      	ldr	r2, [pc, #148]	@ (8003a94 <UART_AdvFeatureConfig+0x158>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	2240      	movs	r2, #64	@ 0x40
 8003a16:	4013      	ands	r3, r2
 8003a18:	d01d      	beq.n	8003a56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <UART_AdvFeatureConfig+0x15c>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	035b      	lsls	r3, r3, #13
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10b      	bne.n	8003a56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a15      	ldr	r2, [pc, #84]	@ (8003a9c <UART_AdvFeatureConfig+0x160>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	2280      	movs	r2, #128	@ 0x80
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa0 <UART_AdvFeatureConfig+0x164>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	ffff7fff 	.word	0xffff7fff
 8003a84:	fffdffff 	.word	0xfffdffff
 8003a88:	fffeffff 	.word	0xfffeffff
 8003a8c:	fffbffff 	.word	0xfffbffff
 8003a90:	ffffefff 	.word	0xffffefff
 8003a94:	ffffdfff 	.word	0xffffdfff
 8003a98:	ffefffff 	.word	0xffefffff
 8003a9c:	ff9fffff 	.word	0xff9fffff
 8003aa0:	fff7ffff 	.word	0xfff7ffff

08003aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b092      	sub	sp, #72	@ 0x48
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2284      	movs	r2, #132	@ 0x84
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab4:	f7fd f9ae 	bl	8000e14 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d12c      	bne.n	8003b24 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003acc:	2280      	movs	r2, #128	@ 0x80
 8003ace:	0391      	lsls	r1, r2, #14
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4a46      	ldr	r2, [pc, #280]	@ (8003bec <UART_CheckIdleState+0x148>)
 8003ad4:	9200      	str	r2, [sp, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f000 f88c 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d021      	beq.n	8003b24 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aea:	2301      	movs	r3, #1
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			@ (mov r8, r8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	438a      	bics	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2278      	movs	r2, #120	@ 0x78
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e05f      	b.n	8003be4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d146      	bne.n	8003bc0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	2280      	movs	r2, #128	@ 0x80
 8003b36:	03d1      	lsls	r1, r2, #15
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <UART_CheckIdleState+0x148>)
 8003b3c:	9200      	str	r2, [sp, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f000 f858 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8003b44:	1e03      	subs	r3, r0, #0
 8003b46:	d03b      	beq.n	8003bc0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b48:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b52:	2301      	movs	r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4921      	ldr	r1, [pc, #132]	@ (8003bf0 <UART_CheckIdleState+0x14c>)
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b80:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b84:	2301      	movs	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f383 8810 	msr	PRIMASK, r3
}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2280      	movs	r2, #128	@ 0x80
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2278      	movs	r2, #120	@ 0x78
 8003bb8:	2100      	movs	r1, #0
 8003bba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e011      	b.n	8003be4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2280      	movs	r2, #128	@ 0x80
 8003bca:	2120      	movs	r1, #32
 8003bcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2278      	movs	r2, #120	@ 0x78
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b010      	add	sp, #64	@ 0x40
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	01ffffff 	.word	0x01ffffff
 8003bf0:	fffffedf 	.word	0xfffffedf

08003bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c04:	e051      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	d04e      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0c:	f7fd f902 	bl	8000e14 <HAL_GetTick>
 8003c10:	0002      	movs	r2, r0
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e051      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d03b      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b80      	cmp	r3, #128	@ 0x80
 8003c36:	d038      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b40      	cmp	r3, #64	@ 0x40
 8003c3c:	d035      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2208      	movs	r2, #8
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d111      	bne.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2208      	movs	r2, #8
 8003c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	0018      	movs	r0, r3
 8003c58:	f000 f83c 	bl	8003cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2284      	movs	r2, #132	@ 0x84
 8003c60:	2108      	movs	r1, #8
 8003c62:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2278      	movs	r2, #120	@ 0x78
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e02c      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d112      	bne.n	8003caa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 f81f 	bl	8003cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2284      	movs	r2, #132	@ 0x84
 8003c9a:	2120      	movs	r1, #32
 8003c9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2278      	movs	r2, #120	@ 0x78
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e00f      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	425a      	negs	r2, r3
 8003cba:	4153      	adcs	r3, r2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	1dfb      	adds	r3, r7, #7
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d09e      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	@ 0x38
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ce2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f383 8810 	msr	PRIMASK, r3
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4926      	ldr	r1, [pc, #152]	@ (8003d98 <UART_EndRxTransfer+0xc4>)
 8003cfe:	400a      	ands	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d12:	623b      	str	r3, [r7, #32]
  return(result);
 8003d14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d16:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d18:	2301      	movs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	f383 8810 	msr	PRIMASK, r3
}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2101      	movs	r1, #1
 8003d30:	438a      	bics	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d118      	bne.n	8003d7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d48:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d52:	2301      	movs	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			@ (mov r8, r8)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2110      	movs	r1, #16
 8003d6a:	438a      	bics	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f383 8810 	msr	PRIMASK, r3
}
 8003d78:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2280      	movs	r2, #128	@ 0x80
 8003d7e:	2120      	movs	r1, #32
 8003d80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b00e      	add	sp, #56	@ 0x38
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	fffffedf 	.word	0xfffffedf

08003d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	225a      	movs	r2, #90	@ 0x5a
 8003dae:	2100      	movs	r1, #0
 8003db0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2252      	movs	r2, #82	@ 0x52
 8003db6:	2100      	movs	r1, #0
 8003db8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff fbc1 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b004      	add	sp, #16
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f383 8810 	msr	PRIMASK, r3
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2140      	movs	r1, #64	@ 0x40
 8003df4:	438a      	bics	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f383 8810 	msr	PRIMASK, r3
}
 8003e02:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff fb8e 	bl	8003534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b006      	add	sp, #24
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <siprintf>:
 8003e30:	b40e      	push	{r1, r2, r3}
 8003e32:	b500      	push	{lr}
 8003e34:	490b      	ldr	r1, [pc, #44]	@ (8003e64 <siprintf+0x34>)
 8003e36:	b09c      	sub	sp, #112	@ 0x70
 8003e38:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e3a:	9002      	str	r0, [sp, #8]
 8003e3c:	9006      	str	r0, [sp, #24]
 8003e3e:	9107      	str	r1, [sp, #28]
 8003e40:	9104      	str	r1, [sp, #16]
 8003e42:	4809      	ldr	r0, [pc, #36]	@ (8003e68 <siprintf+0x38>)
 8003e44:	4909      	ldr	r1, [pc, #36]	@ (8003e6c <siprintf+0x3c>)
 8003e46:	cb04      	ldmia	r3!, {r2}
 8003e48:	9105      	str	r1, [sp, #20]
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	a902      	add	r1, sp, #8
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	f000 f9b8 	bl	80041c4 <_svfiprintf_r>
 8003e54:	2200      	movs	r2, #0
 8003e56:	9b02      	ldr	r3, [sp, #8]
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	b01c      	add	sp, #112	@ 0x70
 8003e5c:	bc08      	pop	{r3}
 8003e5e:	b003      	add	sp, #12
 8003e60:	4718      	bx	r3
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	7fffffff 	.word	0x7fffffff
 8003e68:	2000000c 	.word	0x2000000c
 8003e6c:	ffff0208 	.word	0xffff0208

08003e70 <memset>:
 8003e70:	0003      	movs	r3, r0
 8003e72:	1882      	adds	r2, r0, r2
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	7019      	strb	r1, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <strstr>:
 8003e80:	780a      	ldrb	r2, [r1, #0]
 8003e82:	b530      	push	{r4, r5, lr}
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	d10c      	bne.n	8003ea2 <strstr+0x22>
 8003e88:	bd30      	pop	{r4, r5, pc}
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d108      	bne.n	8003ea0 <strstr+0x20>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	5ccc      	ldrb	r4, [r1, r3]
 8003e92:	2c00      	cmp	r4, #0
 8003e94:	d0f8      	beq.n	8003e88 <strstr+0x8>
 8003e96:	5cc5      	ldrb	r5, [r0, r3]
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d101      	bne.n	8003ea0 <strstr+0x20>
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	e7f7      	b.n	8003e90 <strstr+0x10>
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	7803      	ldrb	r3, [r0, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <strstr+0xa>
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	e7ed      	b.n	8003e88 <strstr+0x8>

08003eac <__libc_init_array>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	2600      	movs	r6, #0
 8003eb0:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee4 <__libc_init_array+0x38>)
 8003eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ee8 <__libc_init_array+0x3c>)
 8003eb4:	1b64      	subs	r4, r4, r5
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	42a6      	cmp	r6, r4
 8003eba:	d109      	bne.n	8003ed0 <__libc_init_array+0x24>
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	f000 fc75 	bl	80047ac <_init>
 8003ec2:	4c0a      	ldr	r4, [pc, #40]	@ (8003eec <__libc_init_array+0x40>)
 8003ec4:	4d0a      	ldr	r5, [pc, #40]	@ (8003ef0 <__libc_init_array+0x44>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	42a6      	cmp	r6, r4
 8003ecc:	d105      	bne.n	8003eda <__libc_init_array+0x2e>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	00b3      	lsls	r3, r6, #2
 8003ed2:	58eb      	ldr	r3, [r5, r3]
 8003ed4:	4798      	blx	r3
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7ee      	b.n	8003eb8 <__libc_init_array+0xc>
 8003eda:	00b3      	lsls	r3, r6, #2
 8003edc:	58eb      	ldr	r3, [r5, r3]
 8003ede:	4798      	blx	r3
 8003ee0:	3601      	adds	r6, #1
 8003ee2:	e7f2      	b.n	8003eca <__libc_init_array+0x1e>
 8003ee4:	0800496c 	.word	0x0800496c
 8003ee8:	0800496c 	.word	0x0800496c
 8003eec:	08004970 	.word	0x08004970
 8003ef0:	0800496c 	.word	0x0800496c

08003ef4 <__retarget_lock_acquire_recursive>:
 8003ef4:	4770      	bx	lr

08003ef6 <__retarget_lock_release_recursive>:
 8003ef6:	4770      	bx	lr

08003ef8 <memcpy>:
 8003ef8:	2300      	movs	r3, #0
 8003efa:	b510      	push	{r4, lr}
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d100      	bne.n	8003f02 <memcpy+0xa>
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	5ccc      	ldrb	r4, [r1, r3]
 8003f04:	54c4      	strb	r4, [r0, r3]
 8003f06:	3301      	adds	r3, #1
 8003f08:	e7f8      	b.n	8003efc <memcpy+0x4>
	...

08003f0c <_free_r>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	0005      	movs	r5, r0
 8003f10:	1e0c      	subs	r4, r1, #0
 8003f12:	d010      	beq.n	8003f36 <_free_r+0x2a>
 8003f14:	3c04      	subs	r4, #4
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	da00      	bge.n	8003f1e <_free_r+0x12>
 8003f1c:	18e4      	adds	r4, r4, r3
 8003f1e:	0028      	movs	r0, r5
 8003f20:	f000 f8e0 	bl	80040e4 <__malloc_lock>
 8003f24:	4a1d      	ldr	r2, [pc, #116]	@ (8003f9c <_free_r+0x90>)
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <_free_r+0x2c>
 8003f2c:	6063      	str	r3, [r4, #4]
 8003f2e:	6014      	str	r4, [r2, #0]
 8003f30:	0028      	movs	r0, r5
 8003f32:	f000 f8df 	bl	80040f4 <__malloc_unlock>
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	d908      	bls.n	8003f4e <_free_r+0x42>
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	1821      	adds	r1, r4, r0
 8003f40:	428b      	cmp	r3, r1
 8003f42:	d1f3      	bne.n	8003f2c <_free_r+0x20>
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	1809      	adds	r1, r1, r0
 8003f4a:	6021      	str	r1, [r4, #0]
 8003f4c:	e7ee      	b.n	8003f2c <_free_r+0x20>
 8003f4e:	001a      	movs	r2, r3
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <_free_r+0x4e>
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d9f9      	bls.n	8003f4e <_free_r+0x42>
 8003f5a:	6811      	ldr	r1, [r2, #0]
 8003f5c:	1850      	adds	r0, r2, r1
 8003f5e:	42a0      	cmp	r0, r4
 8003f60:	d10b      	bne.n	8003f7a <_free_r+0x6e>
 8003f62:	6820      	ldr	r0, [r4, #0]
 8003f64:	1809      	adds	r1, r1, r0
 8003f66:	1850      	adds	r0, r2, r1
 8003f68:	6011      	str	r1, [r2, #0]
 8003f6a:	4283      	cmp	r3, r0
 8003f6c:	d1e0      	bne.n	8003f30 <_free_r+0x24>
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	1841      	adds	r1, r0, r1
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	6053      	str	r3, [r2, #4]
 8003f78:	e7da      	b.n	8003f30 <_free_r+0x24>
 8003f7a:	42a0      	cmp	r0, r4
 8003f7c:	d902      	bls.n	8003f84 <_free_r+0x78>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	602b      	str	r3, [r5, #0]
 8003f82:	e7d5      	b.n	8003f30 <_free_r+0x24>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	1821      	adds	r1, r4, r0
 8003f88:	428b      	cmp	r3, r1
 8003f8a:	d103      	bne.n	8003f94 <_free_r+0x88>
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	1809      	adds	r1, r1, r0
 8003f92:	6021      	str	r1, [r4, #0]
 8003f94:	6063      	str	r3, [r4, #4]
 8003f96:	6054      	str	r4, [r2, #4]
 8003f98:	e7ca      	b.n	8003f30 <_free_r+0x24>
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	20000600 	.word	0x20000600

08003fa0 <sbrk_aligned>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4e0f      	ldr	r6, [pc, #60]	@ (8003fe0 <sbrk_aligned+0x40>)
 8003fa4:	000d      	movs	r5, r1
 8003fa6:	6831      	ldr	r1, [r6, #0]
 8003fa8:	0004      	movs	r4, r0
 8003faa:	2900      	cmp	r1, #0
 8003fac:	d102      	bne.n	8003fb4 <sbrk_aligned+0x14>
 8003fae:	f000 fb99 	bl	80046e4 <_sbrk_r>
 8003fb2:	6030      	str	r0, [r6, #0]
 8003fb4:	0029      	movs	r1, r5
 8003fb6:	0020      	movs	r0, r4
 8003fb8:	f000 fb94 	bl	80046e4 <_sbrk_r>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d103      	bne.n	8003fc8 <sbrk_aligned+0x28>
 8003fc0:	2501      	movs	r5, #1
 8003fc2:	426d      	negs	r5, r5
 8003fc4:	0028      	movs	r0, r5
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	2303      	movs	r3, #3
 8003fca:	1cc5      	adds	r5, r0, #3
 8003fcc:	439d      	bics	r5, r3
 8003fce:	42a8      	cmp	r0, r5
 8003fd0:	d0f8      	beq.n	8003fc4 <sbrk_aligned+0x24>
 8003fd2:	1a29      	subs	r1, r5, r0
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	f000 fb85 	bl	80046e4 <_sbrk_r>
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d1f2      	bne.n	8003fc4 <sbrk_aligned+0x24>
 8003fde:	e7ef      	b.n	8003fc0 <sbrk_aligned+0x20>
 8003fe0:	200005fc 	.word	0x200005fc

08003fe4 <_malloc_r>:
 8003fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	1ccb      	adds	r3, r1, #3
 8003fea:	4393      	bics	r3, r2
 8003fec:	3308      	adds	r3, #8
 8003fee:	0005      	movs	r5, r0
 8003ff0:	001f      	movs	r7, r3
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d234      	bcs.n	8004060 <_malloc_r+0x7c>
 8003ff6:	270c      	movs	r7, #12
 8003ff8:	42b9      	cmp	r1, r7
 8003ffa:	d833      	bhi.n	8004064 <_malloc_r+0x80>
 8003ffc:	0028      	movs	r0, r5
 8003ffe:	f000 f871 	bl	80040e4 <__malloc_lock>
 8004002:	4e37      	ldr	r6, [pc, #220]	@ (80040e0 <_malloc_r+0xfc>)
 8004004:	6833      	ldr	r3, [r6, #0]
 8004006:	001c      	movs	r4, r3
 8004008:	2c00      	cmp	r4, #0
 800400a:	d12f      	bne.n	800406c <_malloc_r+0x88>
 800400c:	0039      	movs	r1, r7
 800400e:	0028      	movs	r0, r5
 8004010:	f7ff ffc6 	bl	8003fa0 <sbrk_aligned>
 8004014:	0004      	movs	r4, r0
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	d15f      	bne.n	80040da <_malloc_r+0xf6>
 800401a:	6834      	ldr	r4, [r6, #0]
 800401c:	9400      	str	r4, [sp, #0]
 800401e:	9b00      	ldr	r3, [sp, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d14a      	bne.n	80040ba <_malloc_r+0xd6>
 8004024:	2c00      	cmp	r4, #0
 8004026:	d052      	beq.n	80040ce <_malloc_r+0xea>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	0028      	movs	r0, r5
 800402c:	18e3      	adds	r3, r4, r3
 800402e:	9900      	ldr	r1, [sp, #0]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	f000 fb57 	bl	80046e4 <_sbrk_r>
 8004036:	9b01      	ldr	r3, [sp, #4]
 8004038:	4283      	cmp	r3, r0
 800403a:	d148      	bne.n	80040ce <_malloc_r+0xea>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	0028      	movs	r0, r5
 8004040:	1aff      	subs	r7, r7, r3
 8004042:	0039      	movs	r1, r7
 8004044:	f7ff ffac 	bl	8003fa0 <sbrk_aligned>
 8004048:	3001      	adds	r0, #1
 800404a:	d040      	beq.n	80040ce <_malloc_r+0xea>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	19db      	adds	r3, r3, r7
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	6833      	ldr	r3, [r6, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	2a00      	cmp	r2, #0
 8004058:	d133      	bne.n	80040c2 <_malloc_r+0xde>
 800405a:	9b00      	ldr	r3, [sp, #0]
 800405c:	6033      	str	r3, [r6, #0]
 800405e:	e019      	b.n	8004094 <_malloc_r+0xb0>
 8004060:	2b00      	cmp	r3, #0
 8004062:	dac9      	bge.n	8003ff8 <_malloc_r+0x14>
 8004064:	230c      	movs	r3, #12
 8004066:	602b      	str	r3, [r5, #0]
 8004068:	2000      	movs	r0, #0
 800406a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800406c:	6821      	ldr	r1, [r4, #0]
 800406e:	1bc9      	subs	r1, r1, r7
 8004070:	d420      	bmi.n	80040b4 <_malloc_r+0xd0>
 8004072:	290b      	cmp	r1, #11
 8004074:	d90a      	bls.n	800408c <_malloc_r+0xa8>
 8004076:	19e2      	adds	r2, r4, r7
 8004078:	6027      	str	r7, [r4, #0]
 800407a:	42a3      	cmp	r3, r4
 800407c:	d104      	bne.n	8004088 <_malloc_r+0xa4>
 800407e:	6032      	str	r2, [r6, #0]
 8004080:	6863      	ldr	r3, [r4, #4]
 8004082:	6011      	str	r1, [r2, #0]
 8004084:	6053      	str	r3, [r2, #4]
 8004086:	e005      	b.n	8004094 <_malloc_r+0xb0>
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	e7f9      	b.n	8004080 <_malloc_r+0x9c>
 800408c:	6862      	ldr	r2, [r4, #4]
 800408e:	42a3      	cmp	r3, r4
 8004090:	d10e      	bne.n	80040b0 <_malloc_r+0xcc>
 8004092:	6032      	str	r2, [r6, #0]
 8004094:	0028      	movs	r0, r5
 8004096:	f000 f82d 	bl	80040f4 <__malloc_unlock>
 800409a:	0020      	movs	r0, r4
 800409c:	2207      	movs	r2, #7
 800409e:	300b      	adds	r0, #11
 80040a0:	1d23      	adds	r3, r4, #4
 80040a2:	4390      	bics	r0, r2
 80040a4:	1ac2      	subs	r2, r0, r3
 80040a6:	4298      	cmp	r0, r3
 80040a8:	d0df      	beq.n	800406a <_malloc_r+0x86>
 80040aa:	1a1b      	subs	r3, r3, r0
 80040ac:	50a3      	str	r3, [r4, r2]
 80040ae:	e7dc      	b.n	800406a <_malloc_r+0x86>
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	e7ef      	b.n	8004094 <_malloc_r+0xb0>
 80040b4:	0023      	movs	r3, r4
 80040b6:	6864      	ldr	r4, [r4, #4]
 80040b8:	e7a6      	b.n	8004008 <_malloc_r+0x24>
 80040ba:	9c00      	ldr	r4, [sp, #0]
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	e7ad      	b.n	800401e <_malloc_r+0x3a>
 80040c2:	001a      	movs	r2, r3
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	42a3      	cmp	r3, r4
 80040c8:	d1fb      	bne.n	80040c2 <_malloc_r+0xde>
 80040ca:	2300      	movs	r3, #0
 80040cc:	e7da      	b.n	8004084 <_malloc_r+0xa0>
 80040ce:	230c      	movs	r3, #12
 80040d0:	0028      	movs	r0, r5
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	f000 f80e 	bl	80040f4 <__malloc_unlock>
 80040d8:	e7c6      	b.n	8004068 <_malloc_r+0x84>
 80040da:	6007      	str	r7, [r0, #0]
 80040dc:	e7da      	b.n	8004094 <_malloc_r+0xb0>
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	20000600 	.word	0x20000600

080040e4 <__malloc_lock>:
 80040e4:	b510      	push	{r4, lr}
 80040e6:	4802      	ldr	r0, [pc, #8]	@ (80040f0 <__malloc_lock+0xc>)
 80040e8:	f7ff ff04 	bl	8003ef4 <__retarget_lock_acquire_recursive>
 80040ec:	bd10      	pop	{r4, pc}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	200005f8 	.word	0x200005f8

080040f4 <__malloc_unlock>:
 80040f4:	b510      	push	{r4, lr}
 80040f6:	4802      	ldr	r0, [pc, #8]	@ (8004100 <__malloc_unlock+0xc>)
 80040f8:	f7ff fefd 	bl	8003ef6 <__retarget_lock_release_recursive>
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	200005f8 	.word	0x200005f8

08004104 <__ssputs_r>:
 8004104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004106:	688e      	ldr	r6, [r1, #8]
 8004108:	b085      	sub	sp, #20
 800410a:	001f      	movs	r7, r3
 800410c:	000c      	movs	r4, r1
 800410e:	680b      	ldr	r3, [r1, #0]
 8004110:	9002      	str	r0, [sp, #8]
 8004112:	9203      	str	r2, [sp, #12]
 8004114:	42be      	cmp	r6, r7
 8004116:	d830      	bhi.n	800417a <__ssputs_r+0x76>
 8004118:	210c      	movs	r1, #12
 800411a:	5e62      	ldrsh	r2, [r4, r1]
 800411c:	2190      	movs	r1, #144	@ 0x90
 800411e:	00c9      	lsls	r1, r1, #3
 8004120:	420a      	tst	r2, r1
 8004122:	d028      	beq.n	8004176 <__ssputs_r+0x72>
 8004124:	2003      	movs	r0, #3
 8004126:	6921      	ldr	r1, [r4, #16]
 8004128:	1a5b      	subs	r3, r3, r1
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	6963      	ldr	r3, [r4, #20]
 800412e:	4343      	muls	r3, r0
 8004130:	9801      	ldr	r0, [sp, #4]
 8004132:	0fdd      	lsrs	r5, r3, #31
 8004134:	18ed      	adds	r5, r5, r3
 8004136:	1c7b      	adds	r3, r7, #1
 8004138:	181b      	adds	r3, r3, r0
 800413a:	106d      	asrs	r5, r5, #1
 800413c:	42ab      	cmp	r3, r5
 800413e:	d900      	bls.n	8004142 <__ssputs_r+0x3e>
 8004140:	001d      	movs	r5, r3
 8004142:	0552      	lsls	r2, r2, #21
 8004144:	d528      	bpl.n	8004198 <__ssputs_r+0x94>
 8004146:	0029      	movs	r1, r5
 8004148:	9802      	ldr	r0, [sp, #8]
 800414a:	f7ff ff4b 	bl	8003fe4 <_malloc_r>
 800414e:	1e06      	subs	r6, r0, #0
 8004150:	d02c      	beq.n	80041ac <__ssputs_r+0xa8>
 8004152:	9a01      	ldr	r2, [sp, #4]
 8004154:	6921      	ldr	r1, [r4, #16]
 8004156:	f7ff fecf 	bl	8003ef8 <memcpy>
 800415a:	89a2      	ldrh	r2, [r4, #12]
 800415c:	4b18      	ldr	r3, [pc, #96]	@ (80041c0 <__ssputs_r+0xbc>)
 800415e:	401a      	ands	r2, r3
 8004160:	2380      	movs	r3, #128	@ 0x80
 8004162:	4313      	orrs	r3, r2
 8004164:	81a3      	strh	r3, [r4, #12]
 8004166:	9b01      	ldr	r3, [sp, #4]
 8004168:	6126      	str	r6, [r4, #16]
 800416a:	18f6      	adds	r6, r6, r3
 800416c:	6026      	str	r6, [r4, #0]
 800416e:	003e      	movs	r6, r7
 8004170:	6165      	str	r5, [r4, #20]
 8004172:	1aed      	subs	r5, r5, r3
 8004174:	60a5      	str	r5, [r4, #8]
 8004176:	42be      	cmp	r6, r7
 8004178:	d900      	bls.n	800417c <__ssputs_r+0x78>
 800417a:	003e      	movs	r6, r7
 800417c:	0032      	movs	r2, r6
 800417e:	9903      	ldr	r1, [sp, #12]
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	f000 fa9b 	bl	80046bc <memmove>
 8004186:	2000      	movs	r0, #0
 8004188:	68a3      	ldr	r3, [r4, #8]
 800418a:	1b9b      	subs	r3, r3, r6
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	199b      	adds	r3, r3, r6
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	b005      	add	sp, #20
 8004196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004198:	002a      	movs	r2, r5
 800419a:	9802      	ldr	r0, [sp, #8]
 800419c:	f000 fabf 	bl	800471e <_realloc_r>
 80041a0:	1e06      	subs	r6, r0, #0
 80041a2:	d1e0      	bne.n	8004166 <__ssputs_r+0x62>
 80041a4:	6921      	ldr	r1, [r4, #16]
 80041a6:	9802      	ldr	r0, [sp, #8]
 80041a8:	f7ff feb0 	bl	8003f0c <_free_r>
 80041ac:	230c      	movs	r3, #12
 80041ae:	2001      	movs	r0, #1
 80041b0:	9a02      	ldr	r2, [sp, #8]
 80041b2:	4240      	negs	r0, r0
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	89a2      	ldrh	r2, [r4, #12]
 80041b8:	3334      	adds	r3, #52	@ 0x34
 80041ba:	4313      	orrs	r3, r2
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	e7e9      	b.n	8004194 <__ssputs_r+0x90>
 80041c0:	fffffb7f 	.word	0xfffffb7f

080041c4 <_svfiprintf_r>:
 80041c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c6:	b0a1      	sub	sp, #132	@ 0x84
 80041c8:	9003      	str	r0, [sp, #12]
 80041ca:	001d      	movs	r5, r3
 80041cc:	898b      	ldrh	r3, [r1, #12]
 80041ce:	000f      	movs	r7, r1
 80041d0:	0016      	movs	r6, r2
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	d511      	bpl.n	80041fa <_svfiprintf_r+0x36>
 80041d6:	690b      	ldr	r3, [r1, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10e      	bne.n	80041fa <_svfiprintf_r+0x36>
 80041dc:	2140      	movs	r1, #64	@ 0x40
 80041de:	f7ff ff01 	bl	8003fe4 <_malloc_r>
 80041e2:	6038      	str	r0, [r7, #0]
 80041e4:	6138      	str	r0, [r7, #16]
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d105      	bne.n	80041f6 <_svfiprintf_r+0x32>
 80041ea:	230c      	movs	r3, #12
 80041ec:	9a03      	ldr	r2, [sp, #12]
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	2001      	movs	r0, #1
 80041f2:	4240      	negs	r0, r0
 80041f4:	e0cf      	b.n	8004396 <_svfiprintf_r+0x1d2>
 80041f6:	2340      	movs	r3, #64	@ 0x40
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	2300      	movs	r3, #0
 80041fc:	ac08      	add	r4, sp, #32
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	3320      	adds	r3, #32
 8004202:	7663      	strb	r3, [r4, #25]
 8004204:	3310      	adds	r3, #16
 8004206:	76a3      	strb	r3, [r4, #26]
 8004208:	9507      	str	r5, [sp, #28]
 800420a:	0035      	movs	r5, r6
 800420c:	782b      	ldrb	r3, [r5, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <_svfiprintf_r+0x52>
 8004212:	2b25      	cmp	r3, #37	@ 0x25
 8004214:	d148      	bne.n	80042a8 <_svfiprintf_r+0xe4>
 8004216:	1bab      	subs	r3, r5, r6
 8004218:	9305      	str	r3, [sp, #20]
 800421a:	42b5      	cmp	r5, r6
 800421c:	d00b      	beq.n	8004236 <_svfiprintf_r+0x72>
 800421e:	0032      	movs	r2, r6
 8004220:	0039      	movs	r1, r7
 8004222:	9803      	ldr	r0, [sp, #12]
 8004224:	f7ff ff6e 	bl	8004104 <__ssputs_r>
 8004228:	3001      	adds	r0, #1
 800422a:	d100      	bne.n	800422e <_svfiprintf_r+0x6a>
 800422c:	e0ae      	b.n	800438c <_svfiprintf_r+0x1c8>
 800422e:	6963      	ldr	r3, [r4, #20]
 8004230:	9a05      	ldr	r2, [sp, #20]
 8004232:	189b      	adds	r3, r3, r2
 8004234:	6163      	str	r3, [r4, #20]
 8004236:	782b      	ldrb	r3, [r5, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d100      	bne.n	800423e <_svfiprintf_r+0x7a>
 800423c:	e0a6      	b.n	800438c <_svfiprintf_r+0x1c8>
 800423e:	2201      	movs	r2, #1
 8004240:	2300      	movs	r3, #0
 8004242:	4252      	negs	r2, r2
 8004244:	6062      	str	r2, [r4, #4]
 8004246:	a904      	add	r1, sp, #16
 8004248:	3254      	adds	r2, #84	@ 0x54
 800424a:	1852      	adds	r2, r2, r1
 800424c:	1c6e      	adds	r6, r5, #1
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	60e3      	str	r3, [r4, #12]
 8004252:	60a3      	str	r3, [r4, #8]
 8004254:	7013      	strb	r3, [r2, #0]
 8004256:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004258:	4b54      	ldr	r3, [pc, #336]	@ (80043ac <_svfiprintf_r+0x1e8>)
 800425a:	2205      	movs	r2, #5
 800425c:	0018      	movs	r0, r3
 800425e:	7831      	ldrb	r1, [r6, #0]
 8004260:	9305      	str	r3, [sp, #20]
 8004262:	f000 fa51 	bl	8004708 <memchr>
 8004266:	1c75      	adds	r5, r6, #1
 8004268:	2800      	cmp	r0, #0
 800426a:	d11f      	bne.n	80042ac <_svfiprintf_r+0xe8>
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	06d3      	lsls	r3, r2, #27
 8004270:	d504      	bpl.n	800427c <_svfiprintf_r+0xb8>
 8004272:	2353      	movs	r3, #83	@ 0x53
 8004274:	a904      	add	r1, sp, #16
 8004276:	185b      	adds	r3, r3, r1
 8004278:	2120      	movs	r1, #32
 800427a:	7019      	strb	r1, [r3, #0]
 800427c:	0713      	lsls	r3, r2, #28
 800427e:	d504      	bpl.n	800428a <_svfiprintf_r+0xc6>
 8004280:	2353      	movs	r3, #83	@ 0x53
 8004282:	a904      	add	r1, sp, #16
 8004284:	185b      	adds	r3, r3, r1
 8004286:	212b      	movs	r1, #43	@ 0x2b
 8004288:	7019      	strb	r1, [r3, #0]
 800428a:	7833      	ldrb	r3, [r6, #0]
 800428c:	2b2a      	cmp	r3, #42	@ 0x2a
 800428e:	d016      	beq.n	80042be <_svfiprintf_r+0xfa>
 8004290:	0035      	movs	r5, r6
 8004292:	2100      	movs	r1, #0
 8004294:	200a      	movs	r0, #10
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	782a      	ldrb	r2, [r5, #0]
 800429a:	1c6e      	adds	r6, r5, #1
 800429c:	3a30      	subs	r2, #48	@ 0x30
 800429e:	2a09      	cmp	r2, #9
 80042a0:	d950      	bls.n	8004344 <_svfiprintf_r+0x180>
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d111      	bne.n	80042ca <_svfiprintf_r+0x106>
 80042a6:	e017      	b.n	80042d8 <_svfiprintf_r+0x114>
 80042a8:	3501      	adds	r5, #1
 80042aa:	e7af      	b.n	800420c <_svfiprintf_r+0x48>
 80042ac:	9b05      	ldr	r3, [sp, #20]
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	1ac0      	subs	r0, r0, r3
 80042b2:	2301      	movs	r3, #1
 80042b4:	4083      	lsls	r3, r0
 80042b6:	4313      	orrs	r3, r2
 80042b8:	002e      	movs	r6, r5
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	e7cc      	b.n	8004258 <_svfiprintf_r+0x94>
 80042be:	9b07      	ldr	r3, [sp, #28]
 80042c0:	1d19      	adds	r1, r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	9107      	str	r1, [sp, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db01      	blt.n	80042ce <_svfiprintf_r+0x10a>
 80042ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042cc:	e004      	b.n	80042d8 <_svfiprintf_r+0x114>
 80042ce:	425b      	negs	r3, r3
 80042d0:	60e3      	str	r3, [r4, #12]
 80042d2:	2302      	movs	r3, #2
 80042d4:	4313      	orrs	r3, r2
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	782b      	ldrb	r3, [r5, #0]
 80042da:	2b2e      	cmp	r3, #46	@ 0x2e
 80042dc:	d10c      	bne.n	80042f8 <_svfiprintf_r+0x134>
 80042de:	786b      	ldrb	r3, [r5, #1]
 80042e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e2:	d134      	bne.n	800434e <_svfiprintf_r+0x18a>
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	3502      	adds	r5, #2
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	9207      	str	r2, [sp, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da01      	bge.n	80042f6 <_svfiprintf_r+0x132>
 80042f2:	2301      	movs	r3, #1
 80042f4:	425b      	negs	r3, r3
 80042f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80042f8:	4e2d      	ldr	r6, [pc, #180]	@ (80043b0 <_svfiprintf_r+0x1ec>)
 80042fa:	2203      	movs	r2, #3
 80042fc:	0030      	movs	r0, r6
 80042fe:	7829      	ldrb	r1, [r5, #0]
 8004300:	f000 fa02 	bl	8004708 <memchr>
 8004304:	2800      	cmp	r0, #0
 8004306:	d006      	beq.n	8004316 <_svfiprintf_r+0x152>
 8004308:	2340      	movs	r3, #64	@ 0x40
 800430a:	1b80      	subs	r0, r0, r6
 800430c:	4083      	lsls	r3, r0
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	3501      	adds	r5, #1
 8004312:	4313      	orrs	r3, r2
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	7829      	ldrb	r1, [r5, #0]
 8004318:	2206      	movs	r2, #6
 800431a:	4826      	ldr	r0, [pc, #152]	@ (80043b4 <_svfiprintf_r+0x1f0>)
 800431c:	1c6e      	adds	r6, r5, #1
 800431e:	7621      	strb	r1, [r4, #24]
 8004320:	f000 f9f2 	bl	8004708 <memchr>
 8004324:	2800      	cmp	r0, #0
 8004326:	d038      	beq.n	800439a <_svfiprintf_r+0x1d6>
 8004328:	4b23      	ldr	r3, [pc, #140]	@ (80043b8 <_svfiprintf_r+0x1f4>)
 800432a:	2b00      	cmp	r3, #0
 800432c:	d122      	bne.n	8004374 <_svfiprintf_r+0x1b0>
 800432e:	2207      	movs	r2, #7
 8004330:	9b07      	ldr	r3, [sp, #28]
 8004332:	3307      	adds	r3, #7
 8004334:	4393      	bics	r3, r2
 8004336:	3308      	adds	r3, #8
 8004338:	9307      	str	r3, [sp, #28]
 800433a:	6963      	ldr	r3, [r4, #20]
 800433c:	9a04      	ldr	r2, [sp, #16]
 800433e:	189b      	adds	r3, r3, r2
 8004340:	6163      	str	r3, [r4, #20]
 8004342:	e762      	b.n	800420a <_svfiprintf_r+0x46>
 8004344:	4343      	muls	r3, r0
 8004346:	0035      	movs	r5, r6
 8004348:	2101      	movs	r1, #1
 800434a:	189b      	adds	r3, r3, r2
 800434c:	e7a4      	b.n	8004298 <_svfiprintf_r+0xd4>
 800434e:	2300      	movs	r3, #0
 8004350:	200a      	movs	r0, #10
 8004352:	0019      	movs	r1, r3
 8004354:	3501      	adds	r5, #1
 8004356:	6063      	str	r3, [r4, #4]
 8004358:	782a      	ldrb	r2, [r5, #0]
 800435a:	1c6e      	adds	r6, r5, #1
 800435c:	3a30      	subs	r2, #48	@ 0x30
 800435e:	2a09      	cmp	r2, #9
 8004360:	d903      	bls.n	800436a <_svfiprintf_r+0x1a6>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0c8      	beq.n	80042f8 <_svfiprintf_r+0x134>
 8004366:	9109      	str	r1, [sp, #36]	@ 0x24
 8004368:	e7c6      	b.n	80042f8 <_svfiprintf_r+0x134>
 800436a:	4341      	muls	r1, r0
 800436c:	0035      	movs	r5, r6
 800436e:	2301      	movs	r3, #1
 8004370:	1889      	adds	r1, r1, r2
 8004372:	e7f1      	b.n	8004358 <_svfiprintf_r+0x194>
 8004374:	aa07      	add	r2, sp, #28
 8004376:	9200      	str	r2, [sp, #0]
 8004378:	0021      	movs	r1, r4
 800437a:	003a      	movs	r2, r7
 800437c:	4b0f      	ldr	r3, [pc, #60]	@ (80043bc <_svfiprintf_r+0x1f8>)
 800437e:	9803      	ldr	r0, [sp, #12]
 8004380:	e000      	b.n	8004384 <_svfiprintf_r+0x1c0>
 8004382:	bf00      	nop
 8004384:	9004      	str	r0, [sp, #16]
 8004386:	9b04      	ldr	r3, [sp, #16]
 8004388:	3301      	adds	r3, #1
 800438a:	d1d6      	bne.n	800433a <_svfiprintf_r+0x176>
 800438c:	89bb      	ldrh	r3, [r7, #12]
 800438e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004390:	065b      	lsls	r3, r3, #25
 8004392:	d500      	bpl.n	8004396 <_svfiprintf_r+0x1d2>
 8004394:	e72c      	b.n	80041f0 <_svfiprintf_r+0x2c>
 8004396:	b021      	add	sp, #132	@ 0x84
 8004398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439a:	aa07      	add	r2, sp, #28
 800439c:	9200      	str	r2, [sp, #0]
 800439e:	0021      	movs	r1, r4
 80043a0:	003a      	movs	r2, r7
 80043a2:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <_svfiprintf_r+0x1f8>)
 80043a4:	9803      	ldr	r0, [sp, #12]
 80043a6:	f000 f87b 	bl	80044a0 <_printf_i>
 80043aa:	e7eb      	b.n	8004384 <_svfiprintf_r+0x1c0>
 80043ac:	08004938 	.word	0x08004938
 80043b0:	0800493e 	.word	0x0800493e
 80043b4:	08004942 	.word	0x08004942
 80043b8:	00000000 	.word	0x00000000
 80043bc:	08004105 	.word	0x08004105

080043c0 <_printf_common>:
 80043c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043c2:	0016      	movs	r6, r2
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	688a      	ldr	r2, [r1, #8]
 80043c8:	690b      	ldr	r3, [r1, #16]
 80043ca:	000c      	movs	r4, r1
 80043cc:	9000      	str	r0, [sp, #0]
 80043ce:	4293      	cmp	r3, r2
 80043d0:	da00      	bge.n	80043d4 <_printf_common+0x14>
 80043d2:	0013      	movs	r3, r2
 80043d4:	0022      	movs	r2, r4
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	3243      	adds	r2, #67	@ 0x43
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d001      	beq.n	80043e4 <_printf_common+0x24>
 80043e0:	3301      	adds	r3, #1
 80043e2:	6033      	str	r3, [r6, #0]
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	069b      	lsls	r3, r3, #26
 80043e8:	d502      	bpl.n	80043f0 <_printf_common+0x30>
 80043ea:	6833      	ldr	r3, [r6, #0]
 80043ec:	3302      	adds	r3, #2
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	2306      	movs	r3, #6
 80043f4:	0015      	movs	r5, r2
 80043f6:	401d      	ands	r5, r3
 80043f8:	421a      	tst	r2, r3
 80043fa:	d027      	beq.n	800444c <_printf_common+0x8c>
 80043fc:	0023      	movs	r3, r4
 80043fe:	3343      	adds	r3, #67	@ 0x43
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	1e5a      	subs	r2, r3, #1
 8004404:	4193      	sbcs	r3, r2
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	0692      	lsls	r2, r2, #26
 800440a:	d430      	bmi.n	800446e <_printf_common+0xae>
 800440c:	0022      	movs	r2, r4
 800440e:	9901      	ldr	r1, [sp, #4]
 8004410:	9800      	ldr	r0, [sp, #0]
 8004412:	9d08      	ldr	r5, [sp, #32]
 8004414:	3243      	adds	r2, #67	@ 0x43
 8004416:	47a8      	blx	r5
 8004418:	3001      	adds	r0, #1
 800441a:	d025      	beq.n	8004468 <_printf_common+0xa8>
 800441c:	2206      	movs	r2, #6
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	2500      	movs	r5, #0
 8004422:	4013      	ands	r3, r2
 8004424:	2b04      	cmp	r3, #4
 8004426:	d105      	bne.n	8004434 <_printf_common+0x74>
 8004428:	6833      	ldr	r3, [r6, #0]
 800442a:	68e5      	ldr	r5, [r4, #12]
 800442c:	1aed      	subs	r5, r5, r3
 800442e:	43eb      	mvns	r3, r5
 8004430:	17db      	asrs	r3, r3, #31
 8004432:	401d      	ands	r5, r3
 8004434:	68a3      	ldr	r3, [r4, #8]
 8004436:	6922      	ldr	r2, [r4, #16]
 8004438:	4293      	cmp	r3, r2
 800443a:	dd01      	ble.n	8004440 <_printf_common+0x80>
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	18ed      	adds	r5, r5, r3
 8004440:	2600      	movs	r6, #0
 8004442:	42b5      	cmp	r5, r6
 8004444:	d120      	bne.n	8004488 <_printf_common+0xc8>
 8004446:	2000      	movs	r0, #0
 8004448:	e010      	b.n	800446c <_printf_common+0xac>
 800444a:	3501      	adds	r5, #1
 800444c:	68e3      	ldr	r3, [r4, #12]
 800444e:	6832      	ldr	r2, [r6, #0]
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	42ab      	cmp	r3, r5
 8004454:	ddd2      	ble.n	80043fc <_printf_common+0x3c>
 8004456:	0022      	movs	r2, r4
 8004458:	2301      	movs	r3, #1
 800445a:	9901      	ldr	r1, [sp, #4]
 800445c:	9800      	ldr	r0, [sp, #0]
 800445e:	9f08      	ldr	r7, [sp, #32]
 8004460:	3219      	adds	r2, #25
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	d1f0      	bne.n	800444a <_printf_common+0x8a>
 8004468:	2001      	movs	r0, #1
 800446a:	4240      	negs	r0, r0
 800446c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800446e:	2030      	movs	r0, #48	@ 0x30
 8004470:	18e1      	adds	r1, r4, r3
 8004472:	3143      	adds	r1, #67	@ 0x43
 8004474:	7008      	strb	r0, [r1, #0]
 8004476:	0021      	movs	r1, r4
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	3145      	adds	r1, #69	@ 0x45
 800447c:	7809      	ldrb	r1, [r1, #0]
 800447e:	18a2      	adds	r2, r4, r2
 8004480:	3243      	adds	r2, #67	@ 0x43
 8004482:	3302      	adds	r3, #2
 8004484:	7011      	strb	r1, [r2, #0]
 8004486:	e7c1      	b.n	800440c <_printf_common+0x4c>
 8004488:	0022      	movs	r2, r4
 800448a:	2301      	movs	r3, #1
 800448c:	9901      	ldr	r1, [sp, #4]
 800448e:	9800      	ldr	r0, [sp, #0]
 8004490:	9f08      	ldr	r7, [sp, #32]
 8004492:	321a      	adds	r2, #26
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	d0e6      	beq.n	8004468 <_printf_common+0xa8>
 800449a:	3601      	adds	r6, #1
 800449c:	e7d1      	b.n	8004442 <_printf_common+0x82>
	...

080044a0 <_printf_i>:
 80044a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a2:	b08b      	sub	sp, #44	@ 0x2c
 80044a4:	9206      	str	r2, [sp, #24]
 80044a6:	000a      	movs	r2, r1
 80044a8:	3243      	adds	r2, #67	@ 0x43
 80044aa:	9307      	str	r3, [sp, #28]
 80044ac:	9005      	str	r0, [sp, #20]
 80044ae:	9203      	str	r2, [sp, #12]
 80044b0:	7e0a      	ldrb	r2, [r1, #24]
 80044b2:	000c      	movs	r4, r1
 80044b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80044b6:	2a78      	cmp	r2, #120	@ 0x78
 80044b8:	d809      	bhi.n	80044ce <_printf_i+0x2e>
 80044ba:	2a62      	cmp	r2, #98	@ 0x62
 80044bc:	d80b      	bhi.n	80044d6 <_printf_i+0x36>
 80044be:	2a00      	cmp	r2, #0
 80044c0:	d100      	bne.n	80044c4 <_printf_i+0x24>
 80044c2:	e0bc      	b.n	800463e <_printf_i+0x19e>
 80044c4:	497b      	ldr	r1, [pc, #492]	@ (80046b4 <_printf_i+0x214>)
 80044c6:	9104      	str	r1, [sp, #16]
 80044c8:	2a58      	cmp	r2, #88	@ 0x58
 80044ca:	d100      	bne.n	80044ce <_printf_i+0x2e>
 80044cc:	e090      	b.n	80045f0 <_printf_i+0x150>
 80044ce:	0025      	movs	r5, r4
 80044d0:	3542      	adds	r5, #66	@ 0x42
 80044d2:	702a      	strb	r2, [r5, #0]
 80044d4:	e022      	b.n	800451c <_printf_i+0x7c>
 80044d6:	0010      	movs	r0, r2
 80044d8:	3863      	subs	r0, #99	@ 0x63
 80044da:	2815      	cmp	r0, #21
 80044dc:	d8f7      	bhi.n	80044ce <_printf_i+0x2e>
 80044de:	f7fb fe19 	bl	8000114 <__gnu_thumb1_case_shi>
 80044e2:	0016      	.short	0x0016
 80044e4:	fff6001f 	.word	0xfff6001f
 80044e8:	fff6fff6 	.word	0xfff6fff6
 80044ec:	001ffff6 	.word	0x001ffff6
 80044f0:	fff6fff6 	.word	0xfff6fff6
 80044f4:	fff6fff6 	.word	0xfff6fff6
 80044f8:	003600a1 	.word	0x003600a1
 80044fc:	fff60080 	.word	0xfff60080
 8004500:	00b2fff6 	.word	0x00b2fff6
 8004504:	0036fff6 	.word	0x0036fff6
 8004508:	fff6fff6 	.word	0xfff6fff6
 800450c:	0084      	.short	0x0084
 800450e:	0025      	movs	r5, r4
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	3542      	adds	r5, #66	@ 0x42
 8004514:	1d11      	adds	r1, r2, #4
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	6813      	ldr	r3, [r2, #0]
 800451a:	702b      	strb	r3, [r5, #0]
 800451c:	2301      	movs	r3, #1
 800451e:	e0a0      	b.n	8004662 <_printf_i+0x1c2>
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	6809      	ldr	r1, [r1, #0]
 8004524:	1d02      	adds	r2, r0, #4
 8004526:	060d      	lsls	r5, r1, #24
 8004528:	d50b      	bpl.n	8004542 <_printf_i+0xa2>
 800452a:	6806      	ldr	r6, [r0, #0]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	2e00      	cmp	r6, #0
 8004530:	da03      	bge.n	800453a <_printf_i+0x9a>
 8004532:	232d      	movs	r3, #45	@ 0x2d
 8004534:	9a03      	ldr	r2, [sp, #12]
 8004536:	4276      	negs	r6, r6
 8004538:	7013      	strb	r3, [r2, #0]
 800453a:	4b5e      	ldr	r3, [pc, #376]	@ (80046b4 <_printf_i+0x214>)
 800453c:	270a      	movs	r7, #10
 800453e:	9304      	str	r3, [sp, #16]
 8004540:	e018      	b.n	8004574 <_printf_i+0xd4>
 8004542:	6806      	ldr	r6, [r0, #0]
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	0649      	lsls	r1, r1, #25
 8004548:	d5f1      	bpl.n	800452e <_printf_i+0x8e>
 800454a:	b236      	sxth	r6, r6
 800454c:	e7ef      	b.n	800452e <_printf_i+0x8e>
 800454e:	6808      	ldr	r0, [r1, #0]
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	c940      	ldmia	r1!, {r6}
 8004554:	0605      	lsls	r5, r0, #24
 8004556:	d402      	bmi.n	800455e <_printf_i+0xbe>
 8004558:	0640      	lsls	r0, r0, #25
 800455a:	d500      	bpl.n	800455e <_printf_i+0xbe>
 800455c:	b2b6      	uxth	r6, r6
 800455e:	6019      	str	r1, [r3, #0]
 8004560:	4b54      	ldr	r3, [pc, #336]	@ (80046b4 <_printf_i+0x214>)
 8004562:	270a      	movs	r7, #10
 8004564:	9304      	str	r3, [sp, #16]
 8004566:	2a6f      	cmp	r2, #111	@ 0x6f
 8004568:	d100      	bne.n	800456c <_printf_i+0xcc>
 800456a:	3f02      	subs	r7, #2
 800456c:	0023      	movs	r3, r4
 800456e:	2200      	movs	r2, #0
 8004570:	3343      	adds	r3, #67	@ 0x43
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	60a3      	str	r3, [r4, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db03      	blt.n	8004584 <_printf_i+0xe4>
 800457c:	2104      	movs	r1, #4
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	438a      	bics	r2, r1
 8004582:	6022      	str	r2, [r4, #0]
 8004584:	2e00      	cmp	r6, #0
 8004586:	d102      	bne.n	800458e <_printf_i+0xee>
 8004588:	9d03      	ldr	r5, [sp, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <_printf_i+0x108>
 800458e:	9d03      	ldr	r5, [sp, #12]
 8004590:	0030      	movs	r0, r6
 8004592:	0039      	movs	r1, r7
 8004594:	f7fb fe4e 	bl	8000234 <__aeabi_uidivmod>
 8004598:	9b04      	ldr	r3, [sp, #16]
 800459a:	3d01      	subs	r5, #1
 800459c:	5c5b      	ldrb	r3, [r3, r1]
 800459e:	702b      	strb	r3, [r5, #0]
 80045a0:	0033      	movs	r3, r6
 80045a2:	0006      	movs	r6, r0
 80045a4:	429f      	cmp	r7, r3
 80045a6:	d9f3      	bls.n	8004590 <_printf_i+0xf0>
 80045a8:	2f08      	cmp	r7, #8
 80045aa:	d109      	bne.n	80045c0 <_printf_i+0x120>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07db      	lsls	r3, r3, #31
 80045b0:	d506      	bpl.n	80045c0 <_printf_i+0x120>
 80045b2:	6862      	ldr	r2, [r4, #4]
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	dc02      	bgt.n	80045c0 <_printf_i+0x120>
 80045ba:	2330      	movs	r3, #48	@ 0x30
 80045bc:	3d01      	subs	r5, #1
 80045be:	702b      	strb	r3, [r5, #0]
 80045c0:	9b03      	ldr	r3, [sp, #12]
 80045c2:	1b5b      	subs	r3, r3, r5
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	9b07      	ldr	r3, [sp, #28]
 80045c8:	0021      	movs	r1, r4
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	9805      	ldr	r0, [sp, #20]
 80045ce:	9b06      	ldr	r3, [sp, #24]
 80045d0:	aa09      	add	r2, sp, #36	@ 0x24
 80045d2:	f7ff fef5 	bl	80043c0 <_printf_common>
 80045d6:	3001      	adds	r0, #1
 80045d8:	d148      	bne.n	800466c <_printf_i+0x1cc>
 80045da:	2001      	movs	r0, #1
 80045dc:	4240      	negs	r0, r0
 80045de:	b00b      	add	sp, #44	@ 0x2c
 80045e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e2:	2220      	movs	r2, #32
 80045e4:	6809      	ldr	r1, [r1, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	6022      	str	r2, [r4, #0]
 80045ea:	2278      	movs	r2, #120	@ 0x78
 80045ec:	4932      	ldr	r1, [pc, #200]	@ (80046b8 <_printf_i+0x218>)
 80045ee:	9104      	str	r1, [sp, #16]
 80045f0:	0021      	movs	r1, r4
 80045f2:	3145      	adds	r1, #69	@ 0x45
 80045f4:	700a      	strb	r2, [r1, #0]
 80045f6:	6819      	ldr	r1, [r3, #0]
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	c940      	ldmia	r1!, {r6}
 80045fc:	0610      	lsls	r0, r2, #24
 80045fe:	d402      	bmi.n	8004606 <_printf_i+0x166>
 8004600:	0650      	lsls	r0, r2, #25
 8004602:	d500      	bpl.n	8004606 <_printf_i+0x166>
 8004604:	b2b6      	uxth	r6, r6
 8004606:	6019      	str	r1, [r3, #0]
 8004608:	07d3      	lsls	r3, r2, #31
 800460a:	d502      	bpl.n	8004612 <_printf_i+0x172>
 800460c:	2320      	movs	r3, #32
 800460e:	4313      	orrs	r3, r2
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	2e00      	cmp	r6, #0
 8004614:	d001      	beq.n	800461a <_printf_i+0x17a>
 8004616:	2710      	movs	r7, #16
 8004618:	e7a8      	b.n	800456c <_printf_i+0xcc>
 800461a:	2220      	movs	r2, #32
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	4393      	bics	r3, r2
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	e7f8      	b.n	8004616 <_printf_i+0x176>
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	680d      	ldr	r5, [r1, #0]
 8004628:	1d10      	adds	r0, r2, #4
 800462a:	6949      	ldr	r1, [r1, #20]
 800462c:	6018      	str	r0, [r3, #0]
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	062e      	lsls	r6, r5, #24
 8004632:	d501      	bpl.n	8004638 <_printf_i+0x198>
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	e002      	b.n	800463e <_printf_i+0x19e>
 8004638:	066d      	lsls	r5, r5, #25
 800463a:	d5fb      	bpl.n	8004634 <_printf_i+0x194>
 800463c:	8019      	strh	r1, [r3, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	9d03      	ldr	r5, [sp, #12]
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	e7bf      	b.n	80045c6 <_printf_i+0x126>
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	1d11      	adds	r1, r2, #4
 800464a:	6019      	str	r1, [r3, #0]
 800464c:	6815      	ldr	r5, [r2, #0]
 800464e:	2100      	movs	r1, #0
 8004650:	0028      	movs	r0, r5
 8004652:	6862      	ldr	r2, [r4, #4]
 8004654:	f000 f858 	bl	8004708 <memchr>
 8004658:	2800      	cmp	r0, #0
 800465a:	d001      	beq.n	8004660 <_printf_i+0x1c0>
 800465c:	1b40      	subs	r0, r0, r5
 800465e:	6060      	str	r0, [r4, #4]
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	6123      	str	r3, [r4, #16]
 8004664:	2300      	movs	r3, #0
 8004666:	9a03      	ldr	r2, [sp, #12]
 8004668:	7013      	strb	r3, [r2, #0]
 800466a:	e7ac      	b.n	80045c6 <_printf_i+0x126>
 800466c:	002a      	movs	r2, r5
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	9906      	ldr	r1, [sp, #24]
 8004672:	9805      	ldr	r0, [sp, #20]
 8004674:	9d07      	ldr	r5, [sp, #28]
 8004676:	47a8      	blx	r5
 8004678:	3001      	adds	r0, #1
 800467a:	d0ae      	beq.n	80045da <_printf_i+0x13a>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	079b      	lsls	r3, r3, #30
 8004680:	d415      	bmi.n	80046ae <_printf_i+0x20e>
 8004682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004684:	68e0      	ldr	r0, [r4, #12]
 8004686:	4298      	cmp	r0, r3
 8004688:	daa9      	bge.n	80045de <_printf_i+0x13e>
 800468a:	0018      	movs	r0, r3
 800468c:	e7a7      	b.n	80045de <_printf_i+0x13e>
 800468e:	0022      	movs	r2, r4
 8004690:	2301      	movs	r3, #1
 8004692:	9906      	ldr	r1, [sp, #24]
 8004694:	9805      	ldr	r0, [sp, #20]
 8004696:	9e07      	ldr	r6, [sp, #28]
 8004698:	3219      	adds	r2, #25
 800469a:	47b0      	blx	r6
 800469c:	3001      	adds	r0, #1
 800469e:	d09c      	beq.n	80045da <_printf_i+0x13a>
 80046a0:	3501      	adds	r5, #1
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	dcf0      	bgt.n	800468e <_printf_i+0x1ee>
 80046ac:	e7e9      	b.n	8004682 <_printf_i+0x1e2>
 80046ae:	2500      	movs	r5, #0
 80046b0:	e7f7      	b.n	80046a2 <_printf_i+0x202>
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	08004949 	.word	0x08004949
 80046b8:	0800495a 	.word	0x0800495a

080046bc <memmove>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	4288      	cmp	r0, r1
 80046c0:	d806      	bhi.n	80046d0 <memmove+0x14>
 80046c2:	2300      	movs	r3, #0
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d008      	beq.n	80046da <memmove+0x1e>
 80046c8:	5ccc      	ldrb	r4, [r1, r3]
 80046ca:	54c4      	strb	r4, [r0, r3]
 80046cc:	3301      	adds	r3, #1
 80046ce:	e7f9      	b.n	80046c4 <memmove+0x8>
 80046d0:	188b      	adds	r3, r1, r2
 80046d2:	4298      	cmp	r0, r3
 80046d4:	d2f5      	bcs.n	80046c2 <memmove+0x6>
 80046d6:	3a01      	subs	r2, #1
 80046d8:	d200      	bcs.n	80046dc <memmove+0x20>
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	5c8b      	ldrb	r3, [r1, r2]
 80046de:	5483      	strb	r3, [r0, r2]
 80046e0:	e7f9      	b.n	80046d6 <memmove+0x1a>
	...

080046e4 <_sbrk_r>:
 80046e4:	2300      	movs	r3, #0
 80046e6:	b570      	push	{r4, r5, r6, lr}
 80046e8:	4d06      	ldr	r5, [pc, #24]	@ (8004704 <_sbrk_r+0x20>)
 80046ea:	0004      	movs	r4, r0
 80046ec:	0008      	movs	r0, r1
 80046ee:	602b      	str	r3, [r5, #0]
 80046f0:	f000 f84c 	bl	800478c <_sbrk>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d103      	bne.n	8004700 <_sbrk_r+0x1c>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d000      	beq.n	8004700 <_sbrk_r+0x1c>
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	200005f4 	.word	0x200005f4

08004708 <memchr>:
 8004708:	b2c9      	uxtb	r1, r1
 800470a:	1882      	adds	r2, r0, r2
 800470c:	4290      	cmp	r0, r2
 800470e:	d101      	bne.n	8004714 <memchr+0xc>
 8004710:	2000      	movs	r0, #0
 8004712:	4770      	bx	lr
 8004714:	7803      	ldrb	r3, [r0, #0]
 8004716:	428b      	cmp	r3, r1
 8004718:	d0fb      	beq.n	8004712 <memchr+0xa>
 800471a:	3001      	adds	r0, #1
 800471c:	e7f6      	b.n	800470c <memchr+0x4>

0800471e <_realloc_r>:
 800471e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004720:	0006      	movs	r6, r0
 8004722:	000c      	movs	r4, r1
 8004724:	0015      	movs	r5, r2
 8004726:	2900      	cmp	r1, #0
 8004728:	d105      	bne.n	8004736 <_realloc_r+0x18>
 800472a:	0011      	movs	r1, r2
 800472c:	f7ff fc5a 	bl	8003fe4 <_malloc_r>
 8004730:	0004      	movs	r4, r0
 8004732:	0020      	movs	r0, r4
 8004734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004736:	2a00      	cmp	r2, #0
 8004738:	d103      	bne.n	8004742 <_realloc_r+0x24>
 800473a:	f7ff fbe7 	bl	8003f0c <_free_r>
 800473e:	2400      	movs	r4, #0
 8004740:	e7f7      	b.n	8004732 <_realloc_r+0x14>
 8004742:	f000 f81b 	bl	800477c <_malloc_usable_size_r>
 8004746:	0007      	movs	r7, r0
 8004748:	4285      	cmp	r5, r0
 800474a:	d802      	bhi.n	8004752 <_realloc_r+0x34>
 800474c:	0843      	lsrs	r3, r0, #1
 800474e:	42ab      	cmp	r3, r5
 8004750:	d3ef      	bcc.n	8004732 <_realloc_r+0x14>
 8004752:	0029      	movs	r1, r5
 8004754:	0030      	movs	r0, r6
 8004756:	f7ff fc45 	bl	8003fe4 <_malloc_r>
 800475a:	9001      	str	r0, [sp, #4]
 800475c:	2800      	cmp	r0, #0
 800475e:	d0ee      	beq.n	800473e <_realloc_r+0x20>
 8004760:	002a      	movs	r2, r5
 8004762:	42bd      	cmp	r5, r7
 8004764:	d900      	bls.n	8004768 <_realloc_r+0x4a>
 8004766:	003a      	movs	r2, r7
 8004768:	0021      	movs	r1, r4
 800476a:	9801      	ldr	r0, [sp, #4]
 800476c:	f7ff fbc4 	bl	8003ef8 <memcpy>
 8004770:	0021      	movs	r1, r4
 8004772:	0030      	movs	r0, r6
 8004774:	f7ff fbca 	bl	8003f0c <_free_r>
 8004778:	9c01      	ldr	r4, [sp, #4]
 800477a:	e7da      	b.n	8004732 <_realloc_r+0x14>

0800477c <_malloc_usable_size_r>:
 800477c:	1f0b      	subs	r3, r1, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	1f18      	subs	r0, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	da01      	bge.n	800478a <_malloc_usable_size_r+0xe>
 8004786:	580b      	ldr	r3, [r1, r0]
 8004788:	18c0      	adds	r0, r0, r3
 800478a:	4770      	bx	lr

0800478c <_sbrk>:
 800478c:	4a05      	ldr	r2, [pc, #20]	@ (80047a4 <_sbrk+0x18>)
 800478e:	0003      	movs	r3, r0
 8004790:	6811      	ldr	r1, [r2, #0]
 8004792:	2900      	cmp	r1, #0
 8004794:	d101      	bne.n	800479a <_sbrk+0xe>
 8004796:	4904      	ldr	r1, [pc, #16]	@ (80047a8 <_sbrk+0x1c>)
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	6810      	ldr	r0, [r2, #0]
 800479c:	18c3      	adds	r3, r0, r3
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4770      	bx	lr
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	20000604 	.word	0x20000604
 80047a8:	20000608 	.word	0x20000608

080047ac <_init>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr

080047b8 <_fini>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr
