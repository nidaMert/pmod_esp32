
STM32_Uart_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004188  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004244  08004244  00005244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800430c  0800430c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  0800430c  0800430c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800430c  0800430c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800430c  0800430c  0000530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004314  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000005c  08004370  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000039c  08004370  0000639c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a94e  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c1  00000000  00000000  000109d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00012a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000649  00000000  00000000  000132e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ab  00000000  00000000  00013929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc6a  00000000  00000000  0002ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e3c  00000000  00000000  0003b93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc77a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  000dc7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000de6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800422c 	.word	0x0800422c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800422c 	.word	0x0800422c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000232:	4b10      	ldr	r3, [pc, #64]	@ (8000274 <MX_DMA_Init+0x48>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <MX_DMA_Init+0x48>)
 8000238:	2101      	movs	r1, #1
 800023a:	430a      	orrs	r2, r1
 800023c:	615a      	str	r2, [r3, #20]
 800023e:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <MX_DMA_Init+0x48>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	2201      	movs	r2, #1
 8000244:	4013      	ands	r3, r2
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	2009      	movs	r0, #9
 8000250:	f000 fcd4 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000254:	2009      	movs	r0, #9
 8000256:	f000 fce6 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800025a:	2200      	movs	r2, #0
 800025c:	2100      	movs	r1, #0
 800025e:	200a      	movs	r0, #10
 8000260:	f000 fccc 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000264:	200a      	movs	r0, #10
 8000266:	f000 fcde 	bl	8000c26 <HAL_NVIC_EnableIRQ>

}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	40021000 	.word	0x40021000

08000278 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b089      	sub	sp, #36	@ 0x24
 800027c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027e:	240c      	movs	r4, #12
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2314      	movs	r3, #20
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f003 ff03 	bl	8004094 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	4b2d      	ldr	r3, [pc, #180]	@ (8000344 <MX_GPIO_Init+0xcc>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	4b2c      	ldr	r3, [pc, #176]	@ (8000344 <MX_GPIO_Init+0xcc>)
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0309      	lsls	r1, r1, #12
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	4b29      	ldr	r3, [pc, #164]	@ (8000344 <MX_GPIO_Init+0xcc>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	031b      	lsls	r3, r3, #12
 80002a4:	4013      	ands	r3, r2
 80002a6:	60bb      	str	r3, [r7, #8]
 80002a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002aa:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b25      	ldr	r3, [pc, #148]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002b0:	2180      	movs	r1, #128	@ 0x80
 80002b2:	03c9      	lsls	r1, r1, #15
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	2380      	movs	r3, #128	@ 0x80
 80002be:	03db      	lsls	r3, r3, #15
 80002c0:	4013      	ands	r3, r2
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002c8:	695a      	ldr	r2, [r3, #20]
 80002ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002cc:	2180      	movs	r1, #128	@ 0x80
 80002ce:	0289      	lsls	r1, r1, #10
 80002d0:	430a      	orrs	r2, r1
 80002d2:	615a      	str	r2, [r3, #20]
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	029b      	lsls	r3, r3, #10
 80002dc:	4013      	ands	r3, r2
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e2:	2390      	movs	r3, #144	@ 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2200      	movs	r2, #0
 80002e8:	2120      	movs	r1, #32
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 f86e 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2280      	movs	r2, #128	@ 0x80
 80002f4:	0192      	lsls	r2, r2, #6
 80002f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2284      	movs	r2, #132	@ 0x84
 80002fc:	0392      	lsls	r2, r2, #14
 80002fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000300:	193b      	adds	r3, r7, r4
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000306:	193b      	adds	r3, r7, r4
 8000308:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <MX_GPIO_Init+0xd0>)
 800030a:	0019      	movs	r1, r3
 800030c:	0010      	movs	r0, r2
 800030e:	f000 fee5 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000312:	0021      	movs	r1, r4
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2220      	movs	r2, #32
 8000318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032c:	187a      	adds	r2, r7, r1
 800032e:	2390      	movs	r3, #144	@ 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fed1 	bl	80010dc <HAL_GPIO_Init>

}
 800033a:	46c0      	nop			@ (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b009      	add	sp, #36	@ 0x24
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800

0800034c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	000a      	movs	r2, r1
 8000356:	1cbb      	adds	r3, r7, #2
 8000358:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART3)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a07      	ldr	r2, [pc, #28]	@ (800037c <HAL_UARTEx_RxEventCallback+0x30>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&esp32, Size);
 8000364:	1cbb      	adds	r3, r7, #2
 8000366:	881a      	ldrh	r2, [r3, #0]
 8000368:	4b05      	ldr	r3, [pc, #20]	@ (8000380 <HAL_UARTEx_RxEventCallback+0x34>)
 800036a:	0011      	movs	r1, r2
 800036c:	0018      	movs	r0, r3
 800036e:	f003 fd56 	bl	8003e1e <ATC_IdleLineCallback>
	}
}
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	40004800 	.word	0x40004800
 8000380:	20000100 	.word	0x20000100

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038a:	f000 fb03 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038e:	f000 f863 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000392:	f7ff ff71 	bl	8000278 <MX_GPIO_Init>
  MX_DMA_Init();
 8000396:	f7ff ff49 	bl	800022c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800039a:	f000 f969 	bl	8000670 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800039e:	f000 f997 	bl	80006d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // ATC yapılandırmasını başlat
  ATC_Init(&esp32, &huart3, RX_BUFFER_SIZE, "ESP32");
 80003a2:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <main+0xa4>)
 80003a4:	2280      	movs	r2, #128	@ 0x80
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	4920      	ldr	r1, [pc, #128]	@ (800042c <main+0xa8>)
 80003aa:	4821      	ldr	r0, [pc, #132]	@ (8000430 <main+0xac>)
 80003ac:	f003 fb86 	bl	8003abc <ATC_Init>
  // Wi-Fi Bağlantısı Kurma
  ATC_SendReceive(&esp32, "AT+CWSTATE?\r\n", 100, NULL, 100, 3, "\r\n0\r\n", "\r\n1\r\n", "\r\n2\r\n");
 80003b0:	4920      	ldr	r1, [pc, #128]	@ (8000434 <main+0xb0>)
 80003b2:	481f      	ldr	r0, [pc, #124]	@ (8000430 <main+0xac>)
 80003b4:	4b20      	ldr	r3, [pc, #128]	@ (8000438 <main+0xb4>)
 80003b6:	9304      	str	r3, [sp, #16]
 80003b8:	4b20      	ldr	r3, [pc, #128]	@ (800043c <main+0xb8>)
 80003ba:	9303      	str	r3, [sp, #12]
 80003bc:	4b20      	ldr	r3, [pc, #128]	@ (8000440 <main+0xbc>)
 80003be:	9302      	str	r3, [sp, #8]
 80003c0:	2303      	movs	r3, #3
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	2364      	movs	r3, #100	@ 0x64
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2300      	movs	r3, #0
 80003ca:	2264      	movs	r2, #100	@ 0x64
 80003cc:	f003 fc2d 	bl	8003c2a <ATC_SendReceive>
  ATC_SendReceive(&esp32, "AT+CWMODE=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80003d0:	491c      	ldr	r1, [pc, #112]	@ (8000444 <main+0xc0>)
 80003d2:	4817      	ldr	r0, [pc, #92]	@ (8000430 <main+0xac>)
 80003d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000448 <main+0xc4>)
 80003d6:	9303      	str	r3, [sp, #12]
 80003d8:	4b1c      	ldr	r3, [pc, #112]	@ (800044c <main+0xc8>)
 80003da:	9302      	str	r3, [sp, #8]
 80003dc:	2302      	movs	r3, #2
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	2364      	movs	r3, #100	@ 0x64
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2300      	movs	r3, #0
 80003e6:	2264      	movs	r2, #100	@ 0x64
 80003e8:	f003 fc1f 	bl	8003c2a <ATC_SendReceive>
  ATC_SendReceive(&esp32, "AT+CWJAP=\"TTNET_ZyXEL_WTPT\",\"eC0C3E841576e\"\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80003ec:	4918      	ldr	r1, [pc, #96]	@ (8000450 <main+0xcc>)
 80003ee:	4810      	ldr	r0, [pc, #64]	@ (8000430 <main+0xac>)
 80003f0:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <main+0xc4>)
 80003f2:	9303      	str	r3, [sp, #12]
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <main+0xc8>)
 80003f6:	9302      	str	r3, [sp, #8]
 80003f8:	2302      	movs	r3, #2
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	2364      	movs	r3, #100	@ 0x64
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2300      	movs	r3, #0
 8000402:	2264      	movs	r2, #100	@ 0x64
 8000404:	f003 fc11 	bl	8003c2a <ATC_SendReceive>
  ATC_SendReceive(&esp32, "AT+CWJAP?\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8000408:	4912      	ldr	r1, [pc, #72]	@ (8000454 <main+0xd0>)
 800040a:	4809      	ldr	r0, [pc, #36]	@ (8000430 <main+0xac>)
 800040c:	4b0e      	ldr	r3, [pc, #56]	@ (8000448 <main+0xc4>)
 800040e:	9303      	str	r3, [sp, #12]
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <main+0xc8>)
 8000412:	9302      	str	r3, [sp, #8]
 8000414:	2302      	movs	r3, #2
 8000416:	9301      	str	r3, [sp, #4]
 8000418:	2364      	movs	r3, #100	@ 0x64
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2300      	movs	r3, #0
 800041e:	2264      	movs	r2, #100	@ 0x64
 8000420:	f003 fc03 	bl	8003c2a <ATC_SendReceive>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	e7fd      	b.n	8000424 <main+0xa0>
 8000428:	08004244 	.word	0x08004244
 800042c:	20000078 	.word	0x20000078
 8000430:	20000100 	.word	0x20000100
 8000434:	0800424c 	.word	0x0800424c
 8000438:	0800425c 	.word	0x0800425c
 800043c:	08004264 	.word	0x08004264
 8000440:	0800426c 	.word	0x0800426c
 8000444:	08004274 	.word	0x08004274
 8000448:	08004284 	.word	0x08004284
 800044c:	08004290 	.word	0x08004290
 8000450:	08004298 	.word	0x08004298
 8000454:	080042c8 	.word	0x080042c8

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b099      	sub	sp, #100	@ 0x64
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	242c      	movs	r4, #44	@ 0x2c
 8000460:	193b      	adds	r3, r7, r4
 8000462:	0018      	movs	r0, r3
 8000464:	2334      	movs	r3, #52	@ 0x34
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f003 fe13 	bl	8004094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046e:	231c      	movs	r3, #28
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	0018      	movs	r0, r3
 8000474:	2310      	movs	r3, #16
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 fe0b 	bl	8004094 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047e:	003b      	movs	r3, r7
 8000480:	0018      	movs	r0, r3
 8000482:	231c      	movs	r3, #28
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f003 fe04 	bl	8004094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048c:	0021      	movs	r1, r4
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2202      	movs	r2, #2
 8000492:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2201      	movs	r2, #1
 8000498:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2210      	movs	r2, #16
 800049e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2202      	movs	r2, #2
 80004a4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2280      	movs	r2, #128	@ 0x80
 80004aa:	0212      	lsls	r2, r2, #8
 80004ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	22a0      	movs	r2, #160	@ 0xa0
 80004b2:	0392      	lsls	r2, r2, #14
 80004b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2201      	movs	r2, #1
 80004ba:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 ffa2 	bl	8001408 <HAL_RCC_OscConfig>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80004c8:	f000 f82e 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	211c      	movs	r1, #28
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2202      	movs	r2, #2
 80004d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2101      	movs	r1, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fb12 	bl	8001b14 <HAL_RCC_ClockConfig>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004f4:	f000 f818 	bl	8000528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 80004f8:	003b      	movs	r3, r7
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <SystemClock_Config+0xcc>)
 80004fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004fe:	003b      	movs	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000504:	003b      	movs	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050a:	003b      	movs	r3, r7
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fc6d 	bl	8001dec <HAL_RCCEx_PeriphCLKConfig>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000516:	f000 f807 	bl	8000528 <Error_Handler>
  }
}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b019      	add	sp, #100	@ 0x64
 8000520:	bd90      	pop	{r4, r7, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	00040002 	.word	0x00040002

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	e7fd      	b.n	8000530 <Error_Handler+0x8>

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_MspInit+0x44>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_MspInit+0x44>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_MspInit+0x44>)
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_MspInit+0x44>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	61da      	str	r2, [r3, #28]
 8000560:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <HAL_MspInit+0x44>)
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	46c0      	nop			@ (mov r8, r8)
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 fa3e 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80005b4:	4b03      	ldr	r3, [pc, #12]	@ (80005c4 <DMA1_Ch1_IRQHandler+0x14>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fc7d 	bl	8000eb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	200001c8 	.word	0x200001c8

080005c8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80005cc:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fc71 	bl	8000eb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	2000020c 	.word	0x2000020c

080005e0 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);(&huart3);
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <USART3_8_IRQHandler+0x14>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fef8 	bl	80023dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	20000078 	.word	0x20000078

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	@ (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	18d3      	adds	r3, r2, r3
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f003 fd78 	bl	800411c <__errno>
 800062c:	0003      	movs	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	2301      	movs	r3, #1
 8000634:	425b      	negs	r3, r3
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	18d2      	adds	r2, r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	@ (800065c <_sbrk+0x64>)
 8000648:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b006      	add	sp, #24
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20008000 	.word	0x20008000
 8000658:	00000400 	.word	0x00000400
 800065c:	2000013c 	.word	0x2000013c
 8000660:	200003a0 	.word	0x200003a0

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <MX_USART2_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 800067c:	22e1      	movs	r2, #225	@ 0xe1
 800067e:	0252      	lsls	r2, r2, #9
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fc99 	bl	8001fec <HAL_UART_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f7ff ff33 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000140 	.word	0x20000140
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	@ (800072c <MX_USART3_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006dc:	22e1      	movs	r2, #225	@ 0xe1
 80006de:	0252      	lsls	r2, r2, #9
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fc69 	bl	8001fec <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f7ff ff03 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000078 	.word	0x20000078
 800072c:	40004800 	.word	0x40004800

08000730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08d      	sub	sp, #52	@ 0x34
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	241c      	movs	r4, #28
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	2314      	movs	r3, #20
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f003 fca6 	bl	8004094 <memset>
  if(uartHandle->Instance==USART2)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a73      	ldr	r2, [pc, #460]	@ (800091c <HAL_UART_MspInit+0x1ec>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d133      	bne.n	80007ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000752:	4b73      	ldr	r3, [pc, #460]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 8000754:	69da      	ldr	r2, [r3, #28]
 8000756:	4b72      	ldr	r3, [pc, #456]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	0289      	lsls	r1, r1, #10
 800075c:	430a      	orrs	r2, r1
 800075e:	61da      	str	r2, [r3, #28]
 8000760:	4b6f      	ldr	r3, [pc, #444]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 8000762:	69da      	ldr	r2, [r3, #28]
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	029b      	lsls	r3, r3, #10
 8000768:	4013      	ands	r3, r2
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b6c      	ldr	r3, [pc, #432]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	4b6b      	ldr	r3, [pc, #428]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	0289      	lsls	r1, r1, #10
 8000778:	430a      	orrs	r2, r1
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	4b68      	ldr	r3, [pc, #416]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	2380      	movs	r3, #128	@ 0x80
 8000782:	029b      	lsls	r3, r3, #10
 8000784:	4013      	ands	r3, r2
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800078a:	0021      	movs	r1, r4
 800078c:	187b      	adds	r3, r7, r1
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2202      	movs	r2, #2
 8000796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2201      	movs	r2, #1
 80007a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	2390      	movs	r3, #144	@ 0x90
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fc92 	bl	80010dc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80007b8:	e0ab      	b.n	8000912 <HAL_UART_MspInit+0x1e2>
  else if(uartHandle->Instance==USART3)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a59      	ldr	r2, [pc, #356]	@ (8000924 <HAL_UART_MspInit+0x1f4>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d000      	beq.n	80007c6 <HAL_UART_MspInit+0x96>
 80007c4:	e0a5      	b.n	8000912 <HAL_UART_MspInit+0x1e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007c6:	4b56      	ldr	r3, [pc, #344]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 80007c8:	69da      	ldr	r2, [r3, #28]
 80007ca:	4b55      	ldr	r3, [pc, #340]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	02c9      	lsls	r1, r1, #11
 80007d0:	430a      	orrs	r2, r1
 80007d2:	61da      	str	r2, [r3, #28]
 80007d4:	4b52      	ldr	r3, [pc, #328]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 80007d6:	69da      	ldr	r2, [r3, #28]
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	02db      	lsls	r3, r3, #11
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 80007e4:	695a      	ldr	r2, [r3, #20]
 80007e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	0309      	lsls	r1, r1, #12
 80007ec:	430a      	orrs	r2, r1
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	4b4b      	ldr	r3, [pc, #300]	@ (8000920 <HAL_UART_MspInit+0x1f0>)
 80007f2:	695a      	ldr	r2, [r3, #20]
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	031b      	lsls	r3, r3, #12
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007fe:	211c      	movs	r1, #28
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2230      	movs	r2, #48	@ 0x30
 8000804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2202      	movs	r2, #2
 800080a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2203      	movs	r2, #3
 8000816:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2201      	movs	r2, #1
 800081c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	187b      	adds	r3, r7, r1
 8000820:	4a41      	ldr	r2, [pc, #260]	@ (8000928 <HAL_UART_MspInit+0x1f8>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f000 fc59 	bl	80010dc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 800082a:	4b40      	ldr	r3, [pc, #256]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 800082c:	4a40      	ldr	r2, [pc, #256]	@ (8000930 <HAL_UART_MspInit+0x200>)
 800082e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000830:	4b3e      	ldr	r3, [pc, #248]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000836:	4b3d      	ldr	r3, [pc, #244]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800083c:	4b3b      	ldr	r3, [pc, #236]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 800083e:	2280      	movs	r2, #128	@ 0x80
 8000840:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000842:	4b3a      	ldr	r3, [pc, #232]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000848:	4b38      	ldr	r3, [pc, #224]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800084e:	4b37      	ldr	r3, [pc, #220]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000854:	4b35      	ldr	r3, [pc, #212]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800085a:	4b34      	ldr	r3, [pc, #208]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 800085c:	0018      	movs	r0, r3
 800085e:	f000 f9ff 	bl	8000c60 <HAL_DMA_Init>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <HAL_UART_MspInit+0x13a>
      Error_Handler();
 8000866:	f7ff fe5f 	bl	8000528 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800086a:	4a32      	ldr	r2, [pc, #200]	@ (8000934 <HAL_UART_MspInit+0x204>)
 800086c:	23a8      	movs	r3, #168	@ 0xa8
 800086e:	58d3      	ldr	r3, [r2, r3]
 8000870:	4930      	ldr	r1, [pc, #192]	@ (8000934 <HAL_UART_MspInit+0x204>)
 8000872:	220f      	movs	r2, #15
 8000874:	4393      	bics	r3, r2
 8000876:	22a8      	movs	r2, #168	@ 0xa8
 8000878:	508b      	str	r3, [r1, r2]
 800087a:	4a2e      	ldr	r2, [pc, #184]	@ (8000934 <HAL_UART_MspInit+0x204>)
 800087c:	23a8      	movs	r3, #168	@ 0xa8
 800087e:	58d3      	ldr	r3, [r2, r3]
 8000880:	492c      	ldr	r1, [pc, #176]	@ (8000934 <HAL_UART_MspInit+0x204>)
 8000882:	220a      	movs	r2, #10
 8000884:	4313      	orrs	r3, r2
 8000886:	22a8      	movs	r2, #168	@ 0xa8
 8000888:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a27      	ldr	r2, [pc, #156]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 800088e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000890:	4b26      	ldr	r3, [pc, #152]	@ (800092c <HAL_UART_MspInit+0x1fc>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <HAL_UART_MspInit+0x208>)
 8000898:	4a28      	ldr	r2, [pc, #160]	@ (800093c <HAL_UART_MspInit+0x20c>)
 800089a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800089c:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <HAL_UART_MspInit+0x208>)
 800089e:	2210      	movs	r2, #16
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b4:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f9c9 	bl	8000c60 <HAL_DMA_Init>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80008d2:	f7ff fe29 	bl	8000528 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 80008d6:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <HAL_UART_MspInit+0x204>)
 80008d8:	23a8      	movs	r3, #168	@ 0xa8
 80008da:	58d3      	ldr	r3, [r2, r3]
 80008dc:	4915      	ldr	r1, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x204>)
 80008de:	22f0      	movs	r2, #240	@ 0xf0
 80008e0:	4393      	bics	r3, r2
 80008e2:	22a8      	movs	r2, #168	@ 0xa8
 80008e4:	508b      	str	r3, [r1, r2]
 80008e6:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <HAL_UART_MspInit+0x204>)
 80008e8:	23a8      	movs	r3, #168	@ 0xa8
 80008ea:	58d3      	ldr	r3, [r2, r3]
 80008ec:	4911      	ldr	r1, [pc, #68]	@ (8000934 <HAL_UART_MspInit+0x204>)
 80008ee:	22a0      	movs	r2, #160	@ 0xa0
 80008f0:	4313      	orrs	r3, r2
 80008f2:	22a8      	movs	r2, #168	@ 0xa8
 80008f4:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_UART_MspInit+0x208>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	201d      	movs	r0, #29
 8000908:	f000 f978 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800090c:	201d      	movs	r0, #29
 800090e:	f000 f98a 	bl	8000c26 <HAL_NVIC_EnableIRQ>
}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b00d      	add	sp, #52	@ 0x34
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	40004400 	.word	0x40004400
 8000920:	40021000 	.word	0x40021000
 8000924:	40004800 	.word	0x40004800
 8000928:	48000800 	.word	0x48000800
 800092c:	200001c8 	.word	0x200001c8
 8000930:	40020008 	.word	0x40020008
 8000934:	40020000 	.word	0x40020000
 8000938:	2000020c 	.word	0x2000020c
 800093c:	4002001c 	.word	0x4002001c

08000940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000940:	480d      	ldr	r0, [pc, #52]	@ (8000978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000942:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000944:	f7ff fe8e 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	@ (8000980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	@ (800098c <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800096e:	f003 fbdb 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fd07 	bl	8000384 <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   r0, =_estack
 8000978:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000984:	08004314 	.word	0x08004314
  ldr r2, =_sbss
 8000988:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800098c:	2000039c 	.word	0x2000039c

08000990 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_COMP_IRQHandler>
	...

08000994 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <HAL_Init+0x24>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_Init+0x24>)
 800099e:	2110      	movs	r1, #16
 80009a0:	430a      	orrs	r2, r1
 80009a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f809 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009aa:	f7ff fdc3 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <HAL_InitTick+0x5c>)
 80009c6:	681c      	ldr	r4, [r3, #0]
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <HAL_InitTick+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0019      	movs	r1, r3
 80009ce:	23fa      	movs	r3, #250	@ 0xfa
 80009d0:	0098      	lsls	r0, r3, #2
 80009d2:	f7ff fb9f 	bl	8000114 <__udivsi3>
 80009d6:	0003      	movs	r3, r0
 80009d8:	0019      	movs	r1, r3
 80009da:	0020      	movs	r0, r4
 80009dc:	f7ff fb9a 	bl	8000114 <__udivsi3>
 80009e0:	0003      	movs	r3, r0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f92f 	bl	8000c46 <HAL_SYSTICK_Config>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e00f      	b.n	8000a10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d80b      	bhi.n	8000a0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	2301      	movs	r3, #1
 80009fa:	425b      	negs	r3, r3
 80009fc:	2200      	movs	r2, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 f8fc 	bl	8000bfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_InitTick+0x64>)
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b003      	add	sp, #12
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	18d2      	adds	r2, r2, r3
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000250 	.word	0x20000250

08000a48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	@ (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	20000250 	.word	0x20000250

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff fff0 	bl	8000a48 <HAL_GetTick>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	f7ff ffe0 	bl	8000a48 <HAL_GetTick>
 8000a88:	0002      	movs	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab6:	d809      	bhi.n	8000acc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	231f      	movs	r3, #31
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_EnableIRQ+0x30>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	000a      	movs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
  }
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aec:	d828      	bhi.n	8000b40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aee:	4a2f      	ldr	r2, [pc, #188]	@ (8000bac <__NVIC_SetPriority+0xd4>)
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	33c0      	adds	r3, #192	@ 0xc0
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	589b      	ldr	r3, [r3, r2]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	@ 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	@ 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	481f      	ldr	r0, [pc, #124]	@ (8000bac <__NVIC_SetPriority+0xd4>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	430a      	orrs	r2, r1
 8000b38:	33c0      	adds	r3, #192	@ 0xc0
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b3e:	e031      	b.n	8000ba4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b40:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0019      	movs	r1, r3
 8000b48:	230f      	movs	r3, #15
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	3b08      	subs	r3, #8
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3306      	adds	r3, #6
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	@ 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	@ 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001c      	movs	r4, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	4023      	ands	r3, r4
 8000b94:	3b08      	subs	r3, #8
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	3306      	adds	r3, #6
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	18c3      	adds	r3, r0, r3
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b003      	add	sp, #12
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	2380      	movs	r3, #128	@ 0x80
 8000bc2:	045b      	lsls	r3, r3, #17
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d301      	bcc.n	8000bcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e010      	b.n	8000bee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <SysTick_Config+0x44>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	2103      	movs	r1, #3
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff ff7c 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x44>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x44>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	210f      	movs	r1, #15
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	1c02      	adds	r2, r0, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ff33 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ffaf 	bl	8000bb4 <SysTick_Config>
 8000c56:	0003      	movs	r3, r0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e036      	b.n	8000ce4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2221      	movs	r2, #33	@ 0x21
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4a18      	ldr	r2, [pc, #96]	@ (8000cec <HAL_DMA_Init+0x8c>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 f9ce 	bl	8001068 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2221      	movs	r2, #33	@ 0x21
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	ffffc00f 	.word	0xffffc00f

08000cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfe:	2317      	movs	r3, #23
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2220      	movs	r2, #32
 8000d0a:	5c9b      	ldrb	r3, [r3, r2]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_DMA_Start_IT+0x24>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e04f      	b.n	8000db4 <HAL_DMA_Start_IT+0xc4>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2220      	movs	r2, #32
 8000d18:	2101      	movs	r1, #1
 8000d1a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2221      	movs	r2, #33	@ 0x21
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d13a      	bne.n	8000d9e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2221      	movs	r2, #33	@ 0x21
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2200      	movs	r2, #0
 8000d34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	438a      	bics	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 f95e 	bl	800100e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d008      	beq.n	8000d6c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	210e      	movs	r1, #14
 8000d66:	430a      	orrs	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e00f      	b.n	8000d8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	210a      	movs	r1, #10
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2104      	movs	r1, #4
 8000d88:	438a      	bics	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2101      	movs	r1, #1
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e007      	b.n	8000dae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2220      	movs	r2, #32
 8000da2:	2100      	movs	r1, #0
 8000da4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000da6:	2317      	movs	r3, #23
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000dae:	2317      	movs	r3, #23
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	781b      	ldrb	r3, [r3, #0]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b006      	add	sp, #24
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2221      	movs	r2, #33	@ 0x21
 8000dc8:	5c9b      	ldrb	r3, [r3, r2]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d008      	beq.n	8000de2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	2100      	movs	r1, #0
 8000ddc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e020      	b.n	8000e24 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	210e      	movs	r1, #14
 8000dee:	438a      	bics	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	438a      	bics	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	000a      	movs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2221      	movs	r2, #33	@ 0x21
 8000e16:	2101      	movs	r1, #1
 8000e18:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	2100      	movs	r1, #0
 8000e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e34:	210f      	movs	r1, #15
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2221      	movs	r2, #33	@ 0x21
 8000e40:	5c9b      	ldrb	r3, [r3, r2]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d006      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e028      	b.n	8000ea8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	210e      	movs	r1, #14
 8000e62:	438a      	bics	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	438a      	bics	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2221      	movs	r2, #33	@ 0x21
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2220      	movs	r2, #32
 8000e92:	2100      	movs	r1, #0
 8000e94:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	0010      	movs	r0, r2
 8000ea6:	4798      	blx	r3
    }
  }
  return status;
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	781b      	ldrb	r3, [r3, #0]
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	d024      	beq.n	8000f28 <HAL_DMA_IRQHandler+0x72>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d020      	beq.n	8000f28 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2220      	movs	r2, #32
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d107      	bne.n	8000f02 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2104      	movs	r1, #4
 8000efe:	438a      	bics	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d100      	bne.n	8000f1c <HAL_DMA_IRQHandler+0x66>
 8000f1a:	e06a      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	0010      	movs	r0, r2
 8000f24:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f26:	e064      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4013      	ands	r3, r2
 8000f36:	d02b      	beq.n	8000f90 <HAL_DMA_IRQHandler+0xda>
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d027      	beq.n	8000f90 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2220      	movs	r2, #32
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d10b      	bne.n	8000f64 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	210a      	movs	r1, #10
 8000f58:	438a      	bics	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2221      	movs	r2, #33	@ 0x21
 8000f60:	2101      	movs	r1, #1
 8000f62:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4091      	lsls	r1, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2220      	movs	r2, #32
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d036      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	0010      	movs	r0, r2
 8000f8c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f8e:	e030      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	2208      	movs	r2, #8
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d028      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d024      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	210e      	movs	r1, #14
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4091      	lsls	r1, r2
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2221      	movs	r2, #33	@ 0x21
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	0010      	movs	r0, r2
 8000fee:	4798      	blx	r3
    }
  }
}
 8000ff0:	e7ff      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x13c>
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001024:	2101      	movs	r1, #1
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b10      	cmp	r3, #16
 800103a:	d108      	bne.n	800104e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800104c:	e007      	b.n	800105e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]
}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	001a      	movs	r2, r3
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <DMA_CalcBaseAndBitshift+0x60>)
 8001078:	429a      	cmp	r2, r3
 800107a:	d810      	bhi.n	800109e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <DMA_CalcBaseAndBitshift+0x64>)
 8001082:	4694      	mov	ip, r2
 8001084:	4463      	add	r3, ip
 8001086:	2114      	movs	r1, #20
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff f843 	bl	8000114 <__udivsi3>
 800108e:	0003      	movs	r3, r0
 8001090:	009a      	lsls	r2, r3, #2
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <DMA_CalcBaseAndBitshift+0x68>)
 800109a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800109c:	e00f      	b.n	80010be <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0c      	ldr	r2, [pc, #48]	@ (80010d4 <DMA_CalcBaseAndBitshift+0x6c>)
 80010a4:	4694      	mov	ip, r2
 80010a6:	4463      	add	r3, ip
 80010a8:	2114      	movs	r1, #20
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff f832 	bl	8000114 <__udivsi3>
 80010b0:	0003      	movs	r3, r0
 80010b2:	009a      	lsls	r2, r3, #2
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <DMA_CalcBaseAndBitshift+0x70>)
 80010bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	40020407 	.word	0x40020407
 80010cc:	bffdfff8 	.word	0xbffdfff8
 80010d0:	40020000 	.word	0x40020000
 80010d4:	bffdfbf8 	.word	0xbffdfbf8
 80010d8:	40020400 	.word	0x40020400

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e155      	b.n	8001398 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4091      	lsls	r1, r2
 80010f6:	000a      	movs	r2, r1
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d100      	bne.n	8001104 <HAL_GPIO_Init+0x28>
 8001102:	e146      	b.n	8001392 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2203      	movs	r2, #3
 800110a:	4013      	ands	r3, r2
 800110c:	2b01      	cmp	r3, #1
 800110e:	d005      	beq.n	800111c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2203      	movs	r2, #3
 8001116:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001118:	2b02      	cmp	r3, #2
 800111a:	d130      	bne.n	800117e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	409a      	lsls	r2, r3
 800112a:	0013      	movs	r3, r2
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	409a      	lsls	r2, r3
 800113e:	0013      	movs	r3, r2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001152:	2201      	movs	r2, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	2201      	movs	r2, #1
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	4013      	ands	r3, r2
 8001186:	2b03      	cmp	r3, #3
 8001188:	d017      	beq.n	80011ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d123      	bne.n	800120e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	58d3      	ldr	r3, [r2, r3]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2207      	movs	r2, #7
 80011d8:	4013      	ands	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2107      	movs	r1, #7
 80011f2:	400b      	ands	r3, r1
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	6939      	ldr	r1, [r7, #16]
 800120c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2203      	movs	r2, #3
 800122c:	401a      	ands	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	23c0      	movs	r3, #192	@ 0xc0
 8001248:	029b      	lsls	r3, r3, #10
 800124a:	4013      	ands	r3, r2
 800124c:	d100      	bne.n	8001250 <HAL_GPIO_Init+0x174>
 800124e:	e0a0      	b.n	8001392 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	4b57      	ldr	r3, [pc, #348]	@ (80013b0 <HAL_GPIO_Init+0x2d4>)
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	4b56      	ldr	r3, [pc, #344]	@ (80013b0 <HAL_GPIO_Init+0x2d4>)
 8001256:	2101      	movs	r1, #1
 8001258:	430a      	orrs	r2, r1
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	4b54      	ldr	r3, [pc, #336]	@ (80013b0 <HAL_GPIO_Init+0x2d4>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	2201      	movs	r2, #1
 8001262:	4013      	ands	r3, r2
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001268:	4a52      	ldr	r2, [pc, #328]	@ (80013b4 <HAL_GPIO_Init+0x2d8>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	589b      	ldr	r3, [r3, r2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	2390      	movs	r3, #144	@ 0x90
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	429a      	cmp	r2, r3
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x1ee>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a47      	ldr	r2, [pc, #284]	@ (80013b8 <HAL_GPIO_Init+0x2dc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x1ea>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a46      	ldr	r2, [pc, #280]	@ (80013bc <HAL_GPIO_Init+0x2e0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x1e6>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a45      	ldr	r2, [pc, #276]	@ (80013c0 <HAL_GPIO_Init+0x2e4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x1e2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a44      	ldr	r2, [pc, #272]	@ (80013c4 <HAL_GPIO_Init+0x2e8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x1de>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x1f0>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x1f0>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x1f0>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x1f0>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x1f0>
 80012ca:	2300      	movs	r3, #0
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	2103      	movs	r1, #3
 80012d0:	400a      	ands	r2, r1
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	@ (80013b4 <HAL_GPIO_Init+0x2d8>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	035b      	lsls	r3, r3, #13
 8001302:	4013      	ands	r3, r2
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800130e:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001314:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	039b      	lsls	r3, r3, #14
 800132c:	4013      	ands	r3, r2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800133e:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43da      	mvns	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	4013      	ands	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_GPIO_Init+0x2ec>)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	40da      	lsrs	r2, r3
 80013a0:	1e13      	subs	r3, r2, #0
 80013a2:	d000      	beq.n	80013a6 <HAL_GPIO_Init+0x2ca>
 80013a4:	e6a2      	b.n	80010ec <HAL_GPIO_Init+0x10>
  } 
}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b006      	add	sp, #24
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	48000400 	.word	0x48000400
 80013bc:	48000800 	.word	0x48000800
 80013c0:	48000c00 	.word	0x48000c00
 80013c4:	48001000 	.word	0x48001000
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	0008      	movs	r0, r1
 80013d6:	0011      	movs	r1, r2
 80013d8:	1cbb      	adds	r3, r7, #2
 80013da:	1c02      	adds	r2, r0, #0
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	1c7b      	adds	r3, r7, #1
 80013e0:	1c0a      	adds	r2, r1, #0
 80013e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e4:	1c7b      	adds	r3, r7, #1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ec:	1cbb      	adds	r3, r7, #2
 80013ee:	881a      	ldrh	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f6:	1cbb      	adds	r3, r7, #2
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	f000 fb76 	bl	8001b08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	d100      	bne.n	8001428 <HAL_RCC_OscConfig+0x20>
 8001426:	e08e      	b.n	8001546 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001428:	4bc5      	ldr	r3, [pc, #788]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	220c      	movs	r2, #12
 800142e:	4013      	ands	r3, r2
 8001430:	2b04      	cmp	r3, #4
 8001432:	d00e      	beq.n	8001452 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001434:	4bc2      	ldr	r3, [pc, #776]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	220c      	movs	r2, #12
 800143a:	4013      	ands	r3, r2
 800143c:	2b08      	cmp	r3, #8
 800143e:	d117      	bne.n	8001470 <HAL_RCC_OscConfig+0x68>
 8001440:	4bbf      	ldr	r3, [pc, #764]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	23c0      	movs	r3, #192	@ 0xc0
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	401a      	ands	r2, r3
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	025b      	lsls	r3, r3, #9
 800144e:	429a      	cmp	r2, r3
 8001450:	d10e      	bne.n	8001470 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001452:	4bbb      	ldr	r3, [pc, #748]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	4013      	ands	r3, r2
 800145c:	d100      	bne.n	8001460 <HAL_RCC_OscConfig+0x58>
 800145e:	e071      	b.n	8001544 <HAL_RCC_OscConfig+0x13c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d000      	beq.n	800146a <HAL_RCC_OscConfig+0x62>
 8001468:	e06c      	b.n	8001544 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	f000 fb4c 	bl	8001b08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x80>
 8001478:	4bb1      	ldr	r3, [pc, #708]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4bb0      	ldr	r3, [pc, #704]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800147e:	2180      	movs	r1, #128	@ 0x80
 8001480:	0249      	lsls	r1, r1, #9
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e02f      	b.n	80014e8 <HAL_RCC_OscConfig+0xe0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0xa2>
 8001490:	4bab      	ldr	r3, [pc, #684]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4baa      	ldr	r3, [pc, #680]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001496:	49ab      	ldr	r1, [pc, #684]	@ (8001744 <HAL_RCC_OscConfig+0x33c>)
 8001498:	400a      	ands	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	4ba8      	ldr	r3, [pc, #672]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014a2:	49a9      	ldr	r1, [pc, #676]	@ (8001748 <HAL_RCC_OscConfig+0x340>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e01e      	b.n	80014e8 <HAL_RCC_OscConfig+0xe0>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d10e      	bne.n	80014d0 <HAL_RCC_OscConfig+0xc8>
 80014b2:	4ba3      	ldr	r3, [pc, #652]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	02c9      	lsls	r1, r1, #11
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	4b9f      	ldr	r3, [pc, #636]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b9e      	ldr	r3, [pc, #632]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014c6:	2180      	movs	r1, #128	@ 0x80
 80014c8:	0249      	lsls	r1, r1, #9
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xe0>
 80014d0:	4b9b      	ldr	r3, [pc, #620]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014d6:	499b      	ldr	r1, [pc, #620]	@ (8001744 <HAL_RCC_OscConfig+0x33c>)
 80014d8:	400a      	ands	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	4b98      	ldr	r3, [pc, #608]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b97      	ldr	r3, [pc, #604]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014e2:	4999      	ldr	r1, [pc, #612]	@ (8001748 <HAL_RCC_OscConfig+0x340>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d014      	beq.n	800151a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff faaa 	bl	8000a48 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fa:	f7ff faa5 	bl	8000a48 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b64      	cmp	r3, #100	@ 0x64
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e2fd      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150c:	4b8c      	ldr	r3, [pc, #560]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0xf2>
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fa95 	bl	8000a48 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fa90 	bl	8000a48 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e2e8      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b82      	ldr	r3, [pc, #520]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x11c>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x14a>
 8001550:	e06c      	b.n	800162c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001552:	4b7b      	ldr	r3, [pc, #492]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	220c      	movs	r2, #12
 8001558:	4013      	ands	r3, r2
 800155a:	d00e      	beq.n	800157a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800155c:	4b78      	ldr	r3, [pc, #480]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	220c      	movs	r2, #12
 8001562:	4013      	ands	r3, r2
 8001564:	2b08      	cmp	r3, #8
 8001566:	d11f      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1a0>
 8001568:	4b75      	ldr	r3, [pc, #468]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	23c0      	movs	r3, #192	@ 0xc0
 800156e:	025b      	lsls	r3, r3, #9
 8001570:	401a      	ands	r2, r3
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	429a      	cmp	r2, r3
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b71      	ldr	r3, [pc, #452]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x188>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e2bb      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b6b      	ldr	r3, [pc, #428]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	22f8      	movs	r2, #248	@ 0xf8
 8001596:	4393      	bics	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00da      	lsls	r2, r3, #3
 80015a0:	4b67      	ldr	r3, [pc, #412]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e041      	b.n	800162c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d024      	beq.n	80015fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b62      	ldr	r3, [pc, #392]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fa44 	bl	8000a48 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fa3f 	bl	8000a48 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e297      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	4b59      	ldr	r3, [pc, #356]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d0f1      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b57      	ldr	r3, [pc, #348]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	22f8      	movs	r2, #248	@ 0xf8
 80015e8:	4393      	bics	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	00da      	lsls	r2, r3, #3
 80015f2:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e018      	b.n	800162c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b50      	ldr	r3, [pc, #320]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001600:	2101      	movs	r1, #1
 8001602:	438a      	bics	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fa1f 	bl	8000a48 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fa1a 	bl	8000a48 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e272      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2202      	movs	r2, #2
 8001628:	4013      	ands	r3, r2
 800162a:	d1f1      	bne.n	8001610 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2208      	movs	r2, #8
 8001632:	4013      	ands	r3, r2
 8001634:	d036      	beq.n	80016a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d019      	beq.n	8001672 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163e:	4b40      	ldr	r3, [pc, #256]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001642:	4b3f      	ldr	r3, [pc, #252]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001644:	2101      	movs	r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f9fd 	bl	8000a48 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff f9f8 	bl	8000a48 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e250      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	4b36      	ldr	r3, [pc, #216]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d0f1      	beq.n	8001654 <HAL_RCC_OscConfig+0x24c>
 8001670:	e018      	b.n	80016a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001672:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001676:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001678:	2101      	movs	r1, #1
 800167a:	438a      	bics	r2, r1
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff f9e3 	bl	8000a48 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff f9de 	bl	8000a48 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e236      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d1f1      	bne.n	8001688 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2204      	movs	r2, #4
 80016aa:	4013      	ands	r3, r2
 80016ac:	d100      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2a8>
 80016ae:	e0b5      	b.n	800181c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b0:	201f      	movs	r0, #31
 80016b2:	183b      	adds	r3, r7, r0
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	055b      	lsls	r3, r3, #21
 80016c0:	4013      	ands	r3, r2
 80016c2:	d110      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80016ca:	2180      	movs	r1, #128	@ 0x80
 80016cc:	0549      	lsls	r1, r1, #21
 80016ce:	430a      	orrs	r2, r1
 80016d0:	61da      	str	r2, [r3, #28]
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	055b      	lsls	r3, r3, #21
 80016da:	4013      	ands	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_RCC_OscConfig+0x344>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4013      	ands	r3, r2
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_RCC_OscConfig+0x344>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_RCC_OscConfig+0x344>)
 80016f8:	2180      	movs	r1, #128	@ 0x80
 80016fa:	0049      	lsls	r1, r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001700:	f7ff f9a2 	bl	8000a48 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff f99d 	bl	8000a48 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	@ 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1f5      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_RCC_OscConfig+0x344>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4013      	ands	r3, r2
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10f      	bne.n	8001750 <HAL_RCC_OscConfig+0x348>
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	4b02      	ldr	r3, [pc, #8]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 8001736:	2101      	movs	r1, #1
 8001738:	430a      	orrs	r2, r1
 800173a:	621a      	str	r2, [r3, #32]
 800173c:	e036      	b.n	80017ac <HAL_RCC_OscConfig+0x3a4>
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	40021000 	.word	0x40021000
 8001744:	fffeffff 	.word	0xfffeffff
 8001748:	fffbffff 	.word	0xfffbffff
 800174c:	40007000 	.word	0x40007000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x36a>
 8001758:	4bca      	ldr	r3, [pc, #808]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800175a:	6a1a      	ldr	r2, [r3, #32]
 800175c:	4bc9      	ldr	r3, [pc, #804]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	621a      	str	r2, [r3, #32]
 8001764:	4bc7      	ldr	r3, [pc, #796]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4bc6      	ldr	r3, [pc, #792]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800176a:	2104      	movs	r1, #4
 800176c:	438a      	bics	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x3a4>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x38c>
 800177a:	4bc2      	ldr	r3, [pc, #776]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800177c:	6a1a      	ldr	r2, [r3, #32]
 800177e:	4bc1      	ldr	r3, [pc, #772]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001780:	2104      	movs	r1, #4
 8001782:	430a      	orrs	r2, r1
 8001784:	621a      	str	r2, [r3, #32]
 8001786:	4bbf      	ldr	r3, [pc, #764]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001788:	6a1a      	ldr	r2, [r3, #32]
 800178a:	4bbe      	ldr	r3, [pc, #760]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800178c:	2101      	movs	r1, #1
 800178e:	430a      	orrs	r2, r1
 8001790:	621a      	str	r2, [r3, #32]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x3a4>
 8001794:	4bbb      	ldr	r3, [pc, #748]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	4bba      	ldr	r3, [pc, #744]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800179a:	2101      	movs	r1, #1
 800179c:	438a      	bics	r2, r1
 800179e:	621a      	str	r2, [r3, #32]
 80017a0:	4bb8      	ldr	r3, [pc, #736]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	4bb7      	ldr	r3, [pc, #732]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80017a6:	2104      	movs	r1, #4
 80017a8:	438a      	bics	r2, r1
 80017aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d014      	beq.n	80017de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f948 	bl	8000a48 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e009      	b.n	80017d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f943 	bl	8000a48 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4aaf      	ldr	r2, [pc, #700]	@ (8001a88 <HAL_RCC_OscConfig+0x680>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e19a      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	4bac      	ldr	r3, [pc, #688]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x3b6>
 80017dc:	e013      	b.n	8001806 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff f933 	bl	8000a48 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	e009      	b.n	80017fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff f92e 	bl	8000a48 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4aa5      	ldr	r2, [pc, #660]	@ (8001a88 <HAL_RCC_OscConfig+0x680>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e185      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001806:	231f      	movs	r3, #31
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b9c      	ldr	r3, [pc, #624]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	4b9b      	ldr	r3, [pc, #620]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001816:	499d      	ldr	r1, [pc, #628]	@ (8001a8c <HAL_RCC_OscConfig+0x684>)
 8001818:	400a      	ands	r2, r1
 800181a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2210      	movs	r2, #16
 8001822:	4013      	ands	r3, r2
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d12a      	bne.n	8001884 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800182e:	4b95      	ldr	r3, [pc, #596]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001832:	4b94      	ldr	r3, [pc, #592]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001834:	2104      	movs	r1, #4
 8001836:	430a      	orrs	r2, r1
 8001838:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800183a:	4b92      	ldr	r3, [pc, #584]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800183c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800183e:	4b91      	ldr	r3, [pc, #580]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff f8ff 	bl	8000a48 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001850:	f7ff f8fa 	bl	8000a48 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e152      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001862:	4b88      	ldr	r3, [pc, #544]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d0f1      	beq.n	8001850 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800186c:	4b85      	ldr	r3, [pc, #532]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800186e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001870:	22f8      	movs	r2, #248	@ 0xf8
 8001872:	4393      	bics	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	00da      	lsls	r2, r3, #3
 800187c:	4b81      	ldr	r3, [pc, #516]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800187e:	430a      	orrs	r2, r1
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
 8001882:	e034      	b.n	80018ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	3305      	adds	r3, #5
 800188a:	d111      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800188c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800188e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001890:	4b7c      	ldr	r3, [pc, #496]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001892:	2104      	movs	r1, #4
 8001894:	438a      	bics	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001898:	4b7a      	ldr	r3, [pc, #488]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	22f8      	movs	r2, #248	@ 0xf8
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	00da      	lsls	r2, r3, #3
 80018a8:	4b76      	ldr	r3, [pc, #472]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	430a      	orrs	r2, r1
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ae:	e01e      	b.n	80018ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018b0:	4b74      	ldr	r3, [pc, #464]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80018b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018b4:	4b73      	ldr	r3, [pc, #460]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80018b6:	2104      	movs	r1, #4
 80018b8:	430a      	orrs	r2, r1
 80018ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018bc:	4b71      	ldr	r3, [pc, #452]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80018be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c0:	4b70      	ldr	r3, [pc, #448]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	438a      	bics	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff f8be 	bl	8000a48 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018d2:	f7ff f8b9 	bl	8000a48 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e111      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018e4:	4b67      	ldr	r3, [pc, #412]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80018e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d1f1      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2220      	movs	r2, #32
 80018f4:	4013      	ands	r3, r2
 80018f6:	d05c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018f8:	4b62      	ldr	r3, [pc, #392]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	220c      	movs	r2, #12
 80018fe:	4013      	ands	r3, r2
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d00e      	beq.n	8001922 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001904:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	220c      	movs	r2, #12
 800190a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800190c:	2b08      	cmp	r3, #8
 800190e:	d114      	bne.n	800193a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001910:	4b5c      	ldr	r3, [pc, #368]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	23c0      	movs	r3, #192	@ 0xc0
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	401a      	ands	r2, r3
 800191a:	23c0      	movs	r3, #192	@ 0xc0
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	429a      	cmp	r2, r3
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001922:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	029b      	lsls	r3, r3, #10
 800192a:	4013      	ands	r3, r2
 800192c:	d040      	beq.n	80019b0 <HAL_RCC_OscConfig+0x5a8>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d03c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0e6      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01b      	beq.n	800197a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001942:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001946:	4b4f      	ldr	r3, [pc, #316]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001948:	2180      	movs	r1, #128	@ 0x80
 800194a:	0249      	lsls	r1, r1, #9
 800194c:	430a      	orrs	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f87a 	bl	8000a48 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800195a:	f7ff f875 	bl	8000a48 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0cd      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800196c:	4b45      	ldr	r3, [pc, #276]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800196e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	4013      	ands	r3, r2
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x552>
 8001978:	e01b      	b.n	80019b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800197a:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 800197c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800197e:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001980:	4943      	ldr	r1, [pc, #268]	@ (8001a90 <HAL_RCC_OscConfig+0x688>)
 8001982:	400a      	ands	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff f85f 	bl	8000a48 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001990:	f7ff f85a 	bl	8000a48 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0b2      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019a2:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80019a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x588>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019b0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d100      	bne.n	80019bc <HAL_RCC_OscConfig+0x5b4>
 80019ba:	e0a4      	b.n	8001b06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019bc:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	220c      	movs	r2, #12
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x5c2>
 80019c8:	e078      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d14c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	492e      	ldr	r1, [pc, #184]	@ (8001a94 <HAL_RCC_OscConfig+0x68c>)
 80019da:	400a      	ands	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff f833 	bl	8000a48 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f82e 	bl	8000a48 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e086      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	049b      	lsls	r3, r3, #18
 8001a02:	4013      	ands	r3, r2
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a06:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a98 <HAL_RCC_OscConfig+0x690>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a3a:	2180      	movs	r1, #128	@ 0x80
 8001a3c:	0449      	lsls	r1, r1, #17
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff f801 	bl	8000a48 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7fe fffc 	bl	8000a48 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e054      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	049b      	lsls	r3, r3, #18
 8001a66:	4013      	ands	r3, r2
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x644>
 8001a6a:	e04c      	b.n	8001b06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	4908      	ldr	r1, [pc, #32]	@ (8001a94 <HAL_RCC_OscConfig+0x68c>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7fe ffe6 	bl	8000a48 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x6a6>
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	40021000 	.word	0x40021000
 8001a88:	00001388 	.word	0x00001388
 8001a8c:	efffffff 	.word	0xefffffff
 8001a90:	fffeffff 	.word	0xfffeffff
 8001a94:	feffffff 	.word	0xfeffffff
 8001a98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7fe ffd4 	bl	8000a48 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e02c      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_RCC_OscConfig+0x708>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	049b      	lsls	r3, r3, #18
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x694>
 8001aba:	e024      	b.n	8001b06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e01f      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_RCC_OscConfig+0x708>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_RCC_OscConfig+0x708>)
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	23c0      	movs	r3, #192	@ 0xc0
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10e      	bne.n	8001b02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	401a      	ands	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	23f0      	movs	r3, #240	@ 0xf0
 8001af6:	039b      	lsls	r3, r3, #14
 8001af8:	401a      	ands	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b008      	add	sp, #32
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0bf      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b61      	ldr	r3, [pc, #388]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d911      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b48:	4b59      	ldr	r3, [pc, #356]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0a6      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d006      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b6e:	4b51      	ldr	r3, [pc, #324]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4b50      	ldr	r3, [pc, #320]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b74:	21e0      	movs	r1, #224	@ 0xe0
 8001b76:	00c9      	lsls	r1, r1, #3
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	22f0      	movs	r2, #240	@ 0xf0
 8001b82:	4393      	bics	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d04c      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b44      	ldr	r3, [pc, #272]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	4013      	ands	r3, r2
 8001bac:	d120      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	049b      	lsls	r3, r3, #18
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d114      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	029b      	lsls	r3, r3, #10
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d108      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e062      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e05b      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4393      	bics	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7fe ff20 	bl	8000a48 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0e:	f7fe ff1b 	bl	8000a48 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a27      	ldr	r2, [pc, #156]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1a4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e042      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	220c      	movs	r2, #12
 8001c28:	401a      	ands	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1ec      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d211      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4393      	bics	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_RCC_ClockConfig+0x19c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e020      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a11      	ldr	r2, [pc, #68]	@ (8001cbc <HAL_RCC_ClockConfig+0x1a8>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c84:	f000 f820 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c88:	0001      	movs	r1, r0
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	220f      	movs	r2, #15
 8001c92:	4013      	ands	r3, r2
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1ac>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	000a      	movs	r2, r1
 8001c9a:	40da      	lsrs	r2, r3
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7fe fe8b 	bl	80009bc <HAL_InitTick>
  
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	00001388 	.word	0x00001388
 8001cbc:	fffff8ff 	.word	0xfffff8ff
 8001cc0:	080042d4 	.word	0x080042d4
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	220c      	movs	r2, #12
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d046      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0xb8>
 8001cf2:	d848      	bhi.n	8001d86 <HAL_RCC_GetSysClockFreq+0xbe>
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d002      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x36>
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d003      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x3c>
 8001cfc:	e043      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cfe:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d00:	613b      	str	r3, [r7, #16]
      break;
 8001d02:	e043      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	220f      	movs	r2, #15
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	4a24      	ldr	r2, [pc, #144]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001d0e:	5cd3      	ldrb	r3, [r2, r3]
 8001d10:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d12:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	220f      	movs	r2, #15
 8001d18:	4013      	ands	r3, r2
 8001d1a:	4a22      	ldr	r2, [pc, #136]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	23c0      	movs	r3, #192	@ 0xc0
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	401a      	ands	r2, r3
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d109      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	481a      	ldr	r0, [pc, #104]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d34:	f7fe f9ee 	bl	8000114 <__udivsi3>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4353      	muls	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e01a      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	23c0      	movs	r3, #192	@ 0xc0
 8001d48:	025b      	lsls	r3, r3, #9
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	23c0      	movs	r3, #192	@ 0xc0
 8001d4e:	025b      	lsls	r3, r3, #9
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d109      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	4814      	ldr	r0, [pc, #80]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d58:	f7fe f9dc 	bl	8000114 <__udivsi3>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	001a      	movs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4353      	muls	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d6c:	f7fe f9d2 	bl	8000114 <__udivsi3>
 8001d70:	0003      	movs	r3, r0
 8001d72:	001a      	movs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4353      	muls	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	613b      	str	r3, [r7, #16]
      break;
 8001d7e:	e005      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d82:	613b      	str	r3, [r7, #16]
      break;
 8001d84:	e002      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d88:	613b      	str	r3, [r7, #16]
      break;
 8001d8a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d8c:	693b      	ldr	r3, [r7, #16]
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b006      	add	sp, #24
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	007a1200 	.word	0x007a1200
 8001da0:	080042ec 	.word	0x080042ec
 8001da4:	080042fc 	.word	0x080042fc
 8001da8:	02dc6c00 	.word	0x02dc6c00

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b02      	ldr	r3, [pc, #8]	@ (8001dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001dc4:	f7ff fff2 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dc8:	0001      	movs	r1, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	40d9      	lsrs	r1, r3
 8001dda:	000b      	movs	r3, r1
}    
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000
 8001de8:	080042e4 	.word	0x080042e4

08001dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	4013      	ands	r3, r2
 8001e06:	d100      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e08:	e08e      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e0a:	2017      	movs	r0, #23
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b6e      	ldr	r3, [pc, #440]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	055b      	lsls	r3, r3, #21
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d110      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e20:	69da      	ldr	r2, [r3, #28]
 8001e22:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	0549      	lsls	r1, r1, #21
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	61da      	str	r2, [r3, #28]
 8001e2c:	4b67      	ldr	r3, [pc, #412]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	055b      	lsls	r3, r3, #21
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	183b      	adds	r3, r7, r0
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	4b63      	ldr	r3, [pc, #396]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d11a      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4c:	4b60      	ldr	r3, [pc, #384]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	0049      	lsls	r1, r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5a:	f7fe fdf5 	bl	8000a48 <HAL_GetTick>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	e008      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e64:	f7fe fdf0 	bl	8000a48 <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0a6      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b56      	ldr	r3, [pc, #344]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e82:	4b52      	ldr	r3, [pc, #328]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e84:	6a1a      	ldr	r2, [r3, #32]
 8001e86:	23c0      	movs	r3, #192	@ 0xc0
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d034      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	23c0      	movs	r3, #192	@ 0xc0
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d02c      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea4:	4b49      	ldr	r3, [pc, #292]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eae:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	4b46      	ldr	r3, [pc, #280]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	0249      	lsls	r1, r1, #9
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	4b42      	ldr	r3, [pc, #264]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ec2:	4945      	ldr	r1, [pc, #276]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ec8:	4b40      	ldr	r3, [pc, #256]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7fe fdb7 	bl	8000a48 <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ede:	e009      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7fe fdb2 	bl	8000a48 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	4a3c      	ldr	r2, [pc, #240]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e067      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	4b35      	ldr	r3, [pc, #212]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001efe:	4b33      	ldr	r3, [pc, #204]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a34      	ldr	r2, [pc, #208]	@ (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f12:	2317      	movs	r3, #23
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f22:	492f      	ldr	r1, [pc, #188]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	2203      	movs	r2, #3
 8001f38:	4393      	bics	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f50:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	4a23      	ldr	r2, [pc, #140]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	02db      	lsls	r3, r3, #11
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f70:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	2210      	movs	r2, #16
 8001f94:	4393      	bics	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4013      	ands	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b006      	add	sp, #24
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	fffffcff 	.word	0xfffffcff
 8001fd8:	fffeffff 	.word	0xfffeffff
 8001fdc:	00001388 	.word	0x00001388
 8001fe0:	efffffff 	.word	0xefffffff
 8001fe4:	fffcffff 	.word	0xfffcffff
 8001fe8:	fff3ffff 	.word	0xfff3ffff

08001fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e044      	b.n	8002088 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2278      	movs	r2, #120	@ 0x78
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f7fe fb8d 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2224      	movs	r2, #36	@ 0x24
 800201a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 fede 	bl	8002df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fcf2 	bl	8002a28 <UART_SetConfig>
 8002044:	0003      	movs	r3, r0
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e01c      	b.n	8002088 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	490d      	ldr	r1, [pc, #52]	@ (8002090 <HAL_UART_Init+0xa4>)
 800205a:	400a      	ands	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	212a      	movs	r1, #42	@ 0x2a
 800206a:	438a      	bics	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 ff6d 	bl	8002f60 <UART_CheckIdleState>
 8002086:	0003      	movs	r3, r0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}
 8002090:	ffffb7ff 	.word	0xffffb7ff

08002094 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	1dbb      	adds	r3, r7, #6
 80020a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d000      	beq.n	80020ac <HAL_UART_Transmit_DMA+0x18>
 80020aa:	e077      	b.n	800219c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_UART_Transmit_DMA+0x26>
 80020b2:	1dbb      	adds	r3, r7, #6
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	015b      	lsls	r3, r3, #5
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d109      	bne.n	80020de <HAL_UART_Transmit_DMA+0x4a>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d001      	beq.n	80020de <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e05f      	b.n	800219e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1dba      	adds	r2, r7, #6
 80020e8:	2150      	movs	r1, #80	@ 0x50
 80020ea:	8812      	ldrh	r2, [r2, #0]
 80020ec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1dba      	adds	r2, r7, #6
 80020f2:	2152      	movs	r1, #82	@ 0x52
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2284      	movs	r2, #132	@ 0x84
 80020fc:	2100      	movs	r1, #0
 80020fe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2221      	movs	r2, #33	@ 0x21
 8002104:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	2b00      	cmp	r3, #0
 800210c:	d027      	beq.n	800215e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002112:	4a25      	ldr	r2, [pc, #148]	@ (80021a8 <HAL_UART_Transmit_DMA+0x114>)
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	4a24      	ldr	r2, [pc, #144]	@ (80021ac <HAL_UART_Transmit_DMA+0x118>)
 800211c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002122:	4a23      	ldr	r2, [pc, #140]	@ (80021b0 <HAL_UART_Transmit_DMA+0x11c>)
 8002124:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	2200      	movs	r2, #0
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	0019      	movs	r1, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3328      	adds	r3, #40	@ 0x28
 800213e:	001a      	movs	r2, r3
 8002140:	1dbb      	adds	r3, r7, #6
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	f7fe fdd4 	bl	8000cf0 <HAL_DMA_Start_IT>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d008      	beq.n	800215e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2284      	movs	r2, #132	@ 0x84
 8002150:	2110      	movs	r1, #16
 8002152:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e01f      	b.n	800219e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2240      	movs	r2, #64	@ 0x40
 8002164:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002166:	f3ef 8310 	mrs	r3, PRIMASK
 800216a:	613b      	str	r3, [r7, #16]
  return(result);
 800216c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	2301      	movs	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f383 8810 	msr	PRIMASK, r3
}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f383 8810 	msr	PRIMASK, r3
}
 8002196:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
  }
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b008      	add	sp, #32
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	080033e1 	.word	0x080033e1
 80021ac:	08003475 	.word	0x08003475
 80021b0:	08003603 	.word	0x08003603

080021b4 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021bc:	f3ef 8310 	mrs	r3, PRIMASK
 80021c0:	617b      	str	r3, [r7, #20]
  return(result);
 80021c2:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	2301      	movs	r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f383 8810 	msr	PRIMASK, r3
}
 80021d0:	46c0      	nop			@ (mov r8, r8)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	21c0      	movs	r1, #192	@ 0xc0
 80021de:	438a      	bics	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f383 8810 	msr	PRIMASK, r3
}
 80021ec:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2280      	movs	r2, #128	@ 0x80
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b80      	cmp	r3, #128	@ 0x80
 80021fa:	d135      	bne.n	8002268 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002200:	60bb      	str	r3, [r7, #8]
  return(result);
 8002202:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	2301      	movs	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f383 8810 	msr	PRIMASK, r3
}
 8002210:	46c0      	nop			@ (mov r8, r8)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	438a      	bics	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f383 8810 	msr	PRIMASK, r3
}
 800222c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002232:	2b00      	cmp	r3, #0
 8002234:	d018      	beq.n	8002268 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	2200      	movs	r2, #0
 800223c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002242:	0018      	movs	r0, r3
 8002244:	f7fe fdba 	bl	8000dbc <HAL_DMA_Abort>
 8002248:	1e03      	subs	r3, r0, #0
 800224a:	d00d      	beq.n	8002268 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	0018      	movs	r0, r3
 8002252:	f7fe fed2 	bl	8000ffa <HAL_DMA_GetError>
 8002256:	0003      	movs	r3, r0
 8002258:	2b20      	cmp	r3, #32
 800225a:	d105      	bne.n	8002268 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2284      	movs	r2, #132	@ 0x84
 8002260:	2110      	movs	r1, #16
 8002262:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e007      	b.n	8002278 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2252      	movs	r2, #82	@ 0x52
 800226c:	2100      	movs	r1, #0
 800226e:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b00a      	add	sp, #40	@ 0x28
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b092      	sub	sp, #72	@ 0x48
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002288:	f3ef 8310 	mrs	r3, PRIMASK
 800228c:	623b      	str	r3, [r7, #32]
  return(result);
 800228e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002290:	647b      	str	r3, [r7, #68]	@ 0x44
 8002292:	2301      	movs	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	f383 8810 	msr	PRIMASK, r3
}
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	494b      	ldr	r1, [pc, #300]	@ (80023d8 <HAL_UART_AbortReceive+0x158>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	f383 8810 	msr	PRIMASK, r3
}
 80022b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ba:	f3ef 8310 	mrs	r3, PRIMASK
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80022c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c4:	2301      	movs	r3, #1
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ca:	f383 8810 	msr	PRIMASK, r3
}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2101      	movs	r1, #1
 80022dc:	438a      	bics	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d118      	bne.n	8002326 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f4:	f3ef 8310 	mrs	r3, PRIMASK
 80022f8:	617b      	str	r3, [r7, #20]
  return(result);
 80022fa:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fe:	2301      	movs	r3, #1
 8002300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f383 8810 	msr	PRIMASK, r3
}
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2110      	movs	r1, #16
 8002316:	438a      	bics	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f383 8810 	msr	PRIMASK, r3
}
 8002324:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2240      	movs	r2, #64	@ 0x40
 800232e:	4013      	ands	r3, r2
 8002330:	2b40      	cmp	r3, #64	@ 0x40
 8002332:	d135      	bne.n	80023a0 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002334:	f3ef 8310 	mrs	r3, PRIMASK
 8002338:	60bb      	str	r3, [r7, #8]
  return(result);
 800233a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800233c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800233e:	2301      	movs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f383 8810 	msr	PRIMASK, r3
}
 8002348:	46c0      	nop			@ (mov r8, r8)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2140      	movs	r1, #64	@ 0x40
 8002356:	438a      	bics	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f383 8810 	msr	PRIMASK, r3
}
 8002364:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236a:	2b00      	cmp	r3, #0
 800236c:	d018      	beq.n	80023a0 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002372:	2200      	movs	r2, #0
 8002374:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237a:	0018      	movs	r0, r3
 800237c:	f7fe fd1e 	bl	8000dbc <HAL_DMA_Abort>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d00d      	beq.n	80023a0 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002388:	0018      	movs	r0, r3
 800238a:	f7fe fe36 	bl	8000ffa <HAL_DMA_GetError>
 800238e:	0003      	movs	r3, r0
 8002390:	2b20      	cmp	r3, #32
 8002392:	d105      	bne.n	80023a0 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2284      	movs	r2, #132	@ 0x84
 8002398:	2110      	movs	r1, #16
 800239a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e017      	b.n	80023d0 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	225a      	movs	r2, #90	@ 0x5a
 80023a4:	2100      	movs	r1, #0
 80023a6:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	220f      	movs	r2, #15
 80023ae:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2108      	movs	r1, #8
 80023bc:	430a      	orrs	r2, r1
 80023be:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	2120      	movs	r1, #32
 80023c6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b012      	add	sp, #72	@ 0x48
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	fffffedf 	.word	0xfffffedf

080023dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b0ab      	sub	sp, #172	@ 0xac
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	22a4      	movs	r2, #164	@ 0xa4
 80023ec:	18b9      	adds	r1, r7, r2
 80023ee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	20a0      	movs	r0, #160	@ 0xa0
 80023f8:	1839      	adds	r1, r7, r0
 80023fa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	219c      	movs	r1, #156	@ 0x9c
 8002404:	1879      	adds	r1, r7, r1
 8002406:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002408:	0011      	movs	r1, r2
 800240a:	18bb      	adds	r3, r7, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a99      	ldr	r2, [pc, #612]	@ (8002674 <HAL_UART_IRQHandler+0x298>)
 8002410:	4013      	ands	r3, r2
 8002412:	2298      	movs	r2, #152	@ 0x98
 8002414:	18bc      	adds	r4, r7, r2
 8002416:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002418:	18bb      	adds	r3, r7, r2
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d114      	bne.n	800244a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002420:	187b      	adds	r3, r7, r1
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2220      	movs	r2, #32
 8002426:	4013      	ands	r3, r2
 8002428:	d00f      	beq.n	800244a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800242a:	183b      	adds	r3, r7, r0
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2220      	movs	r2, #32
 8002430:	4013      	ands	r3, r2
 8002432:	d00a      	beq.n	800244a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002438:	2b00      	cmp	r3, #0
 800243a:	d100      	bne.n	800243e <HAL_UART_IRQHandler+0x62>
 800243c:	e29e      	b.n	800297c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	0010      	movs	r0, r2
 8002446:	4798      	blx	r3
      }
      return;
 8002448:	e298      	b.n	800297c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800244a:	2398      	movs	r3, #152	@ 0x98
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d100      	bne.n	8002456 <HAL_UART_IRQHandler+0x7a>
 8002454:	e114      	b.n	8002680 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002456:	239c      	movs	r3, #156	@ 0x9c
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	4013      	ands	r3, r2
 8002460:	d106      	bne.n	8002470 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002462:	23a0      	movs	r3, #160	@ 0xa0
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a83      	ldr	r2, [pc, #524]	@ (8002678 <HAL_UART_IRQHandler+0x29c>)
 800246a:	4013      	ands	r3, r2
 800246c:	d100      	bne.n	8002470 <HAL_UART_IRQHandler+0x94>
 800246e:	e107      	b.n	8002680 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002470:	23a4      	movs	r3, #164	@ 0xa4
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2201      	movs	r2, #1
 8002478:	4013      	ands	r3, r2
 800247a:	d012      	beq.n	80024a2 <HAL_UART_IRQHandler+0xc6>
 800247c:	23a0      	movs	r3, #160	@ 0xa0
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d00b      	beq.n	80024a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2201      	movs	r2, #1
 8002490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2284      	movs	r2, #132	@ 0x84
 8002496:	589b      	ldr	r3, [r3, r2]
 8002498:	2201      	movs	r2, #1
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2184      	movs	r1, #132	@ 0x84
 80024a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024a2:	23a4      	movs	r3, #164	@ 0xa4
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2202      	movs	r2, #2
 80024aa:	4013      	ands	r3, r2
 80024ac:	d011      	beq.n	80024d2 <HAL_UART_IRQHandler+0xf6>
 80024ae:	239c      	movs	r3, #156	@ 0x9c
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2202      	movs	r2, #2
 80024c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2284      	movs	r2, #132	@ 0x84
 80024c6:	589b      	ldr	r3, [r3, r2]
 80024c8:	2204      	movs	r2, #4
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2184      	movs	r1, #132	@ 0x84
 80024d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024d2:	23a4      	movs	r3, #164	@ 0xa4
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2204      	movs	r2, #4
 80024da:	4013      	ands	r3, r2
 80024dc:	d011      	beq.n	8002502 <HAL_UART_IRQHandler+0x126>
 80024de:	239c      	movs	r3, #156	@ 0x9c
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4013      	ands	r3, r2
 80024e8:	d00b      	beq.n	8002502 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2284      	movs	r2, #132	@ 0x84
 80024f6:	589b      	ldr	r3, [r3, r2]
 80024f8:	2202      	movs	r2, #2
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2184      	movs	r1, #132	@ 0x84
 8002500:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002502:	23a4      	movs	r3, #164	@ 0xa4
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2208      	movs	r2, #8
 800250a:	4013      	ands	r3, r2
 800250c:	d017      	beq.n	800253e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800250e:	23a0      	movs	r3, #160	@ 0xa0
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2220      	movs	r2, #32
 8002516:	4013      	ands	r3, r2
 8002518:	d105      	bne.n	8002526 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800251a:	239c      	movs	r3, #156	@ 0x9c
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002524:	d00b      	beq.n	800253e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2208      	movs	r2, #8
 800252c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2284      	movs	r2, #132	@ 0x84
 8002532:	589b      	ldr	r3, [r3, r2]
 8002534:	2208      	movs	r2, #8
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2184      	movs	r1, #132	@ 0x84
 800253c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800253e:	23a4      	movs	r3, #164	@ 0xa4
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4013      	ands	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_UART_IRQHandler+0x198>
 800254c:	23a0      	movs	r3, #160	@ 0xa0
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	04db      	lsls	r3, r3, #19
 8002556:	4013      	ands	r3, r2
 8002558:	d00c      	beq.n	8002574 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2280      	movs	r2, #128	@ 0x80
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2284      	movs	r2, #132	@ 0x84
 8002568:	589b      	ldr	r3, [r3, r2]
 800256a:	2220      	movs	r2, #32
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2184      	movs	r1, #132	@ 0x84
 8002572:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2284      	movs	r2, #132	@ 0x84
 8002578:	589b      	ldr	r3, [r3, r2]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d100      	bne.n	8002580 <HAL_UART_IRQHandler+0x1a4>
 800257e:	e1ff      	b.n	8002980 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002580:	23a4      	movs	r3, #164	@ 0xa4
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2220      	movs	r2, #32
 8002588:	4013      	ands	r3, r2
 800258a:	d00e      	beq.n	80025aa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800258c:	23a0      	movs	r3, #160	@ 0xa0
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	4013      	ands	r3, r2
 8002596:	d008      	beq.n	80025aa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	0010      	movs	r0, r2
 80025a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2284      	movs	r2, #132	@ 0x84
 80025ae:	589b      	ldr	r3, [r3, r2]
 80025b0:	2194      	movs	r1, #148	@ 0x94
 80025b2:	187a      	adds	r2, r7, r1
 80025b4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2240      	movs	r2, #64	@ 0x40
 80025be:	4013      	ands	r3, r2
 80025c0:	2b40      	cmp	r3, #64	@ 0x40
 80025c2:	d004      	beq.n	80025ce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2228      	movs	r2, #40	@ 0x28
 80025ca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025cc:	d047      	beq.n	800265e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fea1 	bl	8003318 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2240      	movs	r2, #64	@ 0x40
 80025de:	4013      	ands	r3, r2
 80025e0:	2b40      	cmp	r3, #64	@ 0x40
 80025e2:	d137      	bne.n	8002654 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e4:	f3ef 8310 	mrs	r3, PRIMASK
 80025e8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80025ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ec:	2090      	movs	r0, #144	@ 0x90
 80025ee:	183a      	adds	r2, r7, r0
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025f8:	f383 8810 	msr	PRIMASK, r3
}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2140      	movs	r1, #64	@ 0x40
 800260a:	438a      	bics	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	183b      	adds	r3, r7, r0
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002616:	f383 8810 	msr	PRIMASK, r3
}
 800261a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002620:	2b00      	cmp	r3, #0
 8002622:	d012      	beq.n	800264a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002628:	4a14      	ldr	r2, [pc, #80]	@ (800267c <HAL_UART_IRQHandler+0x2a0>)
 800262a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002630:	0018      	movs	r0, r3
 8002632:	f7fe fbfb 	bl	8000e2c <HAL_DMA_Abort_IT>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d01a      	beq.n	8002670 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002644:	0018      	movs	r0, r3
 8002646:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e012      	b.n	8002670 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 f9c5 	bl	80029dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	e00d      	b.n	8002670 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f9c0 	bl	80029dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	e008      	b.n	8002670 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f9bb 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2284      	movs	r2, #132	@ 0x84
 800266a:	2100      	movs	r1, #0
 800266c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800266e:	e187      	b.n	8002980 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	46c0      	nop			@ (mov r8, r8)
    return;
 8002672:	e185      	b.n	8002980 <HAL_UART_IRQHandler+0x5a4>
 8002674:	0000080f 	.word	0x0000080f
 8002678:	04000120 	.word	0x04000120
 800267c:	08003687 	.word	0x08003687

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002684:	2b01      	cmp	r3, #1
 8002686:	d000      	beq.n	800268a <HAL_UART_IRQHandler+0x2ae>
 8002688:	e139      	b.n	80028fe <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800268a:	23a4      	movs	r3, #164	@ 0xa4
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	4013      	ands	r3, r2
 8002694:	d100      	bne.n	8002698 <HAL_UART_IRQHandler+0x2bc>
 8002696:	e132      	b.n	80028fe <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002698:	23a0      	movs	r3, #160	@ 0xa0
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2210      	movs	r2, #16
 80026a0:	4013      	ands	r3, r2
 80026a2:	d100      	bne.n	80026a6 <HAL_UART_IRQHandler+0x2ca>
 80026a4:	e12b      	b.n	80028fe <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2210      	movs	r2, #16
 80026ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2240      	movs	r2, #64	@ 0x40
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d000      	beq.n	80026be <HAL_UART_IRQHandler+0x2e2>
 80026bc:	e09f      	b.n	80027fe <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	217e      	movs	r1, #126	@ 0x7e
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d100      	bne.n	80026d6 <HAL_UART_IRQHandler+0x2fa>
 80026d4:	e156      	b.n	8002984 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2258      	movs	r2, #88	@ 0x58
 80026da:	5a9b      	ldrh	r3, [r3, r2]
 80026dc:	187a      	adds	r2, r7, r1
 80026de:	8812      	ldrh	r2, [r2, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d300      	bcc.n	80026e6 <HAL_UART_IRQHandler+0x30a>
 80026e4:	e14e      	b.n	8002984 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	187a      	adds	r2, r7, r1
 80026ea:	215a      	movs	r1, #90	@ 0x5a
 80026ec:	8812      	ldrh	r2, [r2, #0]
 80026ee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d06f      	beq.n	80027da <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002702:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002704:	2301      	movs	r3, #1
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270a:	f383 8810 	msr	PRIMASK, r3
}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	499e      	ldr	r1, [pc, #632]	@ (8002994 <HAL_UART_IRQHandler+0x5b8>)
 800271c:	400a      	ands	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002726:	f383 8810 	msr	PRIMASK, r3
}
 800272a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272c:	f3ef 8310 	mrs	r3, PRIMASK
 8002730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	677b      	str	r3, [r7, #116]	@ 0x74
 8002736:	2301      	movs	r3, #1
 8002738:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002758:	f383 8810 	msr	PRIMASK, r3
}
 800275c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275e:	f3ef 8310 	mrs	r3, PRIMASK
 8002762:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002766:	673b      	str	r3, [r7, #112]	@ 0x70
 8002768:	2301      	movs	r3, #1
 800276a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800276e:	f383 8810 	msr	PRIMASK, r3
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2140      	movs	r1, #64	@ 0x40
 8002780:	438a      	bics	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002786:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800278a:	f383 8810 	msr	PRIMASK, r3
}
 800278e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2280      	movs	r2, #128	@ 0x80
 8002794:	2120      	movs	r1, #32
 8002796:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279e:	f3ef 8310 	mrs	r3, PRIMASK
 80027a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80027a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027a8:	2301      	movs	r3, #1
 80027aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ae:	f383 8810 	msr	PRIMASK, r3
}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2110      	movs	r1, #16
 80027c0:	438a      	bics	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ca:	f383 8810 	msr	PRIMASK, r3
}
 80027ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7fe faf1 	bl	8000dbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2258      	movs	r2, #88	@ 0x58
 80027e4:	5a9a      	ldrh	r2, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	215a      	movs	r1, #90	@ 0x5a
 80027ea:	5a5b      	ldrh	r3, [r3, r1]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fd fda8 	bl	800034c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027fc:	e0c2      	b.n	8002984 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2258      	movs	r2, #88	@ 0x58
 8002802:	5a99      	ldrh	r1, [r3, r2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	225a      	movs	r2, #90	@ 0x5a
 8002808:	5a9b      	ldrh	r3, [r3, r2]
 800280a:	b29a      	uxth	r2, r3
 800280c:	208e      	movs	r0, #142	@ 0x8e
 800280e:	183b      	adds	r3, r7, r0
 8002810:	1a8a      	subs	r2, r1, r2
 8002812:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	225a      	movs	r2, #90	@ 0x5a
 8002818:	5a9b      	ldrh	r3, [r3, r2]
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d100      	bne.n	8002822 <HAL_UART_IRQHandler+0x446>
 8002820:	e0b2      	b.n	8002988 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002822:	183b      	adds	r3, r7, r0
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <HAL_UART_IRQHandler+0x450>
 800282a:	e0ad      	b.n	8002988 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282c:	f3ef 8310 	mrs	r3, PRIMASK
 8002830:	60fb      	str	r3, [r7, #12]
  return(result);
 8002832:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002834:	2488      	movs	r4, #136	@ 0x88
 8002836:	193a      	adds	r2, r7, r4
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4951      	ldr	r1, [pc, #324]	@ (8002998 <HAL_UART_IRQHandler+0x5bc>)
 8002852:	400a      	ands	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	193b      	adds	r3, r7, r4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f383 8810 	msr	PRIMASK, r3
}
 8002862:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002864:	f3ef 8310 	mrs	r3, PRIMASK
 8002868:	61bb      	str	r3, [r7, #24]
  return(result);
 800286a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286c:	2484      	movs	r4, #132	@ 0x84
 800286e:	193a      	adds	r2, r7, r4
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f383 8810 	msr	PRIMASK, r3
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	438a      	bics	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	193b      	adds	r3, r7, r4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	f383 8810 	msr	PRIMASK, r3
}
 800289a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	@ 0x80
 80028a0:	2120      	movs	r1, #32
 80028a2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b0:	f3ef 8310 	mrs	r3, PRIMASK
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b8:	2480      	movs	r4, #128	@ 0x80
 80028ba:	193a      	adds	r2, r7, r4
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	2301      	movs	r3, #1
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	f383 8810 	msr	PRIMASK, r3
}
 80028c8:	46c0      	nop			@ (mov r8, r8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2110      	movs	r1, #16
 80028d6:	438a      	bics	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	193b      	adds	r3, r7, r4
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e2:	f383 8810 	msr	PRIMASK, r3
}
 80028e6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0011      	movs	r1, r2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7fd fd28 	bl	800034c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028fc:	e044      	b.n	8002988 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028fe:	23a4      	movs	r3, #164	@ 0xa4
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	035b      	lsls	r3, r3, #13
 8002908:	4013      	ands	r3, r2
 800290a:	d010      	beq.n	800292e <HAL_UART_IRQHandler+0x552>
 800290c:	239c      	movs	r3, #156	@ 0x9c
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	03db      	lsls	r3, r3, #15
 8002916:	4013      	ands	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2280      	movs	r2, #128	@ 0x80
 8002920:	0352      	lsls	r2, r2, #13
 8002922:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 feef 	bl	800370a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800292c:	e02f      	b.n	800298e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800292e:	23a4      	movs	r3, #164	@ 0xa4
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2280      	movs	r2, #128	@ 0x80
 8002936:	4013      	ands	r3, r2
 8002938:	d00f      	beq.n	800295a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800293a:	23a0      	movs	r3, #160	@ 0xa0
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2280      	movs	r2, #128	@ 0x80
 8002942:	4013      	ands	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01e      	beq.n	800298c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	0010      	movs	r0, r2
 8002956:	4798      	blx	r3
    }
    return;
 8002958:	e018      	b.n	800298c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800295a:	23a4      	movs	r3, #164	@ 0xa4
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2240      	movs	r2, #64	@ 0x40
 8002962:	4013      	ands	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_UART_IRQHandler+0x5b2>
 8002966:	23a0      	movs	r3, #160	@ 0xa0
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2240      	movs	r2, #64	@ 0x40
 800296e:	4013      	ands	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fe9d 	bl	80036b4 <UART_EndTransmit_IT>
    return;
 800297a:	e008      	b.n	800298e <HAL_UART_IRQHandler+0x5b2>
      return;
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	e006      	b.n	800298e <HAL_UART_IRQHandler+0x5b2>
    return;
 8002980:	46c0      	nop			@ (mov r8, r8)
 8002982:	e004      	b.n	800298e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002984:	46c0      	nop			@ (mov r8, r8)
 8002986:	e002      	b.n	800298e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002988:	46c0      	nop			@ (mov r8, r8)
 800298a:	e000      	b.n	800298e <HAL_UART_IRQHandler+0x5b2>
    return;
 800298c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800298e:	46bd      	mov	sp, r7
 8002990:	b02b      	add	sp, #172	@ 0xac
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	fffffeff 	.word	0xfffffeff
 8002998:	fffffedf 	.word	0xfffffedf

0800299c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029a4:	46c0      	nop			@ (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80029c4:	46c0      	nop			@ (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029f8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2280      	movs	r2, #128	@ 0x80
 80029fe:	589b      	ldr	r3, [r3, r2]
 8002a00:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2284      	movs	r2, #132	@ 0x84
 8002a1c:	589b      	ldr	r3, [r3, r2]
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a30:	231e      	movs	r3, #30
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4abe      	ldr	r2, [pc, #760]	@ (8002d50 <UART_SetConfig+0x328>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4ab9      	ldr	r2, [pc, #740]	@ (8002d54 <UART_SetConfig+0x32c>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4ab0      	ldr	r2, [pc, #704]	@ (8002d58 <UART_SetConfig+0x330>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4aac      	ldr	r2, [pc, #688]	@ (8002d5c <UART_SetConfig+0x334>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d127      	bne.n	8002afe <UART_SetConfig+0xd6>
 8002aae:	4bac      	ldr	r3, [pc, #688]	@ (8002d60 <UART_SetConfig+0x338>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d00d      	beq.n	8002ad6 <UART_SetConfig+0xae>
 8002aba:	d81b      	bhi.n	8002af4 <UART_SetConfig+0xcc>
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d014      	beq.n	8002aea <UART_SetConfig+0xc2>
 8002ac0:	d818      	bhi.n	8002af4 <UART_SetConfig+0xcc>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <UART_SetConfig+0xa4>
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d00a      	beq.n	8002ae0 <UART_SetConfig+0xb8>
 8002aca:	e013      	b.n	8002af4 <UART_SetConfig+0xcc>
 8002acc:	231f      	movs	r3, #31
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e0bd      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002ad6:	231f      	movs	r3, #31
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2202      	movs	r2, #2
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e0b8      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002ae0:	231f      	movs	r3, #31
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e0b3      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002aea:	231f      	movs	r3, #31
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2208      	movs	r2, #8
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e0ae      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002af4:	231f      	movs	r3, #31
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2210      	movs	r2, #16
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e0a9      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a98      	ldr	r2, [pc, #608]	@ (8002d64 <UART_SetConfig+0x33c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d134      	bne.n	8002b72 <UART_SetConfig+0x14a>
 8002b08:	4b95      	ldr	r3, [pc, #596]	@ (8002d60 <UART_SetConfig+0x338>)
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b0c:	23c0      	movs	r3, #192	@ 0xc0
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	4013      	ands	r3, r2
 8002b12:	22c0      	movs	r2, #192	@ 0xc0
 8002b14:	0292      	lsls	r2, r2, #10
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d017      	beq.n	8002b4a <UART_SetConfig+0x122>
 8002b1a:	22c0      	movs	r2, #192	@ 0xc0
 8002b1c:	0292      	lsls	r2, r2, #10
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d822      	bhi.n	8002b68 <UART_SetConfig+0x140>
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	0292      	lsls	r2, r2, #10
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <UART_SetConfig+0x136>
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	0292      	lsls	r2, r2, #10
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d81a      	bhi.n	8002b68 <UART_SetConfig+0x140>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <UART_SetConfig+0x118>
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	0252      	lsls	r2, r2, #9
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00a      	beq.n	8002b54 <UART_SetConfig+0x12c>
 8002b3e:	e013      	b.n	8002b68 <UART_SetConfig+0x140>
 8002b40:	231f      	movs	r3, #31
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e083      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002b4a:	231f      	movs	r3, #31
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2202      	movs	r2, #2
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e07e      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002b54:	231f      	movs	r3, #31
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2204      	movs	r2, #4
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e079      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002b5e:	231f      	movs	r3, #31
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	2208      	movs	r2, #8
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e074      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002b68:	231f      	movs	r3, #31
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e06f      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7c      	ldr	r2, [pc, #496]	@ (8002d68 <UART_SetConfig+0x340>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d134      	bne.n	8002be6 <UART_SetConfig+0x1be>
 8002b7c:	4b78      	ldr	r3, [pc, #480]	@ (8002d60 <UART_SetConfig+0x338>)
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b80:	23c0      	movs	r3, #192	@ 0xc0
 8002b82:	031b      	lsls	r3, r3, #12
 8002b84:	4013      	ands	r3, r2
 8002b86:	22c0      	movs	r2, #192	@ 0xc0
 8002b88:	0312      	lsls	r2, r2, #12
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d017      	beq.n	8002bbe <UART_SetConfig+0x196>
 8002b8e:	22c0      	movs	r2, #192	@ 0xc0
 8002b90:	0312      	lsls	r2, r2, #12
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d822      	bhi.n	8002bdc <UART_SetConfig+0x1b4>
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	0312      	lsls	r2, r2, #12
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d019      	beq.n	8002bd2 <UART_SetConfig+0x1aa>
 8002b9e:	2280      	movs	r2, #128	@ 0x80
 8002ba0:	0312      	lsls	r2, r2, #12
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d81a      	bhi.n	8002bdc <UART_SetConfig+0x1b4>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <UART_SetConfig+0x18c>
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	02d2      	lsls	r2, r2, #11
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00a      	beq.n	8002bc8 <UART_SetConfig+0x1a0>
 8002bb2:	e013      	b.n	8002bdc <UART_SetConfig+0x1b4>
 8002bb4:	231f      	movs	r3, #31
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e049      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002bbe:	231f      	movs	r3, #31
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e044      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002bc8:	231f      	movs	r3, #31
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2204      	movs	r2, #4
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e03f      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002bd2:	231f      	movs	r3, #31
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e03a      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002bdc:	231f      	movs	r3, #31
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2210      	movs	r2, #16
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e035      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a60      	ldr	r2, [pc, #384]	@ (8002d6c <UART_SetConfig+0x344>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d104      	bne.n	8002bfa <UART_SetConfig+0x1d2>
 8002bf0:	231f      	movs	r3, #31
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e02b      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8002d70 <UART_SetConfig+0x348>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d104      	bne.n	8002c0e <UART_SetConfig+0x1e6>
 8002c04:	231f      	movs	r3, #31
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e021      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a58      	ldr	r2, [pc, #352]	@ (8002d74 <UART_SetConfig+0x34c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d104      	bne.n	8002c22 <UART_SetConfig+0x1fa>
 8002c18:	231f      	movs	r3, #31
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e017      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a54      	ldr	r2, [pc, #336]	@ (8002d78 <UART_SetConfig+0x350>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d104      	bne.n	8002c36 <UART_SetConfig+0x20e>
 8002c2c:	231f      	movs	r3, #31
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e00d      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a50      	ldr	r2, [pc, #320]	@ (8002d7c <UART_SetConfig+0x354>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d104      	bne.n	8002c4a <UART_SetConfig+0x222>
 8002c40:	231f      	movs	r3, #31
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e003      	b.n	8002c52 <UART_SetConfig+0x22a>
 8002c4a:	231f      	movs	r3, #31
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2210      	movs	r2, #16
 8002c50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	2380      	movs	r3, #128	@ 0x80
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d15c      	bne.n	8002d18 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002c5e:	231f      	movs	r3, #31
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d015      	beq.n	8002c94 <UART_SetConfig+0x26c>
 8002c68:	dc18      	bgt.n	8002c9c <UART_SetConfig+0x274>
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d00d      	beq.n	8002c8a <UART_SetConfig+0x262>
 8002c6e:	dc15      	bgt.n	8002c9c <UART_SetConfig+0x274>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <UART_SetConfig+0x252>
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d005      	beq.n	8002c84 <UART_SetConfig+0x25c>
 8002c78:	e010      	b.n	8002c9c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7a:	f7ff f8a1 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	61bb      	str	r3, [r7, #24]
        break;
 8002c82:	e012      	b.n	8002caa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c84:	4b3e      	ldr	r3, [pc, #248]	@ (8002d80 <UART_SetConfig+0x358>)
 8002c86:	61bb      	str	r3, [r7, #24]
        break;
 8002c88:	e00f      	b.n	8002caa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8a:	f7ff f81d 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	61bb      	str	r3, [r7, #24]
        break;
 8002c92:	e00a      	b.n	8002caa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	61bb      	str	r3, [r7, #24]
        break;
 8002c9a:	e006      	b.n	8002caa <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ca0:	231e      	movs	r3, #30
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
        break;
 8002ca8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d100      	bne.n	8002cb2 <UART_SetConfig+0x28a>
 8002cb0:	e095      	b.n	8002dde <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	005a      	lsls	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	18d2      	adds	r2, r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f7fd fa25 	bl	8000114 <__udivsi3>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d91c      	bls.n	8002d0e <UART_SetConfig+0x2e6>
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d217      	bcs.n	8002d0e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	200e      	movs	r0, #14
 8002ce4:	183b      	adds	r3, r7, r0
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	438a      	bics	r2, r1
 8002cea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b299      	uxth	r1, r3
 8002cf8:	183b      	adds	r3, r7, r0
 8002cfa:	183a      	adds	r2, r7, r0
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	183a      	adds	r2, r7, r0
 8002d08:	8812      	ldrh	r2, [r2, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	e067      	b.n	8002dde <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002d0e:	231e      	movs	r3, #30
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e062      	b.n	8002dde <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d18:	231f      	movs	r3, #31
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d030      	beq.n	8002d84 <UART_SetConfig+0x35c>
 8002d22:	dc33      	bgt.n	8002d8c <UART_SetConfig+0x364>
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d00d      	beq.n	8002d44 <UART_SetConfig+0x31c>
 8002d28:	dc30      	bgt.n	8002d8c <UART_SetConfig+0x364>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <UART_SetConfig+0x30c>
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d005      	beq.n	8002d3e <UART_SetConfig+0x316>
 8002d32:	e02b      	b.n	8002d8c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7ff f844 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]
        break;
 8002d3c:	e02d      	b.n	8002d9a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <UART_SetConfig+0x358>)
 8002d40:	61bb      	str	r3, [r7, #24]
        break;
 8002d42:	e02a      	b.n	8002d9a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d44:	f7fe ffc0 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	61bb      	str	r3, [r7, #24]
        break;
 8002d4c:	e025      	b.n	8002d9a <UART_SetConfig+0x372>
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	efff69f3 	.word	0xefff69f3
 8002d54:	ffffcfff 	.word	0xffffcfff
 8002d58:	fffff4ff 	.word	0xfffff4ff
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40004400 	.word	0x40004400
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	40004c00 	.word	0x40004c00
 8002d70:	40005000 	.word	0x40005000
 8002d74:	40011400 	.word	0x40011400
 8002d78:	40011800 	.word	0x40011800
 8002d7c:	40011c00 	.word	0x40011c00
 8002d80:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	61bb      	str	r3, [r7, #24]
        break;
 8002d8a:	e006      	b.n	8002d9a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d90:	231e      	movs	r3, #30
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
        break;
 8002d98:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01e      	beq.n	8002dde <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	085a      	lsrs	r2, r3, #1
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	18d2      	adds	r2, r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	0019      	movs	r1, r3
 8002db0:	0010      	movs	r0, r2
 8002db2:	f7fd f9af 	bl	8000114 <__udivsi3>
 8002db6:	0003      	movs	r3, r0
 8002db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d90a      	bls.n	8002dd6 <UART_SetConfig+0x3ae>
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	025b      	lsls	r3, r3, #9
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d205      	bcs.n	8002dd6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	e003      	b.n	8002dde <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002dd6:	231e      	movs	r3, #30
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dea:	231e      	movs	r3, #30
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b008      	add	sp, #32
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2208      	movs	r2, #8
 8002e06:	4013      	ands	r3, r2
 8002e08:	d00b      	beq.n	8002e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a4a      	ldr	r2, [pc, #296]	@ (8002f3c <UART_AdvFeatureConfig+0x144>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2201      	movs	r2, #1
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d00b      	beq.n	8002e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a43      	ldr	r2, [pc, #268]	@ (8002f40 <UART_AdvFeatureConfig+0x148>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a3b      	ldr	r2, [pc, #236]	@ (8002f44 <UART_AdvFeatureConfig+0x14c>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a34      	ldr	r2, [pc, #208]	@ (8002f48 <UART_AdvFeatureConfig+0x150>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	@ (8002f4c <UART_AdvFeatureConfig+0x154>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	2220      	movs	r2, #32
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4a25      	ldr	r2, [pc, #148]	@ (8002f50 <UART_AdvFeatureConfig+0x158>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	2240      	movs	r2, #64	@ 0x40
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d01d      	beq.n	8002f12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f54 <UART_AdvFeatureConfig+0x15c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	035b      	lsls	r3, r3, #13
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10b      	bne.n	8002f12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a15      	ldr	r2, [pc, #84]	@ (8002f58 <UART_AdvFeatureConfig+0x160>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <UART_AdvFeatureConfig+0x164>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }
}
 8002f34:	46c0      	nop			@ (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	ffff7fff 	.word	0xffff7fff
 8002f40:	fffdffff 	.word	0xfffdffff
 8002f44:	fffeffff 	.word	0xfffeffff
 8002f48:	fffbffff 	.word	0xfffbffff
 8002f4c:	ffffefff 	.word	0xffffefff
 8002f50:	ffffdfff 	.word	0xffffdfff
 8002f54:	ffefffff 	.word	0xffefffff
 8002f58:	ff9fffff 	.word	0xff9fffff
 8002f5c:	fff7ffff 	.word	0xfff7ffff

08002f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b092      	sub	sp, #72	@ 0x48
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2284      	movs	r2, #132	@ 0x84
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f70:	f7fd fd6a 	bl	8000a48 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2208      	movs	r2, #8
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d12c      	bne.n	8002fe0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f88:	2280      	movs	r2, #128	@ 0x80
 8002f8a:	0391      	lsls	r1, r2, #14
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4a46      	ldr	r2, [pc, #280]	@ (80030a8 <UART_CheckIdleState+0x148>)
 8002f90:	9200      	str	r2, [sp, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f000 f88c 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d021      	beq.n	8002fe0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	46c0      	nop			@ (mov r8, r8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2180      	movs	r1, #128	@ 0x80
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2278      	movs	r2, #120	@ 0x78
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e05f      	b.n	80030a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d146      	bne.n	800307c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	03d1      	lsls	r1, r2, #15
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80030a8 <UART_CheckIdleState+0x148>)
 8002ff8:	9200      	str	r2, [sp, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f000 f858 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d03b      	beq.n	800307c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003004:	f3ef 8310 	mrs	r3, PRIMASK
 8003008:	60fb      	str	r3, [r7, #12]
  return(result);
 800300a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
 800300e:	2301      	movs	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f383 8810 	msr	PRIMASK, r3
}
 8003018:	46c0      	nop			@ (mov r8, r8)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4921      	ldr	r1, [pc, #132]	@ (80030ac <UART_CheckIdleState+0x14c>)
 8003026:	400a      	ands	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003036:	f3ef 8310 	mrs	r3, PRIMASK
 800303a:	61bb      	str	r3, [r7, #24]
  return(result);
 800303c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003040:	2301      	movs	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f383 8810 	msr	PRIMASK, r3
}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2101      	movs	r1, #1
 8003058:	438a      	bics	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	2120      	movs	r1, #32
 800306e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2278      	movs	r2, #120	@ 0x78
 8003074:	2100      	movs	r1, #0
 8003076:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e011      	b.n	80030a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2280      	movs	r2, #128	@ 0x80
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2278      	movs	r2, #120	@ 0x78
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b010      	add	sp, #64	@ 0x40
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	01ffffff 	.word	0x01ffffff
 80030ac:	fffffedf 	.word	0xfffffedf

080030b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c0:	e051      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	3301      	adds	r3, #1
 80030c6:	d04e      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fd fcbe 	bl	8000a48 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <UART_WaitOnFlagUntilTimeout+0x2e>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e051      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2204      	movs	r2, #4
 80030ea:	4013      	ands	r3, r2
 80030ec:	d03b      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb6>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d038      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb6>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b40      	cmp	r3, #64	@ 0x40
 80030f8:	d035      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2208      	movs	r2, #8
 8003102:	4013      	ands	r3, r2
 8003104:	2b08      	cmp	r3, #8
 8003106:	d111      	bne.n	800312c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2208      	movs	r2, #8
 800310e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f900 	bl	8003318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2284      	movs	r2, #132	@ 0x84
 800311c:	2108      	movs	r1, #8
 800311e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2278      	movs	r2, #120	@ 0x78
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e02c      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	401a      	ands	r2, r3
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	429a      	cmp	r2, r3
 800313e:	d112      	bne.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2280      	movs	r2, #128	@ 0x80
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f8e3 	bl	8003318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2284      	movs	r2, #132	@ 0x84
 8003156:	2120      	movs	r1, #32
 8003158:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2278      	movs	r2, #120	@ 0x78
 800315e:	2100      	movs	r1, #0
 8003160:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e00f      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	425a      	negs	r2, r3
 8003176:	4153      	adcs	r3, r2
 8003178:	b2db      	uxtb	r3, r3
 800317a:	001a      	movs	r2, r3
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d09e      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b004      	add	sp, #16
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b090      	sub	sp, #64	@ 0x40
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	1dbb      	adds	r3, r7, #6
 800319c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1dba      	adds	r2, r7, #6
 80031a8:	2158      	movs	r1, #88	@ 0x58
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2284      	movs	r2, #132	@ 0x84
 80031b2:	2100      	movs	r1, #0
 80031b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	2122      	movs	r1, #34	@ 0x22
 80031bc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d028      	beq.n	8003218 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ca:	4a3e      	ldr	r2, [pc, #248]	@ (80032c4 <UART_Start_Receive_DMA+0x134>)
 80031cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d2:	4a3d      	ldr	r2, [pc, #244]	@ (80032c8 <UART_Start_Receive_DMA+0x138>)
 80031d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031da:	4a3c      	ldr	r2, [pc, #240]	@ (80032cc <UART_Start_Receive_DMA+0x13c>)
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e2:	2200      	movs	r2, #0
 80031e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3324      	adds	r3, #36	@ 0x24
 80031f0:	0019      	movs	r1, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	001a      	movs	r2, r3
 80031f8:	1dbb      	adds	r3, r7, #6
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	f7fd fd78 	bl	8000cf0 <HAL_DMA_Start_IT>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d009      	beq.n	8003218 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2284      	movs	r2, #132	@ 0x84
 8003208:	2110      	movs	r1, #16
 800320a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2280      	movs	r2, #128	@ 0x80
 8003210:	2120      	movs	r1, #32
 8003212:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e050      	b.n	80032ba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d019      	beq.n	8003254 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003220:	f3ef 8310 	mrs	r3, PRIMASK
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800322a:	2301      	movs	r3, #1
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	0049      	lsls	r1, r1, #1
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003254:	f3ef 8310 	mrs	r3, PRIMASK
 8003258:	613b      	str	r3, [r7, #16]
  return(result);
 800325a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800325e:	2301      	movs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			@ (mov r8, r8)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003286:	f3ef 8310 	mrs	r3, PRIMASK
 800328a:	61fb      	str	r3, [r7, #28]
  return(result);
 800328c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003290:	2301      	movs	r3, #1
 8003292:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2140      	movs	r1, #64	@ 0x40
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b010      	add	sp, #64	@ 0x40
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	08003495 	.word	0x08003495
 80032c8:	080035c1 	.word	0x080035c1
 80032cc:	08003603 	.word	0x08003603

080032d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d8:	f3ef 8310 	mrs	r3, PRIMASK
 80032dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80032de:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	2301      	movs	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			@ (mov r8, r8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	21c0      	movs	r1, #192	@ 0xc0
 80032fa:	438a      	bics	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b006      	add	sp, #24
 8003316:	bd80      	pop	{r7, pc}

08003318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08e      	sub	sp, #56	@ 0x38
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003320:	f3ef 8310 	mrs	r3, PRIMASK
 8003324:	617b      	str	r3, [r7, #20]
  return(result);
 8003326:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
 800332a:	2301      	movs	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			@ (mov r8, r8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4926      	ldr	r1, [pc, #152]	@ (80033dc <UART_EndRxTransfer+0xc4>)
 8003342:	400a      	ands	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003348:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	623b      	str	r3, [r7, #32]
  return(result);
 8003358:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
 800335c:	2301      	movs	r3, #1
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2101      	movs	r1, #1
 8003374:	438a      	bics	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003388:	2b01      	cmp	r3, #1
 800338a:	d118      	bne.n	80033be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338c:	f3ef 8310 	mrs	r3, PRIMASK
 8003390:	60bb      	str	r3, [r7, #8]
  return(result);
 8003392:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003396:	2301      	movs	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2110      	movs	r1, #16
 80033ae:	438a      	bics	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2280      	movs	r2, #128	@ 0x80
 80033c2:	2120      	movs	r1, #32
 80033c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b00e      	add	sp, #56	@ 0x38
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	fffffedf 	.word	0xfffffedf

080033e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	@ 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d035      	beq.n	8003462 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80033f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f8:	2252      	movs	r2, #82	@ 0x52
 80033fa:	2100      	movs	r1, #0
 80033fc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	60fb      	str	r3, [r7, #12]
  return(result);
 8003404:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003406:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003408:	2301      	movs	r3, #1
 800340a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	438a      	bics	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003430:	f3ef 8310 	mrs	r3, PRIMASK
 8003434:	61bb      	str	r3, [r7, #24]
  return(result);
 8003436:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
 800343a:	2301      	movs	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f383 8810 	msr	PRIMASK, r3
}
 8003444:	46c0      	nop			@ (mov r8, r8)
 8003446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2140      	movs	r1, #64	@ 0x40
 8003452:	430a      	orrs	r2, r1
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	e004      	b.n	800346c <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff fa99 	bl	800299c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	46c0      	nop			@ (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b00c      	add	sp, #48	@ 0x30
 8003472:	bd80      	pop	{r7, pc}

08003474 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff fa91 	bl	80029ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b004      	add	sp, #16
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b094      	sub	sp, #80	@ 0x50
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d06f      	beq.n	800358a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80034aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ac:	225a      	movs	r2, #90	@ 0x5a
 80034ae:	2100      	movs	r1, #0
 80034b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b2:	f3ef 8310 	mrs	r3, PRIMASK
 80034b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80034b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034bc:	2301      	movs	r3, #1
 80034be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	493a      	ldr	r1, [pc, #232]	@ (80035bc <UART_DMAReceiveCplt+0x128>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ee:	2301      	movs	r3, #1
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	438a      	bics	r2, r1
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003516:	f3ef 8310 	mrs	r3, PRIMASK
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003520:	2301      	movs	r3, #1
 8003522:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2140      	movs	r1, #64	@ 0x40
 8003538:	438a      	bics	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354a:	2280      	movs	r2, #128	@ 0x80
 800354c:	2120      	movs	r1, #32
 800354e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003554:	2b01      	cmp	r3, #1
 8003556:	d118      	bne.n	800358a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003558:	f3ef 8310 	mrs	r3, PRIMASK
 800355c:	60fb      	str	r3, [r7, #12]
  return(result);
 800355e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003562:	2301      	movs	r3, #1
 8003564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f383 8810 	msr	PRIMASK, r3
}
 800356c:	46c0      	nop			@ (mov r8, r8)
 800356e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2110      	movs	r1, #16
 800357a:	438a      	bics	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f383 8810 	msr	PRIMASK, r3
}
 8003588:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800358a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800358c:	2200      	movs	r2, #0
 800358e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003594:	2b01      	cmp	r3, #1
 8003596:	d108      	bne.n	80035aa <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359a:	2258      	movs	r2, #88	@ 0x58
 800359c:	5a9a      	ldrh	r2, [r3, r2]
 800359e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fc fed2 	bl	800034c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035a8:	e003      	b.n	80035b2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80035aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7ff fa05 	bl	80029bc <HAL_UART_RxCpltCallback>
}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b014      	add	sp, #80	@ 0x50
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	fffffeff 	.word	0xfffffeff

080035c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10a      	bne.n	80035f2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2258      	movs	r2, #88	@ 0x58
 80035e0:	5a9b      	ldrh	r3, [r3, r2]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0011      	movs	r1, r2
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7fc feae 	bl	800034c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035f0:	e003      	b.n	80035fa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff f9e9 	bl	80029cc <HAL_UART_RxHalfCpltCallback>
}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003614:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2280      	movs	r2, #128	@ 0x80
 800361a:	589b      	ldr	r3, [r3, r2]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2280      	movs	r2, #128	@ 0x80
 8003626:	4013      	ands	r3, r2
 8003628:	2b80      	cmp	r3, #128	@ 0x80
 800362a:	d10a      	bne.n	8003642 <UART_DMAError+0x40>
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b21      	cmp	r3, #33	@ 0x21
 8003630:	d107      	bne.n	8003642 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2252      	movs	r2, #82	@ 0x52
 8003636:	2100      	movs	r1, #0
 8003638:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff fe47 	bl	80032d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2240      	movs	r2, #64	@ 0x40
 800364a:	4013      	ands	r3, r2
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d10a      	bne.n	8003666 <UART_DMAError+0x64>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b22      	cmp	r3, #34	@ 0x22
 8003654:	d107      	bne.n	8003666 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	225a      	movs	r2, #90	@ 0x5a
 800365a:	2100      	movs	r1, #0
 800365c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	0018      	movs	r0, r3
 8003662:	f7ff fe59 	bl	8003318 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2284      	movs	r2, #132	@ 0x84
 800366a:	589b      	ldr	r3, [r3, r2]
 800366c:	2210      	movs	r2, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2184      	movs	r1, #132	@ 0x84
 8003674:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff f9af 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}

08003686 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	225a      	movs	r2, #90	@ 0x5a
 8003698:	2100      	movs	r1, #0
 800369a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2252      	movs	r2, #82	@ 0x52
 80036a0:	2100      	movs	r1, #0
 80036a2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7ff f998 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b004      	add	sp, #16
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036bc:	f3ef 8310 	mrs	r3, PRIMASK
 80036c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	2301      	movs	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f383 8810 	msr	PRIMASK, r3
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2140      	movs	r1, #64	@ 0x40
 80036de:	438a      	bics	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7ff f94d 	bl	800299c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800371a:	b5b0      	push	{r4, r5, r7, lr}
 800371c:	b08a      	sub	sp, #40	@ 0x28
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	1dbb      	adds	r3, r7, #6
 8003726:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2280      	movs	r2, #128	@ 0x80
 800372c:	589b      	ldr	r3, [r3, r2]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d156      	bne.n	80037e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e04e      	b.n	80037e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	429a      	cmp	r2, r3
 800374e:	d109      	bne.n	8003764 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	d001      	beq.n	8003764 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e03e      	b.n	80037e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003770:	2527      	movs	r5, #39	@ 0x27
 8003772:	197c      	adds	r4, r7, r5
 8003774:	1dbb      	adds	r3, r7, #6
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	0018      	movs	r0, r3
 800377e:	f7ff fd07 	bl	8003190 <UART_Start_Receive_DMA>
 8003782:	0003      	movs	r3, r0
 8003784:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003786:	197b      	adds	r3, r7, r5
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d124      	bne.n	80037d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	2b01      	cmp	r3, #1
 8003794:	d11c      	bne.n	80037d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2210      	movs	r2, #16
 800379c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379e:	f3ef 8310 	mrs	r3, PRIMASK
 80037a2:	617b      	str	r3, [r7, #20]
  return(result);
 80037a4:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	2301      	movs	r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f383 8810 	msr	PRIMASK, r3
}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2110      	movs	r1, #16
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	e003      	b.n	80037d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80037d0:	2327      	movs	r3, #39	@ 0x27
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80037d8:	2327      	movs	r3, #39	@ 0x27
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	e000      	b.n	80037e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b00a      	add	sp, #40	@ 0x28
 80037e8:	bdb0      	pop	{r4, r5, r7, pc}

080037ea <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 fb85 	bl	8003f08 <malloc>
 80037fe:	0003      	movs	r3, r0
 8003800:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8003802:	68fb      	ldr	r3, [r7, #12]
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b004      	add	sp, #16
 800380a:	bd80      	pop	{r7, pc}

0800380c <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <ATC_Free+0x26>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0018      	movs	r0, r3
 8003828:	f000 fb78 	bl	8003f1c <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
  }
}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b002      	add	sp, #8
 8003838:	bd80      	pop	{r7, pc}

0800383a <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8a9b      	ldrh	r3, [r3, #20]
 8003850:	001a      	movs	r2, r3
 8003852:	2100      	movs	r1, #0
 8003854:	f000 fc1e 	bl	8004094 <memset>
}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	1dbb      	adds	r3, r7, #6
 800386c:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 800386e:	2417      	movs	r4, #23
 8003870:	193b      	adds	r3, r7, r4
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1dba      	adds	r2, r7, #6
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	1dbb      	adds	r3, r7, #6
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	0019      	movs	r1, r3
 800388a:	f7fe fc03 	bl	8002094 <HAL_UART_Transmit_DMA>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d103      	bne.n	800389a <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8003892:	193b      	adds	r3, r7, r4
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e000      	b.n	800389c <ATC_TxRaw+0x3c>
      break;
 800389a:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 800389c:	2317      	movs	r3, #23
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	781b      	ldrb	r3, [r3, #0]
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b007      	add	sp, #28
 80038a8:	bd90      	pop	{r4, r7, pc}

080038aa <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff f898 	bl	80029ec <HAL_UART_GetState>
 80038bc:	0003      	movs	r3, r0
 80038be:	2b21      	cmp	r3, #33	@ 0x21
 80038c0:	d007      	beq.n	80038d2 <ATC_TxBusy+0x28>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	0018      	movs	r0, r3
 80038c8:	f7ff f890 	bl	80029ec <HAL_UART_GetState>
 80038cc:	0003      	movs	r3, r0
 80038ce:	2b23      	cmp	r3, #35	@ 0x23
 80038d0:	d101      	bne.n	80038d6 <ATC_TxBusy+0x2c>
  {
    return true;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 80038d6:	2300      	movs	r3, #0
  }
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80038ea:	230f      	movs	r3, #15
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 80038f2:	f7fd f8a9 	bl	8000a48 <HAL_GetTick>
 80038f6:	0003      	movs	r3, r0
 80038f8:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f000 faf7 	bl	8003eee <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0018      	movs	r0, r3
 8003906:	f7ff f871 	bl	80029ec <HAL_UART_GetState>
 800390a:	0003      	movs	r3, r0
 800390c:	2b22      	cmp	r3, #34	@ 0x22
 800390e:	d007      	beq.n	8003920 <ATC_TxWait+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0018      	movs	r0, r3
 8003916:	f7ff f869 	bl	80029ec <HAL_UART_GetState>
 800391a:	0003      	movs	r3, r0
 800391c:	2b20      	cmp	r3, #32
 800391e:	d104      	bne.n	800392a <ATC_TxWait+0x4a>
    {
      answer = true;
 8003920:	230f      	movs	r3, #15
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
      break;
 8003928:	e01c      	b.n	8003964 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	0018      	movs	r0, r3
 8003930:	f7ff f85c 	bl	80029ec <HAL_UART_GetState>
 8003934:	0003      	movs	r3, r0
 8003936:	2be0      	cmp	r3, #224	@ 0xe0
 8003938:	d014      	beq.n	8003964 <ATC_TxWait+0x84>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0018      	movs	r0, r3
 8003940:	f7ff f854 	bl	80029ec <HAL_UART_GetState>
 8003944:	0003      	movs	r3, r0
 8003946:	2ba0      	cmp	r3, #160	@ 0xa0
 8003948:	d00c      	beq.n	8003964 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800394a:	f7fd f87d 	bl	8000a48 <HAL_GetTick>
 800394e:	0002      	movs	r2, r0
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d8cf      	bhi.n	80038fa <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	f7fe fc28 	bl	80021b4 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bd80      	pop	{r7, pc}

08003972 <ATC_CheckResponse>:
}

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800397c:	230f      	movs	r3, #15
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8b1b      	ldrh	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d031      	beq.n	80039f0 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800398c:	230c      	movs	r3, #12
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2200      	movs	r2, #0
 8003992:	801a      	strh	r2, [r3, #0]
 8003994:	e025      	b.n	80039e2 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800399a:	230c      	movs	r3, #12
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	320a      	adds	r2, #10
 80039a4:	0092      	lsls	r2, r2, #2
 80039a6:	58d3      	ldr	r3, [r2, r3]
 80039a8:	0019      	movs	r1, r3
 80039aa:	f000 fb8f 	bl	80040cc <strstr>
 80039ae:	0003      	movs	r3, r0
 80039b0:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 80039c4:	230c      	movs	r3, #12
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	230f      	movs	r3, #15
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	3201      	adds	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
        break;
 80039d4:	e00c      	b.n	80039f0 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80039d6:	210c      	movs	r1, #12
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	3201      	adds	r2, #1
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8adb      	ldrh	r3, [r3, #22]
 80039e6:	220c      	movs	r2, #12
 80039e8:	18ba      	adds	r2, r7, r2
 80039ea:	8812      	ldrh	r2, [r2, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d3d2      	bcc.n	8003996 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 80039f0:	230f      	movs	r3, #15
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}

080039fe <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7ff f800 	bl	8002a10 <HAL_UART_GetError>
 8003a10:	1e03      	subs	r3, r0, #0
 8003a12:	d01f      	beq.n	8003a54 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4252      	negs	r2, r2
 8003a1e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fe fc2b 	bl	8002280 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69d9      	ldr	r1, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8a9b      	ldrh	r3, [r3, #20]
 8003a36:	001a      	movs	r2, r3
 8003a38:	f7ff fe6f 	bl	800371a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2104      	movs	r1, #4
 8003a50:	438a      	bics	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fe ffc7 	bl	80029ec <HAL_UART_GetState>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	2b22      	cmp	r3, #34	@ 0x22
 8003a62:	d027      	beq.n	8003ab4 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7fe ffbf 	bl	80029ec <HAL_UART_GetState>
 8003a6e:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8003a70:	2b23      	cmp	r3, #35	@ 0x23
 8003a72:	d01f      	beq.n	8003ab4 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4252      	negs	r2, r2
 8003a7e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7fe fbfb 	bl	8002280 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69d9      	ldr	r1, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8a9b      	ldrh	r3, [r3, #20]
 8003a96:	001a      	movs	r2, r3
 8003a98:	f7ff fe3f 	bl	800371a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2104      	movs	r1, #4
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
  }
}
 8003ab4:	46c0      	nop			@ (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	1dbb      	adds	r3, r7, #6
 8003aca:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8003acc:	2317      	movs	r3, #23
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d100      	bne.n	8003adc <ATC_Init+0x20>
 8003ada:	e07f      	b.n	8003bdc <ATC_Init+0x120>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d100      	bne.n	8003ae4 <ATC_Init+0x28>
 8003ae2:	e07b      	b.n	8003bdc <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	223c      	movs	r2, #60	@ 0x3c
 8003ae8:	2100      	movs	r1, #0
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 fad2 	bl	8004094 <memset>
    if (pName != NULL)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3304      	adds	r3, #4
 8003afa:	6839      	ldr	r1, [r7, #0]
 8003afc:	2207      	movs	r2, #7
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 fad0 	bl	80040a4 <strncpy>
    }
    hAtc->hUart = hUart;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8003b0a:	1dbb      	adds	r3, r7, #6
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7ff fe6b 	bl	80037ea <ATC_Malloc>
 8003b14:	0002      	movs	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d055      	beq.n	8003bce <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	69d8      	ldr	r0, [r3, #28]
 8003b26:	1dbb      	adds	r3, r7, #6
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	001a      	movs	r2, r3
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f000 fab1 	bl	8004094 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8003b32:	1dbb      	adds	r3, r7, #6
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7ff fe57 	bl	80037ea <ATC_Malloc>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d043      	beq.n	8003bd2 <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a18      	ldr	r0, [r3, #32]
 8003b4e:	1dbb      	adds	r3, r7, #6
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	001a      	movs	r2, r3
 8003b54:	2100      	movs	r1, #0
 8003b56:	f000 fa9d 	bl	8004094 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8003b5a:	1dbb      	adds	r3, r7, #6
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f7ff fe43 	bl	80037ea <ATC_Malloc>
 8003b64:	0002      	movs	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d031      	beq.n	8003bd6 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003b76:	1dbb      	adds	r3, r7, #6
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f000 fa89 	bl	8004094 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1dba      	adds	r2, r7, #6
 8003b86:	8812      	ldrh	r2, [r2, #0]
 8003b88:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2201      	movs	r2, #1
 8003b92:	4252      	negs	r2, r2
 8003b94:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	69d9      	ldr	r1, [r3, #28]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8a9b      	ldrh	r3, [r3, #20]
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	f7ff fdb9 	bl	800371a <HAL_UARTEx_ReceiveToIdle_DMA>
 8003ba8:	1e03      	subs	r3, r0, #0
 8003baa:	d116      	bne.n	8003bda <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	438a      	bics	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
    answer = true;
 8003bc4:	2317      	movs	r3, #23
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e006      	b.n	8003bdc <ATC_Init+0x120>
      break;
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	e004      	b.n	8003bdc <ATC_Init+0x120>
      break;
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	e002      	b.n	8003bdc <ATC_Init+0x120>
      break;
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	e000      	b.n	8003bdc <ATC_Init+0x120>
      break;
 8003bda:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8003bdc:	2317      	movs	r3, #23
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2201      	movs	r2, #1
 8003be4:	4053      	eors	r3, r2
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	331c      	adds	r3, #28
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff fe07 	bl	800380c <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3324      	adds	r3, #36	@ 0x24
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f7ff fdfe 	bl	800380c <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	223c      	movs	r2, #60	@ 0x3c
 8003c14:	2100      	movs	r1, #0
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 fa3c 	bl	8004094 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8003c1c:	2317      	movs	r3, #23
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	781b      	ldrb	r3, [r3, #0]
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b006      	add	sp, #24
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8003c2a:	b5b0      	push	{r4, r5, r7, lr}
 8003c2c:	b08c      	sub	sp, #48	@ 0x30
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff fe33 	bl	80038aa <ATC_TxBusy>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d002      	beq.n	8003c4e <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8003c48:	2304      	movs	r3, #4
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	e0e3      	b.n	8003e16 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8003c4e:	2344      	movs	r3, #68	@ 0x44
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d902      	bls.n	8003c5e <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8003c58:	2305      	movs	r3, #5
 8003c5a:	425b      	negs	r3, r3
 8003c5c:	e0db      	b.n	8003e16 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff fecc 	bl	80039fe <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8003c66:	2348      	movs	r3, #72	@ 0x48
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c70:	e051      	b.n	8003d16 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1d1a      	adds	r2, r3, #4
 8003c76:	617a      	str	r2, [r7, #20]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7fc fa40 	bl	8000104 <strlen>
 8003c84:	0003      	movs	r3, r0
 8003c86:	3301      	adds	r3, #1
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff fdae 	bl	80037ea <ATC_Malloc>
 8003c8e:	0001      	movs	r1, r0
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c94:	320a      	adds	r2, #10
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c9e:	320a      	adds	r2, #10
 8003ca0:	0092      	lsls	r2, r2, #2
 8003ca2:	58d3      	ldr	r3, [r2, r3]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11c      	bne.n	8003ce2 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8003ca8:	2327      	movs	r3, #39	@ 0x27
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e00e      	b.n	8003cd0 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8003cb2:	2427      	movs	r4, #39	@ 0x27
 8003cb4:	193b      	adds	r3, r7, r4
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	330a      	adds	r3, #10
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f7ff fda3 	bl	800380c <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	3201      	adds	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	2327      	movs	r3, #39	@ 0x27
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	dcea      	bgt.n	8003cb2 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	425b      	negs	r3, r3
 8003ce0:	e099      	b.n	8003e16 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ce6:	320a      	adds	r2, #10
 8003ce8:	0092      	lsls	r2, r2, #2
 8003cea:	58d3      	ldr	r3, [r2, r3]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	0011      	movs	r1, r2
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 fa3f 	bl	8004174 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cfa:	320a      	adds	r2, #10
 8003cfc:	0092      	lsls	r2, r2, #2
 8003cfe:	58d4      	ldr	r4, [r2, r3]
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7fc f9fe 	bl	8000104 <strlen>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	18e3      	adds	r3, r4, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	3301      	adds	r3, #1
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d16:	2344      	movs	r3, #68	@ 0x44
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	dba7      	blt.n	8003c72 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff fd88 	bl	800383a <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc f9e9 	bl	8000104 <strlen>
 8003d32:	0003      	movs	r3, r0
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fd90 	bl	8003860 <ATC_TxRaw>
 8003d40:	0003      	movs	r3, r0
 8003d42:	001a      	movs	r2, r3
 8003d44:	2301      	movs	r3, #1
 8003d46:	4053      	eors	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	425b      	negs	r3, r3
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003d54:	e010      	b.n	8003d78 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	0011      	movs	r1, r2
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff fdbf 	bl	80038e0 <ATC_TxWait>
 8003d62:	0003      	movs	r3, r0
 8003d64:	001a      	movs	r2, r3
 8003d66:	2301      	movs	r3, #1
 8003d68:	4053      	eors	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8003d70:	2302      	movs	r3, #2
 8003d72:	425b      	negs	r3, r3
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003d76:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8003d78:	2444      	movs	r4, #68	@ 0x44
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d029      	beq.n	8003dd6 <ATC_SendReceive+0x1ac>
 8003d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d126      	bne.n	8003dd6 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8003d88:	f7fc fe5e 	bl	8000a48 <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8003d9a:	e014      	b.n	8003dc6 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f000 f8a6 	bl	8003eee <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8003da2:	251f      	movs	r5, #31
 8003da4:	197c      	adds	r4, r7, r5
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	0011      	movs	r1, r2
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff fde0 	bl	8003972 <ATC_CheckResponse>
 8003db2:	0003      	movs	r3, r0
 8003db4:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8003db6:	197b      	adds	r3, r7, r5
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8003dbe:	197b      	adds	r3, r7, r5
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dc4:	e007      	b.n	8003dd6 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8003dc6:	f7fc fe3f 	bl	8000a48 <HAL_GetTick>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d8e2      	bhi.n	8003d9c <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8003ddc:	2326      	movs	r3, #38	@ 0x26
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e00e      	b.n	8003e04 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8003de6:	2426      	movs	r4, #38	@ 0x26
 8003de8:	193b      	adds	r3, r7, r4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	330a      	adds	r3, #10
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	18d3      	adds	r3, r2, r3
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7ff fd09 	bl	800380c <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	3201      	adds	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	2326      	movs	r3, #38	@ 0x26
 8003e06:	18fa      	adds	r2, r7, r3
 8003e08:	2344      	movs	r3, #68	@ 0x44
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	7812      	ldrb	r2, [r2, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d3e8      	bcc.n	8003de6 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b00c      	add	sp, #48	@ 0x30
 8003e1c:	bdb0      	pop	{r4, r5, r7, pc}

08003e1e <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	000a      	movs	r2, r1
 8003e28:	1cbb      	adds	r3, r7, #2
 8003e2a:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8003e2c:	1cbb      	adds	r3, r7, #2
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8a9b      	ldrh	r3, [r3, #20]
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8b1b      	ldrh	r3, [r3, #24]
 8003e3a:	1acb      	subs	r3, r1, r3
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dd06      	ble.n	8003e4e <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8a99      	ldrh	r1, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8b1a      	ldrh	r2, [r3, #24]
 8003e48:	1cbb      	adds	r3, r7, #2
 8003e4a:	1a8a      	subs	r2, r1, r2
 8003e4c:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	8b12      	ldrh	r2, [r2, #24]
 8003e56:	1898      	adds	r0, r3, r2
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	1cbb      	adds	r3, r7, #2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	001a      	movs	r2, r3
 8003e62:	f000 f98f 	bl	8004184 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8b1a      	ldrh	r2, [r3, #24]
 8003e6a:	1cbb      	adds	r3, r7, #2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	18d3      	adds	r3, r2, r3
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69d9      	ldr	r1, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8a9b      	ldrh	r3, [r3, #20]
 8003e82:	001a      	movs	r2, r3
 8003e84:	f7ff fc49 	bl	800371a <HAL_UARTEx_ReceiveToIdle_DMA>
 8003e88:	1e03      	subs	r3, r0, #0
 8003e8a:	d10c      	bne.n	8003ea6 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8003ea4:	e01f      	b.n	8003ee6 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4252      	negs	r2, r2
 8003eb0:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7fe f9e2 	bl	8002280 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69d9      	ldr	r1, [r3, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8a9b      	ldrh	r3, [r3, #20]
 8003ec8:	001a      	movs	r2, r3
 8003eca:	f7ff fc26 	bl	800371a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	438a      	bics	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}

08003eee <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fc fdaf 	bl	8000a5c <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b002      	add	sp, #8
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <malloc>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	4b03      	ldr	r3, [pc, #12]	@ (8003f18 <malloc+0x10>)
 8003f0c:	0001      	movs	r1, r0
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	f000 f830 	bl	8003f74 <_malloc_r>
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	2000000c 	.word	0x2000000c

08003f1c <free>:
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	4b03      	ldr	r3, [pc, #12]	@ (8003f2c <free+0x10>)
 8003f20:	0001      	movs	r1, r0
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	f000 f938 	bl	8004198 <_free_r>
 8003f28:	bd10      	pop	{r4, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	2000000c 	.word	0x2000000c

08003f30 <sbrk_aligned>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4e0f      	ldr	r6, [pc, #60]	@ (8003f70 <sbrk_aligned+0x40>)
 8003f34:	000d      	movs	r5, r1
 8003f36:	6831      	ldr	r1, [r6, #0]
 8003f38:	0004      	movs	r4, r0
 8003f3a:	2900      	cmp	r1, #0
 8003f3c:	d102      	bne.n	8003f44 <sbrk_aligned+0x14>
 8003f3e:	f000 f8db 	bl	80040f8 <_sbrk_r>
 8003f42:	6030      	str	r0, [r6, #0]
 8003f44:	0029      	movs	r1, r5
 8003f46:	0020      	movs	r0, r4
 8003f48:	f000 f8d6 	bl	80040f8 <_sbrk_r>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d103      	bne.n	8003f58 <sbrk_aligned+0x28>
 8003f50:	2501      	movs	r5, #1
 8003f52:	426d      	negs	r5, r5
 8003f54:	0028      	movs	r0, r5
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	2303      	movs	r3, #3
 8003f5a:	1cc5      	adds	r5, r0, #3
 8003f5c:	439d      	bics	r5, r3
 8003f5e:	42a8      	cmp	r0, r5
 8003f60:	d0f8      	beq.n	8003f54 <sbrk_aligned+0x24>
 8003f62:	1a29      	subs	r1, r5, r0
 8003f64:	0020      	movs	r0, r4
 8003f66:	f000 f8c7 	bl	80040f8 <_sbrk_r>
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d1f2      	bne.n	8003f54 <sbrk_aligned+0x24>
 8003f6e:	e7ef      	b.n	8003f50 <sbrk_aligned+0x20>
 8003f70:	20000254 	.word	0x20000254

08003f74 <_malloc_r>:
 8003f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f76:	2203      	movs	r2, #3
 8003f78:	1ccb      	adds	r3, r1, #3
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	0005      	movs	r5, r0
 8003f80:	001f      	movs	r7, r3
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d234      	bcs.n	8003ff0 <_malloc_r+0x7c>
 8003f86:	270c      	movs	r7, #12
 8003f88:	42b9      	cmp	r1, r7
 8003f8a:	d833      	bhi.n	8003ff4 <_malloc_r+0x80>
 8003f8c:	0028      	movs	r0, r5
 8003f8e:	f000 f871 	bl	8004074 <__malloc_lock>
 8003f92:	4e37      	ldr	r6, [pc, #220]	@ (8004070 <_malloc_r+0xfc>)
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	001c      	movs	r4, r3
 8003f98:	2c00      	cmp	r4, #0
 8003f9a:	d12f      	bne.n	8003ffc <_malloc_r+0x88>
 8003f9c:	0039      	movs	r1, r7
 8003f9e:	0028      	movs	r0, r5
 8003fa0:	f7ff ffc6 	bl	8003f30 <sbrk_aligned>
 8003fa4:	0004      	movs	r4, r0
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	d15f      	bne.n	800406a <_malloc_r+0xf6>
 8003faa:	6834      	ldr	r4, [r6, #0]
 8003fac:	9400      	str	r4, [sp, #0]
 8003fae:	9b00      	ldr	r3, [sp, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d14a      	bne.n	800404a <_malloc_r+0xd6>
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	d052      	beq.n	800405e <_malloc_r+0xea>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	0028      	movs	r0, r5
 8003fbc:	18e3      	adds	r3, r4, r3
 8003fbe:	9900      	ldr	r1, [sp, #0]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	f000 f899 	bl	80040f8 <_sbrk_r>
 8003fc6:	9b01      	ldr	r3, [sp, #4]
 8003fc8:	4283      	cmp	r3, r0
 8003fca:	d148      	bne.n	800405e <_malloc_r+0xea>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	0028      	movs	r0, r5
 8003fd0:	1aff      	subs	r7, r7, r3
 8003fd2:	0039      	movs	r1, r7
 8003fd4:	f7ff ffac 	bl	8003f30 <sbrk_aligned>
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d040      	beq.n	800405e <_malloc_r+0xea>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	6833      	ldr	r3, [r6, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	d133      	bne.n	8004052 <_malloc_r+0xde>
 8003fea:	9b00      	ldr	r3, [sp, #0]
 8003fec:	6033      	str	r3, [r6, #0]
 8003fee:	e019      	b.n	8004024 <_malloc_r+0xb0>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	dac9      	bge.n	8003f88 <_malloc_r+0x14>
 8003ff4:	230c      	movs	r3, #12
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ffc:	6821      	ldr	r1, [r4, #0]
 8003ffe:	1bc9      	subs	r1, r1, r7
 8004000:	d420      	bmi.n	8004044 <_malloc_r+0xd0>
 8004002:	290b      	cmp	r1, #11
 8004004:	d90a      	bls.n	800401c <_malloc_r+0xa8>
 8004006:	19e2      	adds	r2, r4, r7
 8004008:	6027      	str	r7, [r4, #0]
 800400a:	42a3      	cmp	r3, r4
 800400c:	d104      	bne.n	8004018 <_malloc_r+0xa4>
 800400e:	6032      	str	r2, [r6, #0]
 8004010:	6863      	ldr	r3, [r4, #4]
 8004012:	6011      	str	r1, [r2, #0]
 8004014:	6053      	str	r3, [r2, #4]
 8004016:	e005      	b.n	8004024 <_malloc_r+0xb0>
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	e7f9      	b.n	8004010 <_malloc_r+0x9c>
 800401c:	6862      	ldr	r2, [r4, #4]
 800401e:	42a3      	cmp	r3, r4
 8004020:	d10e      	bne.n	8004040 <_malloc_r+0xcc>
 8004022:	6032      	str	r2, [r6, #0]
 8004024:	0028      	movs	r0, r5
 8004026:	f000 f82d 	bl	8004084 <__malloc_unlock>
 800402a:	0020      	movs	r0, r4
 800402c:	2207      	movs	r2, #7
 800402e:	300b      	adds	r0, #11
 8004030:	1d23      	adds	r3, r4, #4
 8004032:	4390      	bics	r0, r2
 8004034:	1ac2      	subs	r2, r0, r3
 8004036:	4298      	cmp	r0, r3
 8004038:	d0df      	beq.n	8003ffa <_malloc_r+0x86>
 800403a:	1a1b      	subs	r3, r3, r0
 800403c:	50a3      	str	r3, [r4, r2]
 800403e:	e7dc      	b.n	8003ffa <_malloc_r+0x86>
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	e7ef      	b.n	8004024 <_malloc_r+0xb0>
 8004044:	0023      	movs	r3, r4
 8004046:	6864      	ldr	r4, [r4, #4]
 8004048:	e7a6      	b.n	8003f98 <_malloc_r+0x24>
 800404a:	9c00      	ldr	r4, [sp, #0]
 800404c:	6863      	ldr	r3, [r4, #4]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	e7ad      	b.n	8003fae <_malloc_r+0x3a>
 8004052:	001a      	movs	r2, r3
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	42a3      	cmp	r3, r4
 8004058:	d1fb      	bne.n	8004052 <_malloc_r+0xde>
 800405a:	2300      	movs	r3, #0
 800405c:	e7da      	b.n	8004014 <_malloc_r+0xa0>
 800405e:	230c      	movs	r3, #12
 8004060:	0028      	movs	r0, r5
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	f000 f80e 	bl	8004084 <__malloc_unlock>
 8004068:	e7c6      	b.n	8003ff8 <_malloc_r+0x84>
 800406a:	6007      	str	r7, [r0, #0]
 800406c:	e7da      	b.n	8004024 <_malloc_r+0xb0>
 800406e:	46c0      	nop			@ (mov r8, r8)
 8004070:	20000258 	.word	0x20000258

08004074 <__malloc_lock>:
 8004074:	b510      	push	{r4, lr}
 8004076:	4802      	ldr	r0, [pc, #8]	@ (8004080 <__malloc_lock+0xc>)
 8004078:	f000 f87a 	bl	8004170 <__retarget_lock_acquire_recursive>
 800407c:	bd10      	pop	{r4, pc}
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	20000398 	.word	0x20000398

08004084 <__malloc_unlock>:
 8004084:	b510      	push	{r4, lr}
 8004086:	4802      	ldr	r0, [pc, #8]	@ (8004090 <__malloc_unlock+0xc>)
 8004088:	f000 f873 	bl	8004172 <__retarget_lock_release_recursive>
 800408c:	bd10      	pop	{r4, pc}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	20000398 	.word	0x20000398

08004094 <memset>:
 8004094:	0003      	movs	r3, r0
 8004096:	1882      	adds	r2, r0, r2
 8004098:	4293      	cmp	r3, r2
 800409a:	d100      	bne.n	800409e <memset+0xa>
 800409c:	4770      	bx	lr
 800409e:	7019      	strb	r1, [r3, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	e7f9      	b.n	8004098 <memset+0x4>

080040a4 <strncpy>:
 80040a4:	0003      	movs	r3, r0
 80040a6:	b530      	push	{r4, r5, lr}
 80040a8:	001d      	movs	r5, r3
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	d006      	beq.n	80040bc <strncpy+0x18>
 80040ae:	780c      	ldrb	r4, [r1, #0]
 80040b0:	3a01      	subs	r2, #1
 80040b2:	3301      	adds	r3, #1
 80040b4:	702c      	strb	r4, [r5, #0]
 80040b6:	3101      	adds	r1, #1
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d1f5      	bne.n	80040a8 <strncpy+0x4>
 80040bc:	2100      	movs	r1, #0
 80040be:	189a      	adds	r2, r3, r2
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d100      	bne.n	80040c6 <strncpy+0x22>
 80040c4:	bd30      	pop	{r4, r5, pc}
 80040c6:	7019      	strb	r1, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	e7f9      	b.n	80040c0 <strncpy+0x1c>

080040cc <strstr>:
 80040cc:	780a      	ldrb	r2, [r1, #0]
 80040ce:	b530      	push	{r4, r5, lr}
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d10c      	bne.n	80040ee <strstr+0x22>
 80040d4:	bd30      	pop	{r4, r5, pc}
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d108      	bne.n	80040ec <strstr+0x20>
 80040da:	2301      	movs	r3, #1
 80040dc:	5ccc      	ldrb	r4, [r1, r3]
 80040de:	2c00      	cmp	r4, #0
 80040e0:	d0f8      	beq.n	80040d4 <strstr+0x8>
 80040e2:	5cc5      	ldrb	r5, [r0, r3]
 80040e4:	42a5      	cmp	r5, r4
 80040e6:	d101      	bne.n	80040ec <strstr+0x20>
 80040e8:	3301      	adds	r3, #1
 80040ea:	e7f7      	b.n	80040dc <strstr+0x10>
 80040ec:	3001      	adds	r0, #1
 80040ee:	7803      	ldrb	r3, [r0, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <strstr+0xa>
 80040f4:	0018      	movs	r0, r3
 80040f6:	e7ed      	b.n	80040d4 <strstr+0x8>

080040f8 <_sbrk_r>:
 80040f8:	2300      	movs	r3, #0
 80040fa:	b570      	push	{r4, r5, r6, lr}
 80040fc:	4d06      	ldr	r5, [pc, #24]	@ (8004118 <_sbrk_r+0x20>)
 80040fe:	0004      	movs	r4, r0
 8004100:	0008      	movs	r0, r1
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	f7fc fa78 	bl	80005f8 <_sbrk>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d103      	bne.n	8004114 <_sbrk_r+0x1c>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d000      	beq.n	8004114 <_sbrk_r+0x1c>
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	bd70      	pop	{r4, r5, r6, pc}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	20000394 	.word	0x20000394

0800411c <__errno>:
 800411c:	4b01      	ldr	r3, [pc, #4]	@ (8004124 <__errno+0x8>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	4770      	bx	lr
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	2000000c 	.word	0x2000000c

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	2600      	movs	r6, #0
 800412c:	4c0c      	ldr	r4, [pc, #48]	@ (8004160 <__libc_init_array+0x38>)
 800412e:	4d0d      	ldr	r5, [pc, #52]	@ (8004164 <__libc_init_array+0x3c>)
 8004130:	1b64      	subs	r4, r4, r5
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	42a6      	cmp	r6, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	2600      	movs	r6, #0
 800413a:	f000 f877 	bl	800422c <_init>
 800413e:	4c0a      	ldr	r4, [pc, #40]	@ (8004168 <__libc_init_array+0x40>)
 8004140:	4d0a      	ldr	r5, [pc, #40]	@ (800416c <__libc_init_array+0x44>)
 8004142:	1b64      	subs	r4, r4, r5
 8004144:	10a4      	asrs	r4, r4, #2
 8004146:	42a6      	cmp	r6, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	00b3      	lsls	r3, r6, #2
 800414e:	58eb      	ldr	r3, [r5, r3]
 8004150:	4798      	blx	r3
 8004152:	3601      	adds	r6, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	00b3      	lsls	r3, r6, #2
 8004158:	58eb      	ldr	r3, [r5, r3]
 800415a:	4798      	blx	r3
 800415c:	3601      	adds	r6, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	0800430c 	.word	0x0800430c
 8004164:	0800430c 	.word	0x0800430c
 8004168:	08004310 	.word	0x08004310
 800416c:	0800430c 	.word	0x0800430c

08004170 <__retarget_lock_acquire_recursive>:
 8004170:	4770      	bx	lr

08004172 <__retarget_lock_release_recursive>:
 8004172:	4770      	bx	lr

08004174 <strcpy>:
 8004174:	0003      	movs	r3, r0
 8004176:	780a      	ldrb	r2, [r1, #0]
 8004178:	3101      	adds	r1, #1
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	2a00      	cmp	r2, #0
 8004180:	d1f9      	bne.n	8004176 <strcpy+0x2>
 8004182:	4770      	bx	lr

08004184 <memcpy>:
 8004184:	2300      	movs	r3, #0
 8004186:	b510      	push	{r4, lr}
 8004188:	429a      	cmp	r2, r3
 800418a:	d100      	bne.n	800418e <memcpy+0xa>
 800418c:	bd10      	pop	{r4, pc}
 800418e:	5ccc      	ldrb	r4, [r1, r3]
 8004190:	54c4      	strb	r4, [r0, r3]
 8004192:	3301      	adds	r3, #1
 8004194:	e7f8      	b.n	8004188 <memcpy+0x4>
	...

08004198 <_free_r>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	0005      	movs	r5, r0
 800419c:	1e0c      	subs	r4, r1, #0
 800419e:	d010      	beq.n	80041c2 <_free_r+0x2a>
 80041a0:	3c04      	subs	r4, #4
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da00      	bge.n	80041aa <_free_r+0x12>
 80041a8:	18e4      	adds	r4, r4, r3
 80041aa:	0028      	movs	r0, r5
 80041ac:	f7ff ff62 	bl	8004074 <__malloc_lock>
 80041b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004228 <_free_r+0x90>)
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <_free_r+0x2c>
 80041b8:	6063      	str	r3, [r4, #4]
 80041ba:	6014      	str	r4, [r2, #0]
 80041bc:	0028      	movs	r0, r5
 80041be:	f7ff ff61 	bl	8004084 <__malloc_unlock>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d908      	bls.n	80041da <_free_r+0x42>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	1821      	adds	r1, r4, r0
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d1f3      	bne.n	80041b8 <_free_r+0x20>
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	1809      	adds	r1, r1, r0
 80041d6:	6021      	str	r1, [r4, #0]
 80041d8:	e7ee      	b.n	80041b8 <_free_r+0x20>
 80041da:	001a      	movs	r2, r3
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <_free_r+0x4e>
 80041e2:	42a3      	cmp	r3, r4
 80041e4:	d9f9      	bls.n	80041da <_free_r+0x42>
 80041e6:	6811      	ldr	r1, [r2, #0]
 80041e8:	1850      	adds	r0, r2, r1
 80041ea:	42a0      	cmp	r0, r4
 80041ec:	d10b      	bne.n	8004206 <_free_r+0x6e>
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1809      	adds	r1, r1, r0
 80041f2:	1850      	adds	r0, r2, r1
 80041f4:	6011      	str	r1, [r2, #0]
 80041f6:	4283      	cmp	r3, r0
 80041f8:	d1e0      	bne.n	80041bc <_free_r+0x24>
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	1841      	adds	r1, r0, r1
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	6053      	str	r3, [r2, #4]
 8004204:	e7da      	b.n	80041bc <_free_r+0x24>
 8004206:	42a0      	cmp	r0, r4
 8004208:	d902      	bls.n	8004210 <_free_r+0x78>
 800420a:	230c      	movs	r3, #12
 800420c:	602b      	str	r3, [r5, #0]
 800420e:	e7d5      	b.n	80041bc <_free_r+0x24>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	1821      	adds	r1, r4, r0
 8004214:	428b      	cmp	r3, r1
 8004216:	d103      	bne.n	8004220 <_free_r+0x88>
 8004218:	6819      	ldr	r1, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	1809      	adds	r1, r1, r0
 800421e:	6021      	str	r1, [r4, #0]
 8004220:	6063      	str	r3, [r4, #4]
 8004222:	6054      	str	r4, [r2, #4]
 8004224:	e7ca      	b.n	80041bc <_free_r+0x24>
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	20000258 	.word	0x20000258

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
