
STM32_Uart_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080042b0  080042b0  000052b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  0800438c  0800438c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800438c  0800438c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004390  08004390  00005390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004394  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000005c  080043f0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000039c  080043f0  0000639c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a961  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d6  00000000  00000000  000109e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00012ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000649  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ab  00000000  00000000  00013951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc71  00000000  00000000  0002ecfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e3c  00000000  00000000  0003b96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc7a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  000dc7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000de6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004298 	.word	0x08004298

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004298 	.word	0x08004298

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000232:	4b10      	ldr	r3, [pc, #64]	@ (8000274 <MX_DMA_Init+0x48>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <MX_DMA_Init+0x48>)
 8000238:	2101      	movs	r1, #1
 800023a:	430a      	orrs	r2, r1
 800023c:	615a      	str	r2, [r3, #20]
 800023e:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <MX_DMA_Init+0x48>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	2201      	movs	r2, #1
 8000244:	4013      	ands	r3, r2
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	2009      	movs	r0, #9
 8000250:	f000 fd0a 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000254:	2009      	movs	r0, #9
 8000256:	f000 fd1c 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800025a:	2200      	movs	r2, #0
 800025c:	2100      	movs	r1, #0
 800025e:	200a      	movs	r0, #10
 8000260:	f000 fd02 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000264:	200a      	movs	r0, #10
 8000266:	f000 fd14 	bl	8000c92 <HAL_NVIC_EnableIRQ>

}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	40021000 	.word	0x40021000

08000278 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b089      	sub	sp, #36	@ 0x24
 800027c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027e:	240c      	movs	r4, #12
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2314      	movs	r3, #20
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f003 ff39 	bl	8004100 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	4b2d      	ldr	r3, [pc, #180]	@ (8000344 <MX_GPIO_Init+0xcc>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	4b2c      	ldr	r3, [pc, #176]	@ (8000344 <MX_GPIO_Init+0xcc>)
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0309      	lsls	r1, r1, #12
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	4b29      	ldr	r3, [pc, #164]	@ (8000344 <MX_GPIO_Init+0xcc>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	031b      	lsls	r3, r3, #12
 80002a4:	4013      	ands	r3, r2
 80002a6:	60bb      	str	r3, [r7, #8]
 80002a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002aa:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b25      	ldr	r3, [pc, #148]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002b0:	2180      	movs	r1, #128	@ 0x80
 80002b2:	03c9      	lsls	r1, r1, #15
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	2380      	movs	r3, #128	@ 0x80
 80002be:	03db      	lsls	r3, r3, #15
 80002c0:	4013      	ands	r3, r2
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002c8:	695a      	ldr	r2, [r3, #20]
 80002ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002cc:	2180      	movs	r1, #128	@ 0x80
 80002ce:	0289      	lsls	r1, r1, #10
 80002d0:	430a      	orrs	r2, r1
 80002d2:	615a      	str	r2, [r3, #20]
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <MX_GPIO_Init+0xcc>)
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	029b      	lsls	r3, r3, #10
 80002dc:	4013      	ands	r3, r2
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e2:	2390      	movs	r3, #144	@ 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2200      	movs	r2, #0
 80002e8:	2120      	movs	r1, #32
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 f8a4 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2280      	movs	r2, #128	@ 0x80
 80002f4:	0192      	lsls	r2, r2, #6
 80002f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2284      	movs	r2, #132	@ 0x84
 80002fc:	0392      	lsls	r2, r2, #14
 80002fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000300:	193b      	adds	r3, r7, r4
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000306:	193b      	adds	r3, r7, r4
 8000308:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <MX_GPIO_Init+0xd0>)
 800030a:	0019      	movs	r1, r3
 800030c:	0010      	movs	r0, r2
 800030e:	f000 ff1b 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000312:	0021      	movs	r1, r4
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2220      	movs	r2, #32
 8000318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032c:	187a      	adds	r2, r7, r1
 800032e:	2390      	movs	r3, #144	@ 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f000 ff07 	bl	8001148 <HAL_GPIO_Init>

}
 800033a:	46c0      	nop			@ (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b009      	add	sp, #36	@ 0x24
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800

0800034c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	000a      	movs	r2, r1
 8000356:	1cbb      	adds	r3, r7, #2
 8000358:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART3)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a07      	ldr	r2, [pc, #28]	@ (800037c <HAL_UARTEx_RxEventCallback+0x30>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&esp32, Size);
 8000364:	1cbb      	adds	r3, r7, #2
 8000366:	881a      	ldrh	r2, [r3, #0]
 8000368:	4b05      	ldr	r3, [pc, #20]	@ (8000380 <HAL_UARTEx_RxEventCallback+0x34>)
 800036a:	0011      	movs	r1, r2
 800036c:	0018      	movs	r0, r3
 800036e:	f003 fd8c 	bl	8003e8a <ATC_IdleLineCallback>
	}
}
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	40004800 	.word	0x40004800
 8000380:	20000100 	.word	0x20000100

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038a:	f000 fb39 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038e:	f000 f899 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000392:	f7ff ff71 	bl	8000278 <MX_GPIO_Init>
  MX_DMA_Init();
 8000396:	f7ff ff49 	bl	800022c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800039a:	f000 f99f 	bl	80006dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800039e:	f000 f9cd 	bl	800073c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // ATC yapılandırmasını başlat
  ATC_Init(&esp32, &huart3, RX_BUFFER_SIZE, "ESP32");
 80003a2:	4b39      	ldr	r3, [pc, #228]	@ (8000488 <main+0x104>)
 80003a4:	2280      	movs	r2, #128	@ 0x80
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	4938      	ldr	r1, [pc, #224]	@ (800048c <main+0x108>)
 80003aa:	4839      	ldr	r0, [pc, #228]	@ (8000490 <main+0x10c>)
 80003ac:	f003 fbbc 	bl	8003b28 <ATC_Init>
  // Wi-Fi Bağlantısı Kurma
  ATC_SendReceive(&esp32, "AT+RST\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80003b0:	4938      	ldr	r1, [pc, #224]	@ (8000494 <main+0x110>)
 80003b2:	4837      	ldr	r0, [pc, #220]	@ (8000490 <main+0x10c>)
 80003b4:	4b38      	ldr	r3, [pc, #224]	@ (8000498 <main+0x114>)
 80003b6:	9303      	str	r3, [sp, #12]
 80003b8:	4b38      	ldr	r3, [pc, #224]	@ (800049c <main+0x118>)
 80003ba:	9302      	str	r3, [sp, #8]
 80003bc:	2302      	movs	r3, #2
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	2364      	movs	r3, #100	@ 0x64
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2300      	movs	r3, #0
 80003c6:	2264      	movs	r2, #100	@ 0x64
 80003c8:	f003 fc65 	bl	8003c96 <ATC_SendReceive>
  HAL_Delay(3000);
 80003cc:	4b34      	ldr	r3, [pc, #208]	@ (80004a0 <main+0x11c>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fb7a 	bl	8000ac8 <HAL_Delay>
  ATC_SendReceive(&esp32, "AT+CWQAP\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80003d4:	4933      	ldr	r1, [pc, #204]	@ (80004a4 <main+0x120>)
 80003d6:	482e      	ldr	r0, [pc, #184]	@ (8000490 <main+0x10c>)
 80003d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000498 <main+0x114>)
 80003da:	9303      	str	r3, [sp, #12]
 80003dc:	4b2f      	ldr	r3, [pc, #188]	@ (800049c <main+0x118>)
 80003de:	9302      	str	r3, [sp, #8]
 80003e0:	2302      	movs	r3, #2
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	2364      	movs	r3, #100	@ 0x64
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2300      	movs	r3, #0
 80003ea:	2264      	movs	r2, #100	@ 0x64
 80003ec:	f003 fc53 	bl	8003c96 <ATC_SendReceive>
  HAL_Delay(3000);
 80003f0:	4b2b      	ldr	r3, [pc, #172]	@ (80004a0 <main+0x11c>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fb68 	bl	8000ac8 <HAL_Delay>
  ATC_SendReceive(&esp32, "AT+CWSTATE?\r\n", 100, NULL, 100, 3, "\r\n0\r\n", "\r\n1\r\n", "\r\n2\r\n");
 80003f8:	492b      	ldr	r1, [pc, #172]	@ (80004a8 <main+0x124>)
 80003fa:	4825      	ldr	r0, [pc, #148]	@ (8000490 <main+0x10c>)
 80003fc:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <main+0x128>)
 80003fe:	9304      	str	r3, [sp, #16]
 8000400:	4b2b      	ldr	r3, [pc, #172]	@ (80004b0 <main+0x12c>)
 8000402:	9303      	str	r3, [sp, #12]
 8000404:	4b2b      	ldr	r3, [pc, #172]	@ (80004b4 <main+0x130>)
 8000406:	9302      	str	r3, [sp, #8]
 8000408:	2303      	movs	r3, #3
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2364      	movs	r3, #100	@ 0x64
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2300      	movs	r3, #0
 8000412:	2264      	movs	r2, #100	@ 0x64
 8000414:	f003 fc3f 	bl	8003c96 <ATC_SendReceive>
  HAL_Delay(3000);
 8000418:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <main+0x11c>)
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fb54 	bl	8000ac8 <HAL_Delay>
  ATC_SendReceive(&esp32, "AT+CWMODE=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8000420:	4925      	ldr	r1, [pc, #148]	@ (80004b8 <main+0x134>)
 8000422:	481b      	ldr	r0, [pc, #108]	@ (8000490 <main+0x10c>)
 8000424:	4b1c      	ldr	r3, [pc, #112]	@ (8000498 <main+0x114>)
 8000426:	9303      	str	r3, [sp, #12]
 8000428:	4b1c      	ldr	r3, [pc, #112]	@ (800049c <main+0x118>)
 800042a:	9302      	str	r3, [sp, #8]
 800042c:	2302      	movs	r3, #2
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	2364      	movs	r3, #100	@ 0x64
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2300      	movs	r3, #0
 8000436:	2264      	movs	r2, #100	@ 0x64
 8000438:	f003 fc2d 	bl	8003c96 <ATC_SendReceive>
  HAL_Delay(3000);
 800043c:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <main+0x11c>)
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fb42 	bl	8000ac8 <HAL_Delay>
  ATC_SendReceive(&esp32, "AT+CWJAP=\"FiberHGW_ZYB82A\",\"N3THkAdYRCPF\"\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8000444:	491d      	ldr	r1, [pc, #116]	@ (80004bc <main+0x138>)
 8000446:	4812      	ldr	r0, [pc, #72]	@ (8000490 <main+0x10c>)
 8000448:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <main+0x114>)
 800044a:	9303      	str	r3, [sp, #12]
 800044c:	4b13      	ldr	r3, [pc, #76]	@ (800049c <main+0x118>)
 800044e:	9302      	str	r3, [sp, #8]
 8000450:	2302      	movs	r3, #2
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	2364      	movs	r3, #100	@ 0x64
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2300      	movs	r3, #0
 800045a:	2264      	movs	r2, #100	@ 0x64
 800045c:	f003 fc1b 	bl	8003c96 <ATC_SendReceive>
  HAL_Delay(3000);
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <main+0x11c>)
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fb30 	bl	8000ac8 <HAL_Delay>
  ATC_SendReceive(&esp32, "AT+CWJAP?\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8000468:	4915      	ldr	r1, [pc, #84]	@ (80004c0 <main+0x13c>)
 800046a:	4809      	ldr	r0, [pc, #36]	@ (8000490 <main+0x10c>)
 800046c:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <main+0x114>)
 800046e:	9303      	str	r3, [sp, #12]
 8000470:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <main+0x118>)
 8000472:	9302      	str	r3, [sp, #8]
 8000474:	2302      	movs	r3, #2
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	2364      	movs	r3, #100	@ 0x64
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	2300      	movs	r3, #0
 800047e:	2264      	movs	r2, #100	@ 0x64
 8000480:	f003 fc09 	bl	8003c96 <ATC_SendReceive>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000484:	46c0      	nop			@ (mov r8, r8)
 8000486:	e7fd      	b.n	8000484 <main+0x100>
 8000488:	080042b0 	.word	0x080042b0
 800048c:	20000078 	.word	0x20000078
 8000490:	20000100 	.word	0x20000100
 8000494:	080042b8 	.word	0x080042b8
 8000498:	080042c4 	.word	0x080042c4
 800049c:	080042d0 	.word	0x080042d0
 80004a0:	00000bb8 	.word	0x00000bb8
 80004a4:	080042d8 	.word	0x080042d8
 80004a8:	080042e4 	.word	0x080042e4
 80004ac:	080042f4 	.word	0x080042f4
 80004b0:	080042fc 	.word	0x080042fc
 80004b4:	08004304 	.word	0x08004304
 80004b8:	0800430c 	.word	0x0800430c
 80004bc:	0800431c 	.word	0x0800431c
 80004c0:	08004348 	.word	0x08004348

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b099      	sub	sp, #100	@ 0x64
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	242c      	movs	r4, #44	@ 0x2c
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2334      	movs	r3, #52	@ 0x34
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f003 fe13 	bl	8004100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004da:	231c      	movs	r3, #28
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	2310      	movs	r3, #16
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f003 fe0b 	bl	8004100 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	231c      	movs	r3, #28
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f003 fe04 	bl	8004100 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2202      	movs	r2, #2
 80004fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2210      	movs	r2, #16
 800050a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2202      	movs	r2, #2
 8000510:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	0212      	lsls	r2, r2, #8
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	22a0      	movs	r2, #160	@ 0xa0
 800051e:	0392      	lsls	r2, r2, #14
 8000520:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	187b      	adds	r3, r7, r1
 800052a:	0018      	movs	r0, r3
 800052c:	f000 ffa2 	bl	8001474 <HAL_RCC_OscConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000534:	f000 f82e 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	211c      	movs	r1, #28
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2207      	movs	r2, #7
 800053e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2202      	movs	r2, #2
 8000544:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2101      	movs	r1, #1
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fb12 	bl	8001b80 <HAL_RCC_ClockConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000560:	f000 f818 	bl	8000594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 8000564:	003b      	movs	r3, r7
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <SystemClock_Config+0xcc>)
 8000568:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fc6d 	bl	8001e58 <HAL_RCCEx_PeriphCLKConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000582:	f000 f807 	bl	8000594 <Error_Handler>
  }
}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b019      	add	sp, #100	@ 0x64
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	00040002 	.word	0x00040002

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <HAL_MspInit+0x44>)
 80005a8:	699a      	ldr	r2, [r3, #24]
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <HAL_MspInit+0x44>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	619a      	str	r2, [r3, #24]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_MspInit+0x44>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <HAL_MspInit+0x44>)
 80005c0:	69da      	ldr	r2, [r3, #28]
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <HAL_MspInit+0x44>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	0549      	lsls	r1, r1, #21
 80005c8:	430a      	orrs	r2, r1
 80005ca:	61da      	str	r2, [r3, #28]
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <HAL_MspInit+0x44>)
 80005ce:	69da      	ldr	r2, [r3, #28]
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	055b      	lsls	r3, r3, #21
 80005d4:	4013      	ands	r3, r2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	e7fd      	b.n	80005ec <NMI_Handler+0x4>

080005f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	e7fd      	b.n	80005f4 <HardFault_Handler+0x4>

080005f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 fa3e 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000620:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <DMA1_Ch1_IRQHandler+0x14>)
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fc7d 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	200001c8 	.word	0x200001c8

08000634 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000638:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fc71 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000640:	46c0      	nop			@ (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	2000020c 	.word	0x2000020c

0800064c <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);(&huart3);
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <USART3_8_IRQHandler+0x14>)
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fef8 	bl	8002448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	20000078 	.word	0x20000078

08000664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800066c:	4a14      	ldr	r2, [pc, #80]	@ (80006c0 <_sbrk+0x5c>)
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <_sbrk+0x60>)
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <_sbrk+0x64>)
 8000682:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <_sbrk+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	429a      	cmp	r2, r3
 8000692:	d207      	bcs.n	80006a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000694:	f003 fd78 	bl	8004188 <__errno>
 8000698:	0003      	movs	r3, r0
 800069a:	220c      	movs	r2, #12
 800069c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069e:	2301      	movs	r3, #1
 80006a0:	425b      	negs	r3, r3
 80006a2:	e009      	b.n	80006b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006aa:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	18d2      	adds	r2, r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <_sbrk+0x64>)
 80006b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006b6:	68fb      	ldr	r3, [r7, #12]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b006      	add	sp, #24
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20008000 	.word	0x20008000
 80006c4:	00000400 	.word	0x00000400
 80006c8:	2000013c 	.word	0x2000013c
 80006cc:	200003a0 	.word	0x200003a0

080006d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <MX_USART2_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006e8:	22e1      	movs	r2, #225	@ 0xe1
 80006ea:	0252      	lsls	r2, r2, #9
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fc99 	bl	8002058 <HAL_UART_Init>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f7ff ff33 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000140 	.word	0x20000140
 8000738:	40004400 	.word	0x40004400

0800073c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <MX_USART3_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000748:	22e1      	movs	r2, #225	@ 0xe1
 800074a:	0252      	lsls	r2, r2, #9
 800074c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077e:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <MX_USART3_UART_Init+0x58>)
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fc69 	bl	8002058 <HAL_UART_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f7ff ff03 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000078 	.word	0x20000078
 8000798:	40004800 	.word	0x40004800

0800079c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08d      	sub	sp, #52	@ 0x34
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	241c      	movs	r4, #28
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f003 fca6 	bl	8004100 <memset>
  if(uartHandle->Instance==USART2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a73      	ldr	r2, [pc, #460]	@ (8000988 <HAL_UART_MspInit+0x1ec>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d133      	bne.n	8000826 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007be:	4b73      	ldr	r3, [pc, #460]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 80007c0:	69da      	ldr	r2, [r3, #28]
 80007c2:	4b72      	ldr	r3, [pc, #456]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	0289      	lsls	r1, r1, #10
 80007c8:	430a      	orrs	r2, r1
 80007ca:	61da      	str	r2, [r3, #28]
 80007cc:	4b6f      	ldr	r3, [pc, #444]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 80007ce:	69da      	ldr	r2, [r3, #28]
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	029b      	lsls	r3, r3, #10
 80007d4:	4013      	ands	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b6c      	ldr	r3, [pc, #432]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	4b6b      	ldr	r3, [pc, #428]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	0289      	lsls	r1, r1, #10
 80007e4:	430a      	orrs	r2, r1
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	4b68      	ldr	r3, [pc, #416]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 80007ea:	695a      	ldr	r2, [r3, #20]
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	029b      	lsls	r3, r3, #10
 80007f0:	4013      	ands	r3, r2
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f6:	0021      	movs	r1, r4
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2202      	movs	r2, #2
 8000802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2201      	movs	r2, #1
 8000814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	187a      	adds	r2, r7, r1
 8000818:	2390      	movs	r3, #144	@ 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fc92 	bl	8001148 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000824:	e0ab      	b.n	800097e <HAL_UART_MspInit+0x1e2>
  else if(uartHandle->Instance==USART3)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a59      	ldr	r2, [pc, #356]	@ (8000990 <HAL_UART_MspInit+0x1f4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d000      	beq.n	8000832 <HAL_UART_MspInit+0x96>
 8000830:	e0a5      	b.n	800097e <HAL_UART_MspInit+0x1e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000832:	4b56      	ldr	r3, [pc, #344]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 8000834:	69da      	ldr	r2, [r3, #28]
 8000836:	4b55      	ldr	r3, [pc, #340]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	02c9      	lsls	r1, r1, #11
 800083c:	430a      	orrs	r2, r1
 800083e:	61da      	str	r2, [r3, #28]
 8000840:	4b52      	ldr	r3, [pc, #328]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 8000842:	69da      	ldr	r2, [r3, #28]
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	02db      	lsls	r3, r3, #11
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b4f      	ldr	r3, [pc, #316]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b4e      	ldr	r3, [pc, #312]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	0309      	lsls	r1, r1, #12
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b4b      	ldr	r3, [pc, #300]	@ (800098c <HAL_UART_MspInit+0x1f0>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	031b      	lsls	r3, r3, #12
 8000864:	4013      	ands	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800086a:	211c      	movs	r1, #28
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2230      	movs	r2, #48	@ 0x30
 8000870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2203      	movs	r2, #3
 8000882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2201      	movs	r2, #1
 8000888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	187b      	adds	r3, r7, r1
 800088c:	4a41      	ldr	r2, [pc, #260]	@ (8000994 <HAL_UART_MspInit+0x1f8>)
 800088e:	0019      	movs	r1, r3
 8000890:	0010      	movs	r0, r2
 8000892:	f000 fc59 	bl	8001148 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000896:	4b40      	ldr	r3, [pc, #256]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 8000898:	4a40      	ldr	r2, [pc, #256]	@ (800099c <HAL_UART_MspInit+0x200>)
 800089a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089c:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b4:	4b38      	ldr	r3, [pc, #224]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80008ba:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f9ff 	bl	8000ccc <HAL_DMA_Init>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 80008d2:	f7ff fe5f 	bl	8000594 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 80008d6:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 80008d8:	23a8      	movs	r3, #168	@ 0xa8
 80008da:	58d3      	ldr	r3, [r2, r3]
 80008dc:	4930      	ldr	r1, [pc, #192]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 80008de:	220f      	movs	r2, #15
 80008e0:	4393      	bics	r3, r2
 80008e2:	22a8      	movs	r2, #168	@ 0xa8
 80008e4:	508b      	str	r3, [r1, r2]
 80008e6:	4a2e      	ldr	r2, [pc, #184]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 80008e8:	23a8      	movs	r3, #168	@ 0xa8
 80008ea:	58d3      	ldr	r3, [r2, r3]
 80008ec:	492c      	ldr	r1, [pc, #176]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 80008ee:	220a      	movs	r2, #10
 80008f0:	4313      	orrs	r3, r2
 80008f2:	22a8      	movs	r2, #168	@ 0xa8
 80008f4:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a27      	ldr	r2, [pc, #156]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_UART_MspInit+0x1fc>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000902:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 8000904:	4a28      	ldr	r2, [pc, #160]	@ (80009a8 <HAL_UART_MspInit+0x20c>)
 8000906:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000908:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 800090a:	2210      	movs	r2, #16
 800090c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000920:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000926:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800092c:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 8000934:	0018      	movs	r0, r3
 8000936:	f000 f9c9 	bl	8000ccc <HAL_DMA_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800093e:	f7ff fe29 	bl	8000594 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 8000944:	23a8      	movs	r3, #168	@ 0xa8
 8000946:	58d3      	ldr	r3, [r2, r3]
 8000948:	4915      	ldr	r1, [pc, #84]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 800094a:	22f0      	movs	r2, #240	@ 0xf0
 800094c:	4393      	bics	r3, r2
 800094e:	22a8      	movs	r2, #168	@ 0xa8
 8000950:	508b      	str	r3, [r1, r2]
 8000952:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 8000954:	23a8      	movs	r3, #168	@ 0xa8
 8000956:	58d3      	ldr	r3, [r2, r3]
 8000958:	4911      	ldr	r1, [pc, #68]	@ (80009a0 <HAL_UART_MspInit+0x204>)
 800095a:	22a0      	movs	r2, #160	@ 0xa0
 800095c:	4313      	orrs	r3, r2
 800095e:	22a8      	movs	r2, #168	@ 0xa8
 8000960:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 8000966:	671a      	str	r2, [r3, #112]	@ 0x70
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_UART_MspInit+0x208>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	201d      	movs	r0, #29
 8000974:	f000 f978 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000978:	201d      	movs	r0, #29
 800097a:	f000 f98a 	bl	8000c92 <HAL_NVIC_EnableIRQ>
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b00d      	add	sp, #52	@ 0x34
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40004400 	.word	0x40004400
 800098c:	40021000 	.word	0x40021000
 8000990:	40004800 	.word	0x40004800
 8000994:	48000800 	.word	0x48000800
 8000998:	200001c8 	.word	0x200001c8
 800099c:	40020008 	.word	0x40020008
 80009a0:	40020000 	.word	0x40020000
 80009a4:	2000020c 	.word	0x2000020c
 80009a8:	4002001c 	.word	0x4002001c

080009ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ac:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b0:	f7ff fe8e 	bl	80006d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009da:	f003 fbdb 	bl	8004194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff fcd1 	bl	8000384 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   r0, =_estack
 80009e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009f0:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 80009f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009f8:	2000039c 	.word	0x2000039c

080009fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_COMP_IRQHandler>
	...

08000a00 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <HAL_Init+0x24>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_Init+0x24>)
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f809 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a16:	f7ff fdc3 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <HAL_InitTick+0x5c>)
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <HAL_InitTick+0x60>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	0019      	movs	r1, r3
 8000a3a:	23fa      	movs	r3, #250	@ 0xfa
 8000a3c:	0098      	lsls	r0, r3, #2
 8000a3e:	f7ff fb69 	bl	8000114 <__udivsi3>
 8000a42:	0003      	movs	r3, r0
 8000a44:	0019      	movs	r1, r3
 8000a46:	0020      	movs	r0, r4
 8000a48:	f7ff fb64 	bl	8000114 <__udivsi3>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 f92f 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e00f      	b.n	8000a7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d80b      	bhi.n	8000a7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	2301      	movs	r3, #1
 8000a66:	425b      	negs	r3, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f8fc 	bl	8000c68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_InitTick+0x64>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b003      	add	sp, #12
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	001a      	movs	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	18d2      	adds	r2, r2, r3
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000250 	.word	0x20000250

08000ab4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	@ (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	20000250 	.word	0x20000250

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_Delay+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	189b      	adds	r3, r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	0002      	movs	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000008 	.word	0x20000008

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	0002      	movs	r2, r0
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b22:	d809      	bhi.n	8000b38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	001a      	movs	r2, r3
 8000b2a:	231f      	movs	r3, #31
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <__NVIC_EnableIRQ+0x30>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	4091      	lsls	r1, r2
 8000b34:	000a      	movs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
  }
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b58:	d828      	bhi.n	8000bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c18 <__NVIC_SetPriority+0xd4>)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	33c0      	adds	r3, #192	@ 0xc0
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	589b      	ldr	r3, [r3, r2]
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	0011      	movs	r1, r2
 8000b70:	2203      	movs	r2, #3
 8000b72:	400a      	ands	r2, r1
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	21ff      	movs	r1, #255	@ 0xff
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	401a      	ands	r2, r3
 8000b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	22ff      	movs	r2, #255	@ 0xff
 8000b88:	401a      	ands	r2, r3
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2303      	movs	r3, #3
 8000b92:	4003      	ands	r3, r0
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b98:	481f      	ldr	r0, [pc, #124]	@ (8000c18 <__NVIC_SetPriority+0xd4>)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	33c0      	adds	r3, #192	@ 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000baa:	e031      	b.n	8000c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <__NVIC_SetPriority+0xd8>)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	3b08      	subs	r3, #8
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3306      	adds	r3, #6
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1dfa      	adds	r2, r7, #7
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	0011      	movs	r1, r2
 8000bcc:	2203      	movs	r2, #3
 8000bce:	400a      	ands	r2, r1
 8000bd0:	00d2      	lsls	r2, r2, #3
 8000bd2:	21ff      	movs	r1, #255	@ 0xff
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	401a      	ands	r2, r3
 8000bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	22ff      	movs	r2, #255	@ 0xff
 8000be4:	401a      	ands	r2, r3
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	2303      	movs	r3, #3
 8000bee:	4003      	ands	r3, r0
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <__NVIC_SetPriority+0xd8>)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001c      	movs	r4, r3
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	4023      	ands	r3, r4
 8000c00:	3b08      	subs	r3, #8
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	430a      	orrs	r2, r1
 8000c06:	3306      	adds	r3, #6
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	18c3      	adds	r3, r0, r3
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	1e5a      	subs	r2, r3, #1
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	045b      	lsls	r3, r3, #17
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d301      	bcc.n	8000c38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c34:	2301      	movs	r3, #1
 8000c36:	e010      	b.n	8000c5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <SysTick_Config+0x44>)
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2103      	movs	r1, #3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff ff7c 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <SysTick_Config+0x44>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <SysTick_Config+0x44>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	210f      	movs	r1, #15
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	1c02      	adds	r2, r0, #0
 8000c78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	0002      	movs	r2, r0
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff33 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ffaf 	bl	8000c20 <SysTick_Config>
 8000cc2:	0003      	movs	r3, r0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e036      	b.n	8000d50 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2221      	movs	r2, #33	@ 0x21
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_DMA_Init+0x8c>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f9ce 	bl	80010d4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2221      	movs	r2, #33	@ 0x21
 8000d42:	2101      	movs	r1, #1
 8000d44:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2220      	movs	r2, #32
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b004      	add	sp, #16
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	ffffc00f 	.word	0xffffc00f

08000d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6a:	2317      	movs	r3, #23
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2220      	movs	r2, #32
 8000d76:	5c9b      	ldrb	r3, [r3, r2]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <HAL_DMA_Start_IT+0x24>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e04f      	b.n	8000e20 <HAL_DMA_Start_IT+0xc4>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2220      	movs	r2, #32
 8000d84:	2101      	movs	r1, #1
 8000d86:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2221      	movs	r2, #33	@ 0x21
 8000d8c:	5c9b      	ldrb	r3, [r3, r2]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d13a      	bne.n	8000e0a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2221      	movs	r2, #33	@ 0x21
 8000d98:	2102      	movs	r1, #2
 8000d9a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	438a      	bics	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f000 f95e 	bl	800107a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d008      	beq.n	8000dd8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	210e      	movs	r1, #14
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e00f      	b.n	8000df8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	210a      	movs	r1, #10
 8000de4:	430a      	orrs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2104      	movs	r1, #4
 8000df4:	438a      	bics	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e007      	b.n	8000e1a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	2100      	movs	r1, #0
 8000e10:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e12:	2317      	movs	r3, #23
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2202      	movs	r2, #2
 8000e18:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000e1a:	2317      	movs	r3, #23
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b006      	add	sp, #24
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2221      	movs	r2, #33	@ 0x21
 8000e34:	5c9b      	ldrb	r3, [r3, r2]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d008      	beq.n	8000e4e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2204      	movs	r2, #4
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	2100      	movs	r1, #0
 8000e48:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e020      	b.n	8000e90 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	210e      	movs	r1, #14
 8000e5a:	438a      	bics	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e76:	2101      	movs	r1, #1
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2221      	movs	r2, #33	@ 0x21
 8000e82:	2101      	movs	r1, #1
 8000e84:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2220      	movs	r2, #32
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2221      	movs	r2, #33	@ 0x21
 8000eac:	5c9b      	ldrb	r3, [r3, r2]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d006      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e028      	b.n	8000f14 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	210e      	movs	r1, #14
 8000ece:	438a      	bics	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	438a      	bics	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eea:	2101      	movs	r1, #1
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2221      	movs	r2, #33	@ 0x21
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	0010      	movs	r0, r2
 8000f12:	4798      	blx	r3
    }
  }
  return status;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	2204      	movs	r2, #4
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	d024      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x72>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d020      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d107      	bne.n	8000f6e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2104      	movs	r1, #4
 8000f6a:	438a      	bics	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f76:	2104      	movs	r1, #4
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <HAL_DMA_IRQHandler+0x66>
 8000f86:	e06a      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	0010      	movs	r0, r2
 8000f90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f92:	e064      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	2202      	movs	r2, #2
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d02b      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xda>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d027      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	210a      	movs	r1, #10
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2221      	movs	r2, #33	@ 0x21
 8000fcc:	2101      	movs	r1, #1
 8000fce:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4091      	lsls	r1, r2
 8000fdc:	000a      	movs	r2, r1
 8000fde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d036      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	0010      	movs	r0, r2
 8000ff8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ffa:	e030      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	2208      	movs	r2, #8
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	d028      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2208      	movs	r2, #8
 8001010:	4013      	ands	r3, r2
 8001012:	d024      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	210e      	movs	r1, #14
 8001020:	438a      	bics	r2, r1
 8001022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800102c:	2101      	movs	r1, #1
 800102e:	4091      	lsls	r1, r2
 8001030:	000a      	movs	r2, r1
 8001032:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2221      	movs	r2, #33	@ 0x21
 800103e:	2101      	movs	r1, #1
 8001040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2220      	movs	r2, #32
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	0010      	movs	r0, r2
 800105a:	4798      	blx	r3
    }
  }
}
 800105c:	e7ff      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}

0800107a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001090:	2101      	movs	r1, #1
 8001092:	4091      	lsls	r1, r2
 8001094:	000a      	movs	r2, r1
 8001096:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d108      	bne.n	80010ba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010b8:	e007      	b.n	80010ca <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	60da      	str	r2, [r3, #12]
}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	001a      	movs	r2, r3
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <DMA_CalcBaseAndBitshift+0x60>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d810      	bhi.n	800110a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <DMA_CalcBaseAndBitshift+0x64>)
 80010ee:	4694      	mov	ip, r2
 80010f0:	4463      	add	r3, ip
 80010f2:	2114      	movs	r1, #20
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff f80d 	bl	8000114 <__udivsi3>
 80010fa:	0003      	movs	r3, r0
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <DMA_CalcBaseAndBitshift+0x68>)
 8001106:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001108:	e00f      	b.n	800112a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <DMA_CalcBaseAndBitshift+0x6c>)
 8001110:	4694      	mov	ip, r2
 8001112:	4463      	add	r3, ip
 8001114:	2114      	movs	r1, #20
 8001116:	0018      	movs	r0, r3
 8001118:	f7fe fffc 	bl	8000114 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	009a      	lsls	r2, r3, #2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <DMA_CalcBaseAndBitshift+0x70>)
 8001128:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	40020407 	.word	0x40020407
 8001138:	bffdfff8 	.word	0xbffdfff8
 800113c:	40020000 	.word	0x40020000
 8001140:	bffdfbf8 	.word	0xbffdfbf8
 8001144:	40020400 	.word	0x40020400

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e155      	b.n	8001404 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d100      	bne.n	8001170 <HAL_GPIO_Init+0x28>
 800116e:	e146      	b.n	80013fe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2203      	movs	r2, #3
 8001176:	4013      	ands	r3, r2
 8001178:	2b01      	cmp	r3, #1
 800117a:	d005      	beq.n	8001188 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001184:	2b02      	cmp	r3, #2
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	409a      	lsls	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	2201      	movs	r2, #1
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d017      	beq.n	8001226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2203      	movs	r2, #3
 800122c:	4013      	ands	r3, r2
 800122e:	2b02      	cmp	r3, #2
 8001230:	d123      	bne.n	800127a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	58d3      	ldr	r3, [r2, r3]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2207      	movs	r2, #7
 8001244:	4013      	ands	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2107      	movs	r1, #7
 800125e:	400b      	ands	r3, r1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	6939      	ldr	r1, [r7, #16]
 8001278:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	401a      	ands	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	23c0      	movs	r3, #192	@ 0xc0
 80012b4:	029b      	lsls	r3, r3, #10
 80012b6:	4013      	ands	r3, r2
 80012b8:	d100      	bne.n	80012bc <HAL_GPIO_Init+0x174>
 80012ba:	e0a0      	b.n	80013fe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012bc:	4b57      	ldr	r3, [pc, #348]	@ (800141c <HAL_GPIO_Init+0x2d4>)
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	4b56      	ldr	r3, [pc, #344]	@ (800141c <HAL_GPIO_Init+0x2d4>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	4b54      	ldr	r3, [pc, #336]	@ (800141c <HAL_GPIO_Init+0x2d4>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2201      	movs	r2, #1
 80012ce:	4013      	ands	r3, r2
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d4:	4a52      	ldr	r2, [pc, #328]	@ (8001420 <HAL_GPIO_Init+0x2d8>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	589b      	ldr	r3, [r3, r2]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2203      	movs	r2, #3
 80012e6:	4013      	ands	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	43da      	mvns	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	2390      	movs	r3, #144	@ 0x90
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	429a      	cmp	r2, r3
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a47      	ldr	r2, [pc, #284]	@ (8001424 <HAL_GPIO_Init+0x2dc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x1ea>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a46      	ldr	r2, [pc, #280]	@ (8001428 <HAL_GPIO_Init+0x2e0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x1e6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a45      	ldr	r2, [pc, #276]	@ (800142c <HAL_GPIO_Init+0x2e4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x1e2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a44      	ldr	r2, [pc, #272]	@ (8001430 <HAL_GPIO_Init+0x2e8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x1de>
 8001322:	2304      	movs	r3, #4
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x1f0>
 8001326:	2305      	movs	r3, #5
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x1f0>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x1f0>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x1f0>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x1f0>
 8001336:	2300      	movs	r3, #0
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	2103      	movs	r1, #3
 800133c:	400a      	ands	r2, r1
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	@ (8001420 <HAL_GPIO_Init+0x2d8>)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	035b      	lsls	r3, r3, #13
 800136e:	4013      	ands	r3, r2
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800137a:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001380:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	039b      	lsls	r3, r3, #14
 8001398:	4013      	ands	r3, r2
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a4:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	029b      	lsls	r3, r3, #10
 80013c2:	4013      	ands	r3, r2
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43da      	mvns	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	025b      	lsls	r3, r3, #9
 80013ec:	4013      	ands	r3, r2
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <HAL_GPIO_Init+0x2ec>)
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	40da      	lsrs	r2, r3
 800140c:	1e13      	subs	r3, r2, #0
 800140e:	d000      	beq.n	8001412 <HAL_GPIO_Init+0x2ca>
 8001410:	e6a2      	b.n	8001158 <HAL_GPIO_Init+0x10>
  } 
}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b006      	add	sp, #24
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	0008      	movs	r0, r1
 8001442:	0011      	movs	r1, r2
 8001444:	1cbb      	adds	r3, r7, #2
 8001446:	1c02      	adds	r2, r0, #0
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	1c7b      	adds	r3, r7, #1
 800144c:	1c0a      	adds	r2, r1, #0
 800144e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001450:	1c7b      	adds	r3, r7, #1
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001458:	1cbb      	adds	r3, r7, #2
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001462:	1cbb      	adds	r3, r7, #2
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f000 fb76 	bl	8001b74 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	d100      	bne.n	8001494 <HAL_RCC_OscConfig+0x20>
 8001492:	e08e      	b.n	80015b2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001494:	4bc5      	ldr	r3, [pc, #788]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	220c      	movs	r2, #12
 800149a:	4013      	ands	r3, r2
 800149c:	2b04      	cmp	r3, #4
 800149e:	d00e      	beq.n	80014be <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a0:	4bc2      	ldr	r3, [pc, #776]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	220c      	movs	r2, #12
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d117      	bne.n	80014dc <HAL_RCC_OscConfig+0x68>
 80014ac:	4bbf      	ldr	r3, [pc, #764]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	23c0      	movs	r3, #192	@ 0xc0
 80014b2:	025b      	lsls	r3, r3, #9
 80014b4:	401a      	ands	r2, r3
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d10e      	bne.n	80014dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014be:	4bbb      	ldr	r3, [pc, #748]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	029b      	lsls	r3, r3, #10
 80014c6:	4013      	ands	r3, r2
 80014c8:	d100      	bne.n	80014cc <HAL_RCC_OscConfig+0x58>
 80014ca:	e071      	b.n	80015b0 <HAL_RCC_OscConfig+0x13c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_RCC_OscConfig+0x62>
 80014d4:	e06c      	b.n	80015b0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f000 fb4c 	bl	8001b74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_OscConfig+0x80>
 80014e4:	4bb1      	ldr	r3, [pc, #708]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4bb0      	ldr	r3, [pc, #704]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80014ea:	2180      	movs	r1, #128	@ 0x80
 80014ec:	0249      	lsls	r1, r1, #9
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e02f      	b.n	8001554 <HAL_RCC_OscConfig+0xe0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0xa2>
 80014fc:	4bab      	ldr	r3, [pc, #684]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4baa      	ldr	r3, [pc, #680]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001502:	49ab      	ldr	r1, [pc, #684]	@ (80017b0 <HAL_RCC_OscConfig+0x33c>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	4ba8      	ldr	r3, [pc, #672]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4ba7      	ldr	r3, [pc, #668]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800150e:	49a9      	ldr	r1, [pc, #676]	@ (80017b4 <HAL_RCC_OscConfig+0x340>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e01e      	b.n	8001554 <HAL_RCC_OscConfig+0xe0>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d10e      	bne.n	800153c <HAL_RCC_OscConfig+0xc8>
 800151e:	4ba3      	ldr	r3, [pc, #652]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4ba2      	ldr	r3, [pc, #648]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001524:	2180      	movs	r1, #128	@ 0x80
 8001526:	02c9      	lsls	r1, r1, #11
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4b9f      	ldr	r3, [pc, #636]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b9e      	ldr	r3, [pc, #632]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	0249      	lsls	r1, r1, #9
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xe0>
 800153c:	4b9b      	ldr	r3, [pc, #620]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b9a      	ldr	r3, [pc, #616]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001542:	499b      	ldr	r1, [pc, #620]	@ (80017b0 <HAL_RCC_OscConfig+0x33c>)
 8001544:	400a      	ands	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	4b98      	ldr	r3, [pc, #608]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b97      	ldr	r3, [pc, #604]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800154e:	4999      	ldr	r1, [pc, #612]	@ (80017b4 <HAL_RCC_OscConfig+0x340>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d014      	beq.n	8001586 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff faaa 	bl	8000ab4 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001566:	f7ff faa5 	bl	8000ab4 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	@ 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e2fd      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	4b8c      	ldr	r3, [pc, #560]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	029b      	lsls	r3, r3, #10
 8001580:	4013      	ands	r3, r2
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0xf2>
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fa95 	bl	8000ab4 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fa90 	bl	8000ab4 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e2e8      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	4b82      	ldr	r3, [pc, #520]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x11c>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d100      	bne.n	80015be <HAL_RCC_OscConfig+0x14a>
 80015bc:	e06c      	b.n	8001698 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015be:	4b7b      	ldr	r3, [pc, #492]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	220c      	movs	r2, #12
 80015c4:	4013      	ands	r3, r2
 80015c6:	d00e      	beq.n	80015e6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015c8:	4b78      	ldr	r3, [pc, #480]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	220c      	movs	r2, #12
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d11f      	bne.n	8001614 <HAL_RCC_OscConfig+0x1a0>
 80015d4:	4b75      	ldr	r3, [pc, #468]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	23c0      	movs	r3, #192	@ 0xc0
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	401a      	ands	r2, r3
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d116      	bne.n	8001614 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	4b71      	ldr	r3, [pc, #452]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x188>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e2bb      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b6b      	ldr	r3, [pc, #428]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	22f8      	movs	r2, #248	@ 0xf8
 8001602:	4393      	bics	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00da      	lsls	r2, r3, #3
 800160c:	4b67      	ldr	r3, [pc, #412]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	e041      	b.n	8001698 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d024      	beq.n	8001666 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161c:	4b63      	ldr	r3, [pc, #396]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b62      	ldr	r3, [pc, #392]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001622:	2101      	movs	r1, #1
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fa44 	bl	8000ab4 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fa3f 	bl	8000ab4 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e297      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2202      	movs	r2, #2
 800164a:	4013      	ands	r3, r2
 800164c:	d0f1      	beq.n	8001632 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b57      	ldr	r3, [pc, #348]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	22f8      	movs	r2, #248	@ 0xf8
 8001654:	4393      	bics	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00da      	lsls	r2, r3, #3
 800165e:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e018      	b.n	8001698 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800166c:	2101      	movs	r1, #1
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa1f 	bl	8000ab4 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fa1a 	bl	8000ab4 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e272      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d1f1      	bne.n	800167c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2208      	movs	r2, #8
 800169e:	4013      	ands	r3, r2
 80016a0:	d036      	beq.n	8001710 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d019      	beq.n	80016de <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80016ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ae:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f9fd 	bl	8000ab4 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f9f8 	bl	8000ab4 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e250      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f1      	beq.n	80016c0 <HAL_RCC_OscConfig+0x24c>
 80016dc:	e018      	b.n	8001710 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b33      	ldr	r3, [pc, #204]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80016e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016e2:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	438a      	bics	r2, r1
 80016e8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f9e3 	bl	8000ab4 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff f9de 	bl	8000ab4 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e236      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d1f1      	bne.n	80016f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x2a8>
 800171a:	e0b5      	b.n	8001888 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171c:	201f      	movs	r0, #31
 800171e:	183b      	adds	r3, r7, r0
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001724:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	055b      	lsls	r3, r3, #21
 800172c:	4013      	ands	r3, r2
 800172e:	d110      	bne.n	8001752 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001736:	2180      	movs	r1, #128	@ 0x80
 8001738:	0549      	lsls	r1, r1, #21
 800173a:	430a      	orrs	r2, r1
 800173c:	61da      	str	r2, [r3, #28]
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	055b      	lsls	r3, r3, #21
 8001746:	4013      	ands	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800174c:	183b      	adds	r3, r7, r0
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_RCC_OscConfig+0x344>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	@ 0x80
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4013      	ands	r3, r2
 800175c:	d11a      	bne.n	8001794 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <HAL_RCC_OscConfig+0x344>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_RCC_OscConfig+0x344>)
 8001764:	2180      	movs	r1, #128	@ 0x80
 8001766:	0049      	lsls	r1, r1, #1
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff f9a2 	bl	8000ab4 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff f99d 	bl	8000ab4 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	@ 0x64
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e1f5      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <HAL_RCC_OscConfig+0x344>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4013      	ands	r3, r2
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10f      	bne.n	80017bc <HAL_RCC_OscConfig+0x348>
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4b02      	ldr	r3, [pc, #8]	@ (80017ac <HAL_RCC_OscConfig+0x338>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	e036      	b.n	8001818 <HAL_RCC_OscConfig+0x3a4>
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000
 80017b0:	fffeffff 	.word	0xfffeffff
 80017b4:	fffbffff 	.word	0xfffbffff
 80017b8:	40007000 	.word	0x40007000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x36a>
 80017c4:	4bca      	ldr	r3, [pc, #808]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	6a1a      	ldr	r2, [r3, #32]
 80017c8:	4bc9      	ldr	r3, [pc, #804]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	438a      	bics	r2, r1
 80017ce:	621a      	str	r2, [r3, #32]
 80017d0:	4bc7      	ldr	r3, [pc, #796]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	4bc6      	ldr	r3, [pc, #792]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017d6:	2104      	movs	r1, #4
 80017d8:	438a      	bics	r2, r1
 80017da:	621a      	str	r2, [r3, #32]
 80017dc:	e01c      	b.n	8001818 <HAL_RCC_OscConfig+0x3a4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x38c>
 80017e6:	4bc2      	ldr	r3, [pc, #776]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017e8:	6a1a      	ldr	r2, [r3, #32]
 80017ea:	4bc1      	ldr	r3, [pc, #772]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017ec:	2104      	movs	r1, #4
 80017ee:	430a      	orrs	r2, r1
 80017f0:	621a      	str	r2, [r3, #32]
 80017f2:	4bbf      	ldr	r3, [pc, #764]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	4bbe      	ldr	r3, [pc, #760]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	621a      	str	r2, [r3, #32]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0x3a4>
 8001800:	4bbb      	ldr	r3, [pc, #748]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	4bba      	ldr	r3, [pc, #744]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	621a      	str	r2, [r3, #32]
 800180c:	4bb8      	ldr	r3, [pc, #736]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	4bb7      	ldr	r3, [pc, #732]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001812:	2104      	movs	r1, #4
 8001814:	438a      	bics	r2, r1
 8001816:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d014      	beq.n	800184a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff f948 	bl	8000ab4 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e009      	b.n	800183e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff f943 	bl	8000ab4 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4aaf      	ldr	r2, [pc, #700]	@ (8001af4 <HAL_RCC_OscConfig+0x680>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e19a      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	4bac      	ldr	r3, [pc, #688]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x3b6>
 8001848:	e013      	b.n	8001872 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff f933 	bl	8000ab4 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	e009      	b.n	8001868 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff f92e 	bl	8000ab4 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	4aa5      	ldr	r2, [pc, #660]	@ (8001af4 <HAL_RCC_OscConfig+0x680>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e185      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4ba1      	ldr	r3, [pc, #644]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001872:	231f      	movs	r3, #31
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b9c      	ldr	r3, [pc, #624]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	4b9b      	ldr	r3, [pc, #620]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001882:	499d      	ldr	r1, [pc, #628]	@ (8001af8 <HAL_RCC_OscConfig+0x684>)
 8001884:	400a      	ands	r2, r1
 8001886:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	4013      	ands	r3, r2
 8001890:	d063      	beq.n	800195a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d12a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800189a:	4b95      	ldr	r3, [pc, #596]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800189c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800189e:	4b94      	ldr	r3, [pc, #592]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	2104      	movs	r1, #4
 80018a2:	430a      	orrs	r2, r1
 80018a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018a6:	4b92      	ldr	r3, [pc, #584]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018aa:	4b91      	ldr	r3, [pc, #580]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff f8ff 	bl	8000ab4 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018bc:	f7ff f8fa 	bl	8000ab4 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e152      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ce:	4b88      	ldr	r3, [pc, #544]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f1      	beq.n	80018bc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d8:	4b85      	ldr	r3, [pc, #532]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018dc:	22f8      	movs	r2, #248	@ 0xf8
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	00da      	lsls	r2, r3, #3
 80018e8:	4b81      	ldr	r3, [pc, #516]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ee:	e034      	b.n	800195a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	3305      	adds	r3, #5
 80018f6:	d111      	bne.n	800191c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018f8:	4b7d      	ldr	r3, [pc, #500]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018fc:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80018fe:	2104      	movs	r1, #4
 8001900:	438a      	bics	r2, r1
 8001902:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001904:	4b7a      	ldr	r3, [pc, #488]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	22f8      	movs	r2, #248	@ 0xf8
 800190a:	4393      	bics	r3, r2
 800190c:	0019      	movs	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	00da      	lsls	r2, r3, #3
 8001914:	4b76      	ldr	r3, [pc, #472]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001916:	430a      	orrs	r2, r1
 8001918:	635a      	str	r2, [r3, #52]	@ 0x34
 800191a:	e01e      	b.n	800195a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800191c:	4b74      	ldr	r3, [pc, #464]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800191e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001920:	4b73      	ldr	r3, [pc, #460]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001922:	2104      	movs	r1, #4
 8001924:	430a      	orrs	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001928:	4b71      	ldr	r3, [pc, #452]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800192a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192c:	4b70      	ldr	r3, [pc, #448]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800192e:	2101      	movs	r1, #1
 8001930:	438a      	bics	r2, r1
 8001932:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff f8be 	bl	8000ab4 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800193e:	f7ff f8b9 	bl	8000ab4 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e111      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001950:	4b67      	ldr	r3, [pc, #412]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d1f1      	bne.n	800193e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2220      	movs	r2, #32
 8001960:	4013      	ands	r3, r2
 8001962:	d05c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001964:	4b62      	ldr	r3, [pc, #392]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	220c      	movs	r2, #12
 800196a:	4013      	ands	r3, r2
 800196c:	2b0c      	cmp	r3, #12
 800196e:	d00e      	beq.n	800198e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001970:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	220c      	movs	r2, #12
 8001976:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001978:	2b08      	cmp	r3, #8
 800197a:	d114      	bne.n	80019a6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800197c:	4b5c      	ldr	r3, [pc, #368]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	23c0      	movs	r3, #192	@ 0xc0
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	401a      	ands	r2, r3
 8001986:	23c0      	movs	r3, #192	@ 0xc0
 8001988:	025b      	lsls	r3, r3, #9
 800198a:	429a      	cmp	r2, r3
 800198c:	d10b      	bne.n	80019a6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800198e:	4b58      	ldr	r3, [pc, #352]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001992:	2380      	movs	r3, #128	@ 0x80
 8001994:	029b      	lsls	r3, r3, #10
 8001996:	4013      	ands	r3, r2
 8001998:	d040      	beq.n	8001a1c <HAL_RCC_OscConfig+0x5a8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d03c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0e6      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d01b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019ae:	4b50      	ldr	r3, [pc, #320]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b2:	4b4f      	ldr	r3, [pc, #316]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	0249      	lsls	r1, r1, #9
 80019b8:	430a      	orrs	r2, r1
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff f87a 	bl	8000ab4 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c6:	f7ff f875 	bl	8000ab4 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0cd      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019d8:	4b45      	ldr	r3, [pc, #276]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80019da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x552>
 80019e4:	e01b      	b.n	8001a1e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019e6:	4b42      	ldr	r3, [pc, #264]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80019e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ea:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 80019ec:	4943      	ldr	r1, [pc, #268]	@ (8001afc <HAL_RCC_OscConfig+0x688>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff f85f 	bl	8000ab4 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fc:	f7ff f85a 	bl	8000ab4 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0b2      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x588>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a1c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5b4>
 8001a26:	e0a4      	b.n	8001b72 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a28:	4b31      	ldr	r3, [pc, #196]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5c2>
 8001a34:	e078      	b.n	8001b28 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d14c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	492e      	ldr	r1, [pc, #184]	@ (8001b00 <HAL_RCC_OscConfig+0x68c>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f833 	bl	8000ab4 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f82e 	bl	8000ab4 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e086      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a72:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	220f      	movs	r2, #15
 8001a78:	4393      	bics	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b04 <HAL_RCC_OscConfig+0x690>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001aa6:	2180      	movs	r1, #128	@ 0x80
 8001aa8:	0449      	lsls	r1, r1, #17
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff f801 	bl	8000ab4 <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7fe fffc 	bl	8000ab4 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e054      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	@ 0x80
 8001ad0:	049b      	lsls	r3, r3, #18
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x644>
 8001ad6:	e04c      	b.n	8001b72 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <HAL_RCC_OscConfig+0x67c>)
 8001ade:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <HAL_RCC_OscConfig+0x68c>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe ffe6 	bl	8000ab4 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x6a6>
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	40021000 	.word	0x40021000
 8001af4:	00001388 	.word	0x00001388
 8001af8:	efffffff 	.word	0xefffffff
 8001afc:	fffeffff 	.word	0xfffeffff
 8001b00:	feffffff 	.word	0xfeffffff
 8001b04:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7fe ffd4 	bl	8000ab4 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e02c      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_RCC_OscConfig+0x708>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	049b      	lsls	r3, r3, #18
 8001b22:	4013      	ands	r3, r2
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x694>
 8001b26:	e024      	b.n	8001b72 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e01f      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_OscConfig+0x708>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_RCC_OscConfig+0x708>)
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	23c0      	movs	r3, #192	@ 0xc0
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d10e      	bne.n	8001b6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	220f      	movs	r2, #15
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	23f0      	movs	r3, #240	@ 0xf0
 8001b62:	039b      	lsls	r3, r3, #14
 8001b64:	401a      	ands	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b008      	add	sp, #32
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0bf      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b61      	ldr	r3, [pc, #388]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d911      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4393      	bics	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	4b5b      	ldr	r3, [pc, #364]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb4:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0a6      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d015      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d006      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bda:	4b51      	ldr	r3, [pc, #324]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4b50      	ldr	r3, [pc, #320]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001be0:	21e0      	movs	r1, #224	@ 0xe0
 8001be2:	00c9      	lsls	r1, r1, #3
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	22f0      	movs	r2, #240	@ 0xf0
 8001bee:	4393      	bics	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d04c      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	029b      	lsls	r3, r3, #10
 8001c16:	4013      	ands	r3, r2
 8001c18:	d120      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07a      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b3e      	ldr	r3, [pc, #248]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	049b      	lsls	r3, r3, #18
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d114      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e06e      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c3e:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	4013      	ands	r3, r2
 8001c48:	d108      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e062      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b34      	ldr	r3, [pc, #208]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e05b      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5c:	4b30      	ldr	r3, [pc, #192]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4393      	bics	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7fe ff20 	bl	8000ab4 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7a:	f7fe ff1b 	bl	8000ab4 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	4a27      	ldr	r2, [pc, #156]	@ (8001d24 <HAL_RCC_ClockConfig+0x1a4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e042      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	220c      	movs	r2, #12
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1ec      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d211      	bcs.n	8001cd2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc0:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <HAL_RCC_ClockConfig+0x19c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e020      	b.n	8001d14 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <HAL_RCC_ClockConfig+0x1a8>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cf0:	f000 f820 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf4:	0001      	movs	r1, r0
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_RCC_ClockConfig+0x1a0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	4013      	ands	r3, r2
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ac>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	000a      	movs	r2, r1
 8001d06:	40da      	lsrs	r2, r3
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_RCC_ClockConfig+0x1b0>)
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7fe fe8b 	bl	8000a28 <HAL_InitTick>
  
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b004      	add	sp, #16
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	00001388 	.word	0x00001388
 8001d28:	fffff8ff 	.word	0xfffff8ff
 8001d2c:	08004354 	.word	0x08004354
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	220c      	movs	r2, #12
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d046      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0xb8>
 8001d5e:	d848      	bhi.n	8001df2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d002      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x36>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d003      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x3c>
 8001d68:	e043      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d6a:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d6c:	613b      	str	r3, [r7, #16]
      break;
 8001d6e:	e043      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	0c9b      	lsrs	r3, r3, #18
 8001d74:	220f      	movs	r2, #15
 8001d76:	4013      	ands	r3, r2
 8001d78:	4a24      	ldr	r2, [pc, #144]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d7e:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	220f      	movs	r2, #15
 8001d84:	4013      	ands	r3, r2
 8001d86:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	23c0      	movs	r3, #192	@ 0xc0
 8001d90:	025b      	lsls	r3, r3, #9
 8001d92:	401a      	ands	r2, r3
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	025b      	lsls	r3, r3, #9
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d109      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	481a      	ldr	r0, [pc, #104]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001da0:	f7fe f9b8 	bl	8000114 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	001a      	movs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4353      	muls	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e01a      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	23c0      	movs	r3, #192	@ 0xc0
 8001db4:	025b      	lsls	r3, r3, #9
 8001db6:	401a      	ands	r2, r3
 8001db8:	23c0      	movs	r3, #192	@ 0xc0
 8001dba:	025b      	lsls	r3, r3, #9
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d109      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	4814      	ldr	r0, [pc, #80]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001dc4:	f7fe f9a6 	bl	8000114 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	001a      	movs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4353      	muls	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001dd8:	f7fe f99c 	bl	8000114 <__udivsi3>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	001a      	movs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4353      	muls	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	613b      	str	r3, [r7, #16]
      break;
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001dee:	613b      	str	r3, [r7, #16]
      break;
 8001df0:	e002      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001df4:	613b      	str	r3, [r7, #16]
      break;
 8001df6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	007a1200 	.word	0x007a1200
 8001e0c:	0800436c 	.word	0x0800436c
 8001e10:	0800437c 	.word	0x0800437c
 8001e14:	02dc6c00 	.word	0x02dc6c00

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	0001      	movs	r1, r0
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	000b      	movs	r3, r1
}    
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08004364 	.word	0x08004364

08001e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	025b      	lsls	r3, r3, #9
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e74:	e08e      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2017      	movs	r0, #23
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	055b      	lsls	r3, r3, #21
 8001e86:	4013      	ands	r3, r2
 8001e88:	d110      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	0549      	lsls	r1, r1, #21
 8001e94:	430a      	orrs	r2, r1
 8001e96:	61da      	str	r2, [r3, #28]
 8001e98:	4b67      	ldr	r3, [pc, #412]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	055b      	lsls	r3, r3, #21
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	183b      	adds	r3, r7, r0
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b63      	ldr	r3, [pc, #396]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d11a      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb8:	4b60      	ldr	r3, [pc, #384]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ebe:	2180      	movs	r1, #128	@ 0x80
 8001ec0:	0049      	lsls	r1, r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fdf5 	bl	8000ab4 <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	e008      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed0:	f7fe fdf0 	bl	8000ab4 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0a6      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee2:	4b56      	ldr	r3, [pc, #344]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eee:	4b52      	ldr	r3, [pc, #328]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	23c0      	movs	r3, #192	@ 0xc0
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d034      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	23c0      	movs	r3, #192	@ 0xc0
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d02c      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f10:	4b49      	ldr	r3, [pc, #292]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f1a:	4b47      	ldr	r3, [pc, #284]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	4b46      	ldr	r3, [pc, #280]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f20:	2180      	movs	r1, #128	@ 0x80
 8001f22:	0249      	lsls	r1, r1, #9
 8001f24:	430a      	orrs	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	4b42      	ldr	r3, [pc, #264]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f2e:	4945      	ldr	r1, [pc, #276]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f34:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fdb7 	bl	8000ab4 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	e009      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fdb2 	bl	8000ab4 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	4a3c      	ldr	r2, [pc, #240]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e067      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6a:	4b33      	ldr	r3, [pc, #204]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f7e:	2317      	movs	r3, #23
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b2b      	ldr	r3, [pc, #172]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f8e:	492f      	ldr	r1, [pc, #188]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	02db      	lsls	r3, r3, #11
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	2210      	movs	r2, #16
 8002000:	4393      	bics	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800200a:	430a      	orrs	r2, r1
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4013      	ands	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800202a:	430a      	orrs	r2, r1
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b006      	add	sp, #24
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	fffffcff 	.word	0xfffffcff
 8002044:	fffeffff 	.word	0xfffeffff
 8002048:	00001388 	.word	0x00001388
 800204c:	efffffff 	.word	0xefffffff
 8002050:	fffcffff 	.word	0xfffcffff
 8002054:	fff3ffff 	.word	0xfff3ffff

08002058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e044      	b.n	80020f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2278      	movs	r2, #120	@ 0x78
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f7fe fb8d 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2224      	movs	r2, #36	@ 0x24
 8002086:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	438a      	bics	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 fede 	bl	8002e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 fcf2 	bl	8002a94 <UART_SetConfig>
 80020b0:	0003      	movs	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e01c      	b.n	80020f4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	490d      	ldr	r1, [pc, #52]	@ (80020fc <HAL_UART_Init+0xa4>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	212a      	movs	r1, #42	@ 0x2a
 80020d6:	438a      	bics	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 ff6d 	bl	8002fcc <UART_CheckIdleState>
 80020f2:	0003      	movs	r3, r0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	ffffb7ff 	.word	0xffffb7ff

08002100 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	1dbb      	adds	r3, r7, #6
 800210c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002112:	2b20      	cmp	r3, #32
 8002114:	d000      	beq.n	8002118 <HAL_UART_Transmit_DMA+0x18>
 8002116:	e077      	b.n	8002208 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_UART_Transmit_DMA+0x26>
 800211e:	1dbb      	adds	r3, r7, #6
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06f      	b.n	800220a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	429a      	cmp	r2, r3
 8002134:	d109      	bne.n	800214a <HAL_UART_Transmit_DMA+0x4a>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	d001      	beq.n	800214a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e05f      	b.n	800220a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1dba      	adds	r2, r7, #6
 8002154:	2150      	movs	r1, #80	@ 0x50
 8002156:	8812      	ldrh	r2, [r2, #0]
 8002158:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1dba      	adds	r2, r7, #6
 800215e:	2152      	movs	r1, #82	@ 0x52
 8002160:	8812      	ldrh	r2, [r2, #0]
 8002162:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2284      	movs	r2, #132	@ 0x84
 8002168:	2100      	movs	r1, #0
 800216a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2221      	movs	r2, #33	@ 0x21
 8002170:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	2b00      	cmp	r3, #0
 8002178:	d027      	beq.n	80021ca <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217e:	4a25      	ldr	r2, [pc, #148]	@ (8002214 <HAL_UART_Transmit_DMA+0x114>)
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	4a24      	ldr	r2, [pc, #144]	@ (8002218 <HAL_UART_Transmit_DMA+0x118>)
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a23      	ldr	r2, [pc, #140]	@ (800221c <HAL_UART_Transmit_DMA+0x11c>)
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002196:	2200      	movs	r2, #0
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	0019      	movs	r1, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3328      	adds	r3, #40	@ 0x28
 80021aa:	001a      	movs	r2, r3
 80021ac:	1dbb      	adds	r3, r7, #6
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f7fe fdd4 	bl	8000d5c <HAL_DMA_Start_IT>
 80021b4:	1e03      	subs	r3, r0, #0
 80021b6:	d008      	beq.n	80021ca <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2284      	movs	r2, #132	@ 0x84
 80021bc:	2110      	movs	r1, #16
 80021be:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e01f      	b.n	800220a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d2:	f3ef 8310 	mrs	r3, PRIMASK
 80021d6:	613b      	str	r3, [r7, #16]
  return(result);
 80021d8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	2301      	movs	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f383 8810 	msr	PRIMASK, r3
}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2180      	movs	r1, #128	@ 0x80
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f383 8810 	msr	PRIMASK, r3
}
 8002202:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b008      	add	sp, #32
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	0800344d 	.word	0x0800344d
 8002218:	080034e1 	.word	0x080034e1
 800221c:	0800366f 	.word	0x0800366f

08002220 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	@ 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002228:	f3ef 8310 	mrs	r3, PRIMASK
 800222c:	617b      	str	r3, [r7, #20]
  return(result);
 800222e:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
 8002232:	2301      	movs	r3, #1
 8002234:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f383 8810 	msr	PRIMASK, r3
}
 800223c:	46c0      	nop			@ (mov r8, r8)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	21c0      	movs	r1, #192	@ 0xc0
 800224a:	438a      	bics	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f383 8810 	msr	PRIMASK, r3
}
 8002258:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2280      	movs	r2, #128	@ 0x80
 8002262:	4013      	ands	r3, r2
 8002264:	2b80      	cmp	r3, #128	@ 0x80
 8002266:	d135      	bne.n	80022d4 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002268:	f3ef 8310 	mrs	r3, PRIMASK
 800226c:	60bb      	str	r3, [r7, #8]
  return(result);
 800226e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	2301      	movs	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f383 8810 	msr	PRIMASK, r3
}
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	438a      	bics	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f383 8810 	msr	PRIMASK, r3
}
 8002298:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d018      	beq.n	80022d4 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	2200      	movs	r2, #0
 80022a8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fe fdba 	bl	8000e28 <HAL_DMA_Abort>
 80022b4:	1e03      	subs	r3, r0, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022bc:	0018      	movs	r0, r3
 80022be:	f7fe fed2 	bl	8001066 <HAL_DMA_GetError>
 80022c2:	0003      	movs	r3, r0
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d105      	bne.n	80022d4 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2284      	movs	r2, #132	@ 0x84
 80022cc:	2110      	movs	r1, #16
 80022ce:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e007      	b.n	80022e4 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2252      	movs	r2, #82	@ 0x52
 80022d8:	2100      	movs	r1, #0
 80022da:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b00a      	add	sp, #40	@ 0x28
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b092      	sub	sp, #72	@ 0x48
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f4:	f3ef 8310 	mrs	r3, PRIMASK
 80022f8:	623b      	str	r3, [r7, #32]
  return(result);
 80022fa:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80022fe:	2301      	movs	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	f383 8810 	msr	PRIMASK, r3
}
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	494b      	ldr	r1, [pc, #300]	@ (8002444 <HAL_UART_AbortReceive+0x158>)
 8002316:	400a      	ands	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002320:	f383 8810 	msr	PRIMASK, r3
}
 8002324:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002326:	f3ef 8310 	mrs	r3, PRIMASK
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002330:	2301      	movs	r3, #1
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	f383 8810 	msr	PRIMASK, r3
}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2101      	movs	r1, #1
 8002348:	438a      	bics	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002352:	f383 8810 	msr	PRIMASK, r3
}
 8002356:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235c:	2b01      	cmp	r3, #1
 800235e:	d118      	bne.n	8002392 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002360:	f3ef 8310 	mrs	r3, PRIMASK
 8002364:	617b      	str	r3, [r7, #20]
  return(result);
 8002366:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800236a:	2301      	movs	r3, #1
 800236c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f383 8810 	msr	PRIMASK, r3
}
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2110      	movs	r1, #16
 8002382:	438a      	bics	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002388:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f383 8810 	msr	PRIMASK, r3
}
 8002390:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2240      	movs	r2, #64	@ 0x40
 800239a:	4013      	ands	r3, r2
 800239c:	2b40      	cmp	r3, #64	@ 0x40
 800239e:	d135      	bne.n	800240c <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a0:	f3ef 8310 	mrs	r3, PRIMASK
 80023a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80023a6:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023aa:	2301      	movs	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f383 8810 	msr	PRIMASK, r3
}
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2140      	movs	r1, #64	@ 0x40
 80023c2:	438a      	bics	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f383 8810 	msr	PRIMASK, r3
}
 80023d0:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d018      	beq.n	800240c <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023de:	2200      	movs	r2, #0
 80023e0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7fe fd1e 	bl	8000e28 <HAL_DMA_Abort>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d00d      	beq.n	800240c <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7fe fe36 	bl	8001066 <HAL_DMA_GetError>
 80023fa:	0003      	movs	r3, r0
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d105      	bne.n	800240c <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2284      	movs	r2, #132	@ 0x84
 8002404:	2110      	movs	r1, #16
 8002406:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e017      	b.n	800243c <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	225a      	movs	r2, #90	@ 0x5a
 8002410:	2100      	movs	r1, #0
 8002412:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	220f      	movs	r2, #15
 800241a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2108      	movs	r1, #8
 8002428:	430a      	orrs	r2, r1
 800242a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	2120      	movs	r1, #32
 8002432:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b012      	add	sp, #72	@ 0x48
 8002442:	bd80      	pop	{r7, pc}
 8002444:	fffffedf 	.word	0xfffffedf

08002448 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b0ab      	sub	sp, #172	@ 0xac
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	22a4      	movs	r2, #164	@ 0xa4
 8002458:	18b9      	adds	r1, r7, r2
 800245a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	20a0      	movs	r0, #160	@ 0xa0
 8002464:	1839      	adds	r1, r7, r0
 8002466:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	219c      	movs	r1, #156	@ 0x9c
 8002470:	1879      	adds	r1, r7, r1
 8002472:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002474:	0011      	movs	r1, r2
 8002476:	18bb      	adds	r3, r7, r2
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a99      	ldr	r2, [pc, #612]	@ (80026e0 <HAL_UART_IRQHandler+0x298>)
 800247c:	4013      	ands	r3, r2
 800247e:	2298      	movs	r2, #152	@ 0x98
 8002480:	18bc      	adds	r4, r7, r2
 8002482:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002484:	18bb      	adds	r3, r7, r2
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d114      	bne.n	80024b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800248c:	187b      	adds	r3, r7, r1
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	4013      	ands	r3, r2
 8002494:	d00f      	beq.n	80024b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002496:	183b      	adds	r3, r7, r0
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2220      	movs	r2, #32
 800249c:	4013      	ands	r3, r2
 800249e:	d00a      	beq.n	80024b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d100      	bne.n	80024aa <HAL_UART_IRQHandler+0x62>
 80024a8:	e29e      	b.n	80029e8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	0010      	movs	r0, r2
 80024b2:	4798      	blx	r3
      }
      return;
 80024b4:	e298      	b.n	80029e8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024b6:	2398      	movs	r3, #152	@ 0x98
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d100      	bne.n	80024c2 <HAL_UART_IRQHandler+0x7a>
 80024c0:	e114      	b.n	80026ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024c2:	239c      	movs	r3, #156	@ 0x9c
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4013      	ands	r3, r2
 80024cc:	d106      	bne.n	80024dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024ce:	23a0      	movs	r3, #160	@ 0xa0
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a83      	ldr	r2, [pc, #524]	@ (80026e4 <HAL_UART_IRQHandler+0x29c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	d100      	bne.n	80024dc <HAL_UART_IRQHandler+0x94>
 80024da:	e107      	b.n	80026ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024dc:	23a4      	movs	r3, #164	@ 0xa4
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d012      	beq.n	800250e <HAL_UART_IRQHandler+0xc6>
 80024e8:	23a0      	movs	r3, #160	@ 0xa0
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	d00b      	beq.n	800250e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2284      	movs	r2, #132	@ 0x84
 8002502:	589b      	ldr	r3, [r3, r2]
 8002504:	2201      	movs	r2, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2184      	movs	r1, #132	@ 0x84
 800250c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800250e:	23a4      	movs	r3, #164	@ 0xa4
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d011      	beq.n	800253e <HAL_UART_IRQHandler+0xf6>
 800251a:	239c      	movs	r3, #156	@ 0x9c
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d00b      	beq.n	800253e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2202      	movs	r2, #2
 800252c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2284      	movs	r2, #132	@ 0x84
 8002532:	589b      	ldr	r3, [r3, r2]
 8002534:	2204      	movs	r2, #4
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2184      	movs	r1, #132	@ 0x84
 800253c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800253e:	23a4      	movs	r3, #164	@ 0xa4
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2204      	movs	r2, #4
 8002546:	4013      	ands	r3, r2
 8002548:	d011      	beq.n	800256e <HAL_UART_IRQHandler+0x126>
 800254a:	239c      	movs	r3, #156	@ 0x9c
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d00b      	beq.n	800256e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2204      	movs	r2, #4
 800255c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2284      	movs	r2, #132	@ 0x84
 8002562:	589b      	ldr	r3, [r3, r2]
 8002564:	2202      	movs	r2, #2
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2184      	movs	r1, #132	@ 0x84
 800256c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800256e:	23a4      	movs	r3, #164	@ 0xa4
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2208      	movs	r2, #8
 8002576:	4013      	ands	r3, r2
 8002578:	d017      	beq.n	80025aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800257a:	23a0      	movs	r3, #160	@ 0xa0
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2220      	movs	r2, #32
 8002582:	4013      	ands	r3, r2
 8002584:	d105      	bne.n	8002592 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002586:	239c      	movs	r3, #156	@ 0x9c
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002590:	d00b      	beq.n	80025aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2208      	movs	r2, #8
 8002598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2284      	movs	r2, #132	@ 0x84
 800259e:	589b      	ldr	r3, [r3, r2]
 80025a0:	2208      	movs	r2, #8
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2184      	movs	r1, #132	@ 0x84
 80025a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025aa:	23a4      	movs	r3, #164	@ 0xa4
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_UART_IRQHandler+0x198>
 80025b8:	23a0      	movs	r3, #160	@ 0xa0
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	04db      	lsls	r3, r3, #19
 80025c2:	4013      	ands	r3, r2
 80025c4:	d00c      	beq.n	80025e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2280      	movs	r2, #128	@ 0x80
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2284      	movs	r2, #132	@ 0x84
 80025d4:	589b      	ldr	r3, [r3, r2]
 80025d6:	2220      	movs	r2, #32
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2184      	movs	r1, #132	@ 0x84
 80025de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2284      	movs	r2, #132	@ 0x84
 80025e4:	589b      	ldr	r3, [r3, r2]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d100      	bne.n	80025ec <HAL_UART_IRQHandler+0x1a4>
 80025ea:	e1ff      	b.n	80029ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025ec:	23a4      	movs	r3, #164	@ 0xa4
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2220      	movs	r2, #32
 80025f4:	4013      	ands	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025f8:	23a0      	movs	r3, #160	@ 0xa0
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2220      	movs	r2, #32
 8002600:	4013      	ands	r3, r2
 8002602:	d008      	beq.n	8002616 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	0010      	movs	r0, r2
 8002614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2284      	movs	r2, #132	@ 0x84
 800261a:	589b      	ldr	r3, [r3, r2]
 800261c:	2194      	movs	r1, #148	@ 0x94
 800261e:	187a      	adds	r2, r7, r1
 8002620:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2240      	movs	r2, #64	@ 0x40
 800262a:	4013      	ands	r3, r2
 800262c:	2b40      	cmp	r3, #64	@ 0x40
 800262e:	d004      	beq.n	800263a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002630:	187b      	adds	r3, r7, r1
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2228      	movs	r2, #40	@ 0x28
 8002636:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002638:	d047      	beq.n	80026ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f000 fea1 	bl	8003384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2240      	movs	r2, #64	@ 0x40
 800264a:	4013      	ands	r3, r2
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d137      	bne.n	80026c0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8310 	mrs	r3, PRIMASK
 8002654:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002658:	2090      	movs	r0, #144	@ 0x90
 800265a:	183a      	adds	r2, r7, r0
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002664:	f383 8810 	msr	PRIMASK, r3
}
 8002668:	46c0      	nop			@ (mov r8, r8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2140      	movs	r1, #64	@ 0x40
 8002676:	438a      	bics	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	183b      	adds	r3, r7, r0
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <HAL_UART_IRQHandler+0x2a0>)
 8002696:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269c:	0018      	movs	r0, r3
 800269e:	f7fe fbfb 	bl	8000e98 <HAL_DMA_Abort_IT>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d01a      	beq.n	80026dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b0:	0018      	movs	r0, r3
 80026b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b4:	e012      	b.n	80026dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f9c5 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026be:	e00d      	b.n	80026dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f9c0 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c8:	e008      	b.n	80026dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 f9bb 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2284      	movs	r2, #132	@ 0x84
 80026d6:	2100      	movs	r1, #0
 80026d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026da:	e187      	b.n	80029ec <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80026de:	e185      	b.n	80029ec <HAL_UART_IRQHandler+0x5a4>
 80026e0:	0000080f 	.word	0x0000080f
 80026e4:	04000120 	.word	0x04000120
 80026e8:	080036f3 	.word	0x080036f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d000      	beq.n	80026f6 <HAL_UART_IRQHandler+0x2ae>
 80026f4:	e139      	b.n	800296a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80026f6:	23a4      	movs	r3, #164	@ 0xa4
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2210      	movs	r2, #16
 80026fe:	4013      	ands	r3, r2
 8002700:	d100      	bne.n	8002704 <HAL_UART_IRQHandler+0x2bc>
 8002702:	e132      	b.n	800296a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002704:	23a0      	movs	r3, #160	@ 0xa0
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2210      	movs	r2, #16
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_UART_IRQHandler+0x2ca>
 8002710:	e12b      	b.n	800296a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2210      	movs	r2, #16
 8002718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2240      	movs	r2, #64	@ 0x40
 8002722:	4013      	ands	r3, r2
 8002724:	2b40      	cmp	r3, #64	@ 0x40
 8002726:	d000      	beq.n	800272a <HAL_UART_IRQHandler+0x2e2>
 8002728:	e09f      	b.n	800286a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	217e      	movs	r1, #126	@ 0x7e
 8002734:	187b      	adds	r3, r7, r1
 8002736:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002738:	187b      	adds	r3, r7, r1
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d100      	bne.n	8002742 <HAL_UART_IRQHandler+0x2fa>
 8002740:	e156      	b.n	80029f0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2258      	movs	r2, #88	@ 0x58
 8002746:	5a9b      	ldrh	r3, [r3, r2]
 8002748:	187a      	adds	r2, r7, r1
 800274a:	8812      	ldrh	r2, [r2, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d300      	bcc.n	8002752 <HAL_UART_IRQHandler+0x30a>
 8002750:	e14e      	b.n	80029f0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	187a      	adds	r2, r7, r1
 8002756:	215a      	movs	r1, #90	@ 0x5a
 8002758:	8812      	ldrh	r2, [r2, #0]
 800275a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b20      	cmp	r3, #32
 8002764:	d06f      	beq.n	8002846 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002766:	f3ef 8310 	mrs	r3, PRIMASK
 800276a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800276e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002770:	2301      	movs	r3, #1
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002776:	f383 8810 	msr	PRIMASK, r3
}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	499e      	ldr	r1, [pc, #632]	@ (8002a00 <HAL_UART_IRQHandler+0x5b8>)
 8002788:	400a      	ands	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800278e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	f383 8810 	msr	PRIMASK, r3
}
 8002796:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002798:	f3ef 8310 	mrs	r3, PRIMASK
 800279c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800279e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80027a2:	2301      	movs	r3, #1
 80027a4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a8:	f383 8810 	msr	PRIMASK, r3
}
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	438a      	bics	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ca:	f3ef 8310 	mrs	r3, PRIMASK
 80027ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80027d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80027d4:	2301      	movs	r3, #1
 80027d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027da:	f383 8810 	msr	PRIMASK, r3
}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2140      	movs	r1, #64	@ 0x40
 80027ec:	438a      	bics	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027f2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027f6:	f383 8810 	msr	PRIMASK, r3
}
 80027fa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	2120      	movs	r1, #32
 8002802:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280a:	f3ef 8310 	mrs	r3, PRIMASK
 800280e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002814:	2301      	movs	r3, #1
 8002816:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2110      	movs	r1, #16
 800282c:	438a      	bics	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002832:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002836:	f383 8810 	msr	PRIMASK, r3
}
 800283a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002840:	0018      	movs	r0, r3
 8002842:	f7fe faf1 	bl	8000e28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2258      	movs	r2, #88	@ 0x58
 8002850:	5a9a      	ldrh	r2, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	215a      	movs	r1, #90	@ 0x5a
 8002856:	5a5b      	ldrh	r3, [r3, r1]
 8002858:	b29b      	uxth	r3, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f7fd fd72 	bl	800034c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002868:	e0c2      	b.n	80029f0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2258      	movs	r2, #88	@ 0x58
 800286e:	5a99      	ldrh	r1, [r3, r2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	225a      	movs	r2, #90	@ 0x5a
 8002874:	5a9b      	ldrh	r3, [r3, r2]
 8002876:	b29a      	uxth	r2, r3
 8002878:	208e      	movs	r0, #142	@ 0x8e
 800287a:	183b      	adds	r3, r7, r0
 800287c:	1a8a      	subs	r2, r1, r2
 800287e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	225a      	movs	r2, #90	@ 0x5a
 8002884:	5a9b      	ldrh	r3, [r3, r2]
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d100      	bne.n	800288e <HAL_UART_IRQHandler+0x446>
 800288c:	e0b2      	b.n	80029f4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800288e:	183b      	adds	r3, r7, r0
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d100      	bne.n	8002898 <HAL_UART_IRQHandler+0x450>
 8002896:	e0ad      	b.n	80029f4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002898:	f3ef 8310 	mrs	r3, PRIMASK
 800289c:	60fb      	str	r3, [r7, #12]
  return(result);
 800289e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a0:	2488      	movs	r4, #136	@ 0x88
 80028a2:	193a      	adds	r2, r7, r4
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	2301      	movs	r3, #1
 80028a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f383 8810 	msr	PRIMASK, r3
}
 80028b0:	46c0      	nop			@ (mov r8, r8)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4951      	ldr	r1, [pc, #324]	@ (8002a04 <HAL_UART_IRQHandler+0x5bc>)
 80028be:	400a      	ands	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f383 8810 	msr	PRIMASK, r3
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d0:	f3ef 8310 	mrs	r3, PRIMASK
 80028d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80028d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	2484      	movs	r4, #132	@ 0x84
 80028da:	193a      	adds	r2, r7, r4
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	2301      	movs	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			@ (mov r8, r8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2101      	movs	r1, #1
 80028f6:	438a      	bics	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2280      	movs	r2, #128	@ 0x80
 800290c:	2120      	movs	r1, #32
 800290e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800291c:	f3ef 8310 	mrs	r3, PRIMASK
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002924:	2480      	movs	r4, #128	@ 0x80
 8002926:	193a      	adds	r2, r7, r4
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	f383 8810 	msr	PRIMASK, r3
}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2110      	movs	r1, #16
 8002942:	438a      	bics	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	193b      	adds	r3, r7, r4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800295a:	183b      	adds	r3, r7, r0
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0011      	movs	r1, r2
 8002962:	0018      	movs	r0, r3
 8002964:	f7fd fcf2 	bl	800034c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002968:	e044      	b.n	80029f4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800296a:	23a4      	movs	r3, #164	@ 0xa4
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	035b      	lsls	r3, r3, #13
 8002974:	4013      	ands	r3, r2
 8002976:	d010      	beq.n	800299a <HAL_UART_IRQHandler+0x552>
 8002978:	239c      	movs	r3, #156	@ 0x9c
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	03db      	lsls	r3, r3, #15
 8002982:	4013      	ands	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2280      	movs	r2, #128	@ 0x80
 800298c:	0352      	lsls	r2, r2, #13
 800298e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f000 feef 	bl	8003776 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002998:	e02f      	b.n	80029fa <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800299a:	23a4      	movs	r3, #164	@ 0xa4
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2280      	movs	r2, #128	@ 0x80
 80029a2:	4013      	ands	r3, r2
 80029a4:	d00f      	beq.n	80029c6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029a6:	23a0      	movs	r3, #160	@ 0xa0
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2280      	movs	r2, #128	@ 0x80
 80029ae:	4013      	ands	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01e      	beq.n	80029f8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	0010      	movs	r0, r2
 80029c2:	4798      	blx	r3
    }
    return;
 80029c4:	e018      	b.n	80029f8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029c6:	23a4      	movs	r3, #164	@ 0xa4
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2240      	movs	r2, #64	@ 0x40
 80029ce:	4013      	ands	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_UART_IRQHandler+0x5b2>
 80029d2:	23a0      	movs	r3, #160	@ 0xa0
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	4013      	ands	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fe9d 	bl	8003720 <UART_EndTransmit_IT>
    return;
 80029e6:	e008      	b.n	80029fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	e006      	b.n	80029fa <HAL_UART_IRQHandler+0x5b2>
    return;
 80029ec:	46c0      	nop			@ (mov r8, r8)
 80029ee:	e004      	b.n	80029fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	e002      	b.n	80029fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	e000      	b.n	80029fa <HAL_UART_IRQHandler+0x5b2>
    return;
 80029f8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b02b      	add	sp, #172	@ 0xac
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	fffffeff 	.word	0xfffffeff
 8002a04:	fffffedf 	.word	0xfffffedf

08002a08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a64:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2280      	movs	r2, #128	@ 0x80
 8002a6a:	589b      	ldr	r3, [r3, r2]
 8002a6c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2284      	movs	r2, #132	@ 0x84
 8002a88:	589b      	ldr	r3, [r3, r2]
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b002      	add	sp, #8
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a9c:	231e      	movs	r3, #30
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4abe      	ldr	r2, [pc, #760]	@ (8002dbc <UART_SetConfig+0x328>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4ab9      	ldr	r2, [pc, #740]	@ (8002dc0 <UART_SetConfig+0x32c>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4ab0      	ldr	r2, [pc, #704]	@ (8002dc4 <UART_SetConfig+0x330>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4aac      	ldr	r2, [pc, #688]	@ (8002dc8 <UART_SetConfig+0x334>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d127      	bne.n	8002b6a <UART_SetConfig+0xd6>
 8002b1a:	4bac      	ldr	r3, [pc, #688]	@ (8002dcc <UART_SetConfig+0x338>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	2203      	movs	r2, #3
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d00d      	beq.n	8002b42 <UART_SetConfig+0xae>
 8002b26:	d81b      	bhi.n	8002b60 <UART_SetConfig+0xcc>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d014      	beq.n	8002b56 <UART_SetConfig+0xc2>
 8002b2c:	d818      	bhi.n	8002b60 <UART_SetConfig+0xcc>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <UART_SetConfig+0xa4>
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d00a      	beq.n	8002b4c <UART_SetConfig+0xb8>
 8002b36:	e013      	b.n	8002b60 <UART_SetConfig+0xcc>
 8002b38:	231f      	movs	r3, #31
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e0bd      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002b42:	231f      	movs	r3, #31
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2202      	movs	r2, #2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e0b8      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002b4c:	231f      	movs	r3, #31
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2204      	movs	r2, #4
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e0b3      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002b56:	231f      	movs	r3, #31
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e0ae      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002b60:	231f      	movs	r3, #31
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2210      	movs	r2, #16
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e0a9      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a98      	ldr	r2, [pc, #608]	@ (8002dd0 <UART_SetConfig+0x33c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d134      	bne.n	8002bde <UART_SetConfig+0x14a>
 8002b74:	4b95      	ldr	r3, [pc, #596]	@ (8002dcc <UART_SetConfig+0x338>)
 8002b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b78:	23c0      	movs	r3, #192	@ 0xc0
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	22c0      	movs	r2, #192	@ 0xc0
 8002b80:	0292      	lsls	r2, r2, #10
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d017      	beq.n	8002bb6 <UART_SetConfig+0x122>
 8002b86:	22c0      	movs	r2, #192	@ 0xc0
 8002b88:	0292      	lsls	r2, r2, #10
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d822      	bhi.n	8002bd4 <UART_SetConfig+0x140>
 8002b8e:	2280      	movs	r2, #128	@ 0x80
 8002b90:	0292      	lsls	r2, r2, #10
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <UART_SetConfig+0x136>
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	0292      	lsls	r2, r2, #10
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d81a      	bhi.n	8002bd4 <UART_SetConfig+0x140>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <UART_SetConfig+0x118>
 8002ba2:	2280      	movs	r2, #128	@ 0x80
 8002ba4:	0252      	lsls	r2, r2, #9
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00a      	beq.n	8002bc0 <UART_SetConfig+0x12c>
 8002baa:	e013      	b.n	8002bd4 <UART_SetConfig+0x140>
 8002bac:	231f      	movs	r3, #31
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e083      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002bb6:	231f      	movs	r3, #31
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2202      	movs	r2, #2
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e07e      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002bc0:	231f      	movs	r3, #31
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e079      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002bca:	231f      	movs	r3, #31
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2208      	movs	r2, #8
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e074      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002bd4:	231f      	movs	r3, #31
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2210      	movs	r2, #16
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e06f      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd4 <UART_SetConfig+0x340>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d134      	bne.n	8002c52 <UART_SetConfig+0x1be>
 8002be8:	4b78      	ldr	r3, [pc, #480]	@ (8002dcc <UART_SetConfig+0x338>)
 8002bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bec:	23c0      	movs	r3, #192	@ 0xc0
 8002bee:	031b      	lsls	r3, r3, #12
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	22c0      	movs	r2, #192	@ 0xc0
 8002bf4:	0312      	lsls	r2, r2, #12
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d017      	beq.n	8002c2a <UART_SetConfig+0x196>
 8002bfa:	22c0      	movs	r2, #192	@ 0xc0
 8002bfc:	0312      	lsls	r2, r2, #12
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d822      	bhi.n	8002c48 <UART_SetConfig+0x1b4>
 8002c02:	2280      	movs	r2, #128	@ 0x80
 8002c04:	0312      	lsls	r2, r2, #12
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d019      	beq.n	8002c3e <UART_SetConfig+0x1aa>
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	0312      	lsls	r2, r2, #12
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d81a      	bhi.n	8002c48 <UART_SetConfig+0x1b4>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d004      	beq.n	8002c20 <UART_SetConfig+0x18c>
 8002c16:	2280      	movs	r2, #128	@ 0x80
 8002c18:	02d2      	lsls	r2, r2, #11
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00a      	beq.n	8002c34 <UART_SetConfig+0x1a0>
 8002c1e:	e013      	b.n	8002c48 <UART_SetConfig+0x1b4>
 8002c20:	231f      	movs	r3, #31
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e049      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e044      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c34:	231f      	movs	r3, #31
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2204      	movs	r2, #4
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e03f      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2208      	movs	r2, #8
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e03a      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c48:	231f      	movs	r3, #31
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e035      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a60      	ldr	r2, [pc, #384]	@ (8002dd8 <UART_SetConfig+0x344>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d104      	bne.n	8002c66 <UART_SetConfig+0x1d2>
 8002c5c:	231f      	movs	r3, #31
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e02b      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ddc <UART_SetConfig+0x348>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d104      	bne.n	8002c7a <UART_SetConfig+0x1e6>
 8002c70:	231f      	movs	r3, #31
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e021      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a58      	ldr	r2, [pc, #352]	@ (8002de0 <UART_SetConfig+0x34c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d104      	bne.n	8002c8e <UART_SetConfig+0x1fa>
 8002c84:	231f      	movs	r3, #31
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e017      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a54      	ldr	r2, [pc, #336]	@ (8002de4 <UART_SetConfig+0x350>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d104      	bne.n	8002ca2 <UART_SetConfig+0x20e>
 8002c98:	231f      	movs	r3, #31
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e00d      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a50      	ldr	r2, [pc, #320]	@ (8002de8 <UART_SetConfig+0x354>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d104      	bne.n	8002cb6 <UART_SetConfig+0x222>
 8002cac:	231f      	movs	r3, #31
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e003      	b.n	8002cbe <UART_SetConfig+0x22a>
 8002cb6:	231f      	movs	r3, #31
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	2210      	movs	r2, #16
 8002cbc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d15c      	bne.n	8002d84 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002cca:	231f      	movs	r3, #31
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d015      	beq.n	8002d00 <UART_SetConfig+0x26c>
 8002cd4:	dc18      	bgt.n	8002d08 <UART_SetConfig+0x274>
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d00d      	beq.n	8002cf6 <UART_SetConfig+0x262>
 8002cda:	dc15      	bgt.n	8002d08 <UART_SetConfig+0x274>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <UART_SetConfig+0x252>
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d005      	beq.n	8002cf0 <UART_SetConfig+0x25c>
 8002ce4:	e010      	b.n	8002d08 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce6:	f7ff f8a1 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]
        break;
 8002cee:	e012      	b.n	8002d16 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8002dec <UART_SetConfig+0x358>)
 8002cf2:	61bb      	str	r3, [r7, #24]
        break;
 8002cf4:	e00f      	b.n	8002d16 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf6:	f7ff f81d 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	61bb      	str	r3, [r7, #24]
        break;
 8002cfe:	e00a      	b.n	8002d16 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	61bb      	str	r3, [r7, #24]
        break;
 8002d06:	e006      	b.n	8002d16 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d0c:	231e      	movs	r3, #30
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
        break;
 8002d14:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d100      	bne.n	8002d1e <UART_SetConfig+0x28a>
 8002d1c:	e095      	b.n	8002e4a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	005a      	lsls	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	18d2      	adds	r2, r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f7fd f9ef 	bl	8000114 <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d91c      	bls.n	8002d7a <UART_SetConfig+0x2e6>
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	025b      	lsls	r3, r3, #9
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d217      	bcs.n	8002d7a <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	200e      	movs	r0, #14
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	210f      	movs	r1, #15
 8002d54:	438a      	bics	r2, r1
 8002d56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2207      	movs	r2, #7
 8002d60:	4013      	ands	r3, r2
 8002d62:	b299      	uxth	r1, r3
 8002d64:	183b      	adds	r3, r7, r0
 8002d66:	183a      	adds	r2, r7, r0
 8002d68:	8812      	ldrh	r2, [r2, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	183a      	adds	r2, r7, r0
 8002d74:	8812      	ldrh	r2, [r2, #0]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	e067      	b.n	8002e4a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002d7a:	231e      	movs	r3, #30
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e062      	b.n	8002e4a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d84:	231f      	movs	r3, #31
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d030      	beq.n	8002df0 <UART_SetConfig+0x35c>
 8002d8e:	dc33      	bgt.n	8002df8 <UART_SetConfig+0x364>
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d00d      	beq.n	8002db0 <UART_SetConfig+0x31c>
 8002d94:	dc30      	bgt.n	8002df8 <UART_SetConfig+0x364>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <UART_SetConfig+0x30c>
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d005      	beq.n	8002daa <UART_SetConfig+0x316>
 8002d9e:	e02b      	b.n	8002df8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da0:	f7ff f844 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002da4:	0003      	movs	r3, r0
 8002da6:	61bb      	str	r3, [r7, #24]
        break;
 8002da8:	e02d      	b.n	8002e06 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <UART_SetConfig+0x358>)
 8002dac:	61bb      	str	r3, [r7, #24]
        break;
 8002dae:	e02a      	b.n	8002e06 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db0:	f7fe ffc0 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8002db4:	0003      	movs	r3, r0
 8002db6:	61bb      	str	r3, [r7, #24]
        break;
 8002db8:	e025      	b.n	8002e06 <UART_SetConfig+0x372>
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	efff69f3 	.word	0xefff69f3
 8002dc0:	ffffcfff 	.word	0xffffcfff
 8002dc4:	fffff4ff 	.word	0xfffff4ff
 8002dc8:	40013800 	.word	0x40013800
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40004400 	.word	0x40004400
 8002dd4:	40004800 	.word	0x40004800
 8002dd8:	40004c00 	.word	0x40004c00
 8002ddc:	40005000 	.word	0x40005000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	40011800 	.word	0x40011800
 8002de8:	40011c00 	.word	0x40011c00
 8002dec:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	61bb      	str	r3, [r7, #24]
        break;
 8002df6:	e006      	b.n	8002e06 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dfc:	231e      	movs	r3, #30
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
        break;
 8002e04:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01e      	beq.n	8002e4a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	085a      	lsrs	r2, r3, #1
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	18d2      	adds	r2, r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	0010      	movs	r0, r2
 8002e1e:	f7fd f979 	bl	8000114 <__udivsi3>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d90a      	bls.n	8002e42 <UART_SetConfig+0x3ae>
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	2380      	movs	r3, #128	@ 0x80
 8002e30:	025b      	lsls	r3, r3, #9
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d205      	bcs.n	8002e42 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	e003      	b.n	8002e4a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e42:	231e      	movs	r3, #30
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e56:	231e      	movs	r3, #30
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	781b      	ldrb	r3, [r3, #0]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b008      	add	sp, #32
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	2208      	movs	r2, #8
 8002e72:	4013      	ands	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa8 <UART_AdvFeatureConfig+0x144>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	2201      	movs	r2, #1
 8002e94:	4013      	ands	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a43      	ldr	r2, [pc, #268]	@ (8002fac <UART_AdvFeatureConfig+0x148>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb0 <UART_AdvFeatureConfig+0x14c>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <UART_AdvFeatureConfig+0x150>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	2210      	movs	r2, #16
 8002efa:	4013      	ands	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb8 <UART_AdvFeatureConfig+0x154>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4a25      	ldr	r2, [pc, #148]	@ (8002fbc <UART_AdvFeatureConfig+0x158>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	2240      	movs	r2, #64	@ 0x40
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d01d      	beq.n	8002f7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <UART_AdvFeatureConfig+0x15c>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f5e:	2380      	movs	r3, #128	@ 0x80
 8002f60:	035b      	lsls	r3, r3, #13
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d10b      	bne.n	8002f7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <UART_AdvFeatureConfig+0x160>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	2280      	movs	r2, #128	@ 0x80
 8002f84:	4013      	ands	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002fc8 <UART_AdvFeatureConfig+0x164>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  }
}
 8002fa0:	46c0      	nop			@ (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	ffff7fff 	.word	0xffff7fff
 8002fac:	fffdffff 	.word	0xfffdffff
 8002fb0:	fffeffff 	.word	0xfffeffff
 8002fb4:	fffbffff 	.word	0xfffbffff
 8002fb8:	ffffefff 	.word	0xffffefff
 8002fbc:	ffffdfff 	.word	0xffffdfff
 8002fc0:	ffefffff 	.word	0xffefffff
 8002fc4:	ff9fffff 	.word	0xff9fffff
 8002fc8:	fff7ffff 	.word	0xfff7ffff

08002fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b092      	sub	sp, #72	@ 0x48
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2284      	movs	r2, #132	@ 0x84
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fdc:	f7fd fd6a 	bl	8000ab4 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2208      	movs	r2, #8
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d12c      	bne.n	800304c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	0391      	lsls	r1, r2, #14
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4a46      	ldr	r2, [pc, #280]	@ (8003114 <UART_CheckIdleState+0x148>)
 8002ffc:	9200      	str	r2, [sp, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f000 f88c 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d021      	beq.n	800304c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003008:	f3ef 8310 	mrs	r3, PRIMASK
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003010:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003012:	2301      	movs	r3, #1
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	f383 8810 	msr	PRIMASK, r3
}
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2180      	movs	r1, #128	@ 0x80
 800302a:	438a      	bics	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2278      	movs	r2, #120	@ 0x78
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e05f      	b.n	800310c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2204      	movs	r2, #4
 8003054:	4013      	ands	r3, r2
 8003056:	2b04      	cmp	r3, #4
 8003058:	d146      	bne.n	80030e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800305c:	2280      	movs	r2, #128	@ 0x80
 800305e:	03d1      	lsls	r1, r2, #15
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4a2c      	ldr	r2, [pc, #176]	@ (8003114 <UART_CheckIdleState+0x148>)
 8003064:	9200      	str	r2, [sp, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	f000 f858 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 800306c:	1e03      	subs	r3, r0, #0
 800306e:	d03b      	beq.n	80030e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003070:	f3ef 8310 	mrs	r3, PRIMASK
 8003074:	60fb      	str	r3, [r7, #12]
  return(result);
 8003076:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003078:	637b      	str	r3, [r7, #52]	@ 0x34
 800307a:	2301      	movs	r3, #1
 800307c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f383 8810 	msr	PRIMASK, r3
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4921      	ldr	r1, [pc, #132]	@ (8003118 <UART_CheckIdleState+0x14c>)
 8003092:	400a      	ands	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a2:	f3ef 8310 	mrs	r3, PRIMASK
 80030a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80030a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ac:	2301      	movs	r3, #1
 80030ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	438a      	bics	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	2120      	movs	r1, #32
 80030da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2278      	movs	r2, #120	@ 0x78
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e011      	b.n	800310c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2280      	movs	r2, #128	@ 0x80
 80030f2:	2120      	movs	r1, #32
 80030f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2278      	movs	r2, #120	@ 0x78
 8003106:	2100      	movs	r1, #0
 8003108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b010      	add	sp, #64	@ 0x40
 8003112:	bd80      	pop	{r7, pc}
 8003114:	01ffffff 	.word	0x01ffffff
 8003118:	fffffedf 	.word	0xfffffedf

0800311c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312c:	e051      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3301      	adds	r3, #1
 8003132:	d04e      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003134:	f7fd fcbe 	bl	8000ab4 <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	429a      	cmp	r2, r3
 8003142:	d302      	bcc.n	800314a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e051      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2204      	movs	r2, #4
 8003156:	4013      	ands	r3, r2
 8003158:	d03b      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b80      	cmp	r3, #128	@ 0x80
 800315e:	d038      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b40      	cmp	r3, #64	@ 0x40
 8003164:	d035      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2208      	movs	r2, #8
 800316e:	4013      	ands	r3, r2
 8003170:	2b08      	cmp	r3, #8
 8003172:	d111      	bne.n	8003198 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	0018      	movs	r0, r3
 8003180:	f000 f900 	bl	8003384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2284      	movs	r2, #132	@ 0x84
 8003188:	2108      	movs	r1, #8
 800318a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2278      	movs	r2, #120	@ 0x78
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e02c      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	401a      	ands	r2, r3
 80031a4:	2380      	movs	r3, #128	@ 0x80
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d112      	bne.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2280      	movs	r2, #128	@ 0x80
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f8e3 	bl	8003384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2284      	movs	r2, #132	@ 0x84
 80031c2:	2120      	movs	r1, #32
 80031c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2278      	movs	r2, #120	@ 0x78
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e00f      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	425a      	negs	r2, r3
 80031e2:	4153      	adcs	r3, r2
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	001a      	movs	r2, r3
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d09e      	beq.n	800312e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b004      	add	sp, #16
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b090      	sub	sp, #64	@ 0x40
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	1dbb      	adds	r3, r7, #6
 8003208:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1dba      	adds	r2, r7, #6
 8003214:	2158      	movs	r1, #88	@ 0x58
 8003216:	8812      	ldrh	r2, [r2, #0]
 8003218:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2284      	movs	r2, #132	@ 0x84
 800321e:	2100      	movs	r1, #0
 8003220:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	2122      	movs	r1, #34	@ 0x22
 8003228:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	2b00      	cmp	r3, #0
 8003230:	d028      	beq.n	8003284 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	4a3e      	ldr	r2, [pc, #248]	@ (8003330 <UART_Start_Receive_DMA+0x134>)
 8003238:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323e:	4a3d      	ldr	r2, [pc, #244]	@ (8003334 <UART_Start_Receive_DMA+0x138>)
 8003240:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	4a3c      	ldr	r2, [pc, #240]	@ (8003338 <UART_Start_Receive_DMA+0x13c>)
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324e:	2200      	movs	r2, #0
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3324      	adds	r3, #36	@ 0x24
 800325c:	0019      	movs	r1, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	001a      	movs	r2, r3
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	f7fd fd78 	bl	8000d5c <HAL_DMA_Start_IT>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d009      	beq.n	8003284 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2284      	movs	r2, #132	@ 0x84
 8003274:	2110      	movs	r1, #16
 8003276:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2280      	movs	r2, #128	@ 0x80
 800327c:	2120      	movs	r1, #32
 800327e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e050      	b.n	8003326 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d019      	beq.n	80032c0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328c:	f3ef 8310 	mrs	r3, PRIMASK
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003296:	2301      	movs	r3, #1
 8003298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2180      	movs	r1, #128	@ 0x80
 80032ae:	0049      	lsls	r1, r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	f383 8810 	msr	PRIMASK, r3
}
 80032be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c0:	f3ef 8310 	mrs	r3, PRIMASK
 80032c4:	613b      	str	r3, [r7, #16]
  return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f2:	f3ef 8310 	mrs	r3, PRIMASK
 80032f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80032f8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80032fc:	2301      	movs	r3, #1
 80032fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2140      	movs	r1, #64	@ 0x40
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	f383 8810 	msr	PRIMASK, r3
}
 8003322:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b010      	add	sp, #64	@ 0x40
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	08003501 	.word	0x08003501
 8003334:	0800362d 	.word	0x0800362d
 8003338:	0800366f 	.word	0x0800366f

0800333c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	60bb      	str	r3, [r7, #8]
  return(result);
 800334a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	2301      	movs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	21c0      	movs	r1, #192	@ 0xc0
 8003366:	438a      	bics	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b006      	add	sp, #24
 8003382:	bd80      	pop	{r7, pc}

08003384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	@ 0x38
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338c:	f3ef 8310 	mrs	r3, PRIMASK
 8003390:	617b      	str	r3, [r7, #20]
  return(result);
 8003392:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
 8003396:	2301      	movs	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4926      	ldr	r1, [pc, #152]	@ (8003448 <UART_EndRxTransfer+0xc4>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	623b      	str	r3, [r7, #32]
  return(result);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d118      	bne.n	800342a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f8:	f3ef 8310 	mrs	r3, PRIMASK
 80033fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003402:	2301      	movs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			@ (mov r8, r8)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2110      	movs	r1, #16
 800341a:	438a      	bics	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f383 8810 	msr	PRIMASK, r3
}
 8003428:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2280      	movs	r2, #128	@ 0x80
 800342e:	2120      	movs	r1, #32
 8003430:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b00e      	add	sp, #56	@ 0x38
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	fffffedf 	.word	0xfffffedf

0800344c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	@ 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b20      	cmp	r3, #32
 8003460:	d035      	beq.n	80034ce <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	2252      	movs	r2, #82	@ 0x52
 8003466:	2100      	movs	r1, #0
 8003468:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346a:	f3ef 8310 	mrs	r3, PRIMASK
 800346e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003470:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003474:	2301      	movs	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	438a      	bics	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349c:	f3ef 8310 	mrs	r3, PRIMASK
 80034a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80034a2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a6:	2301      	movs	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2140      	movs	r1, #64	@ 0x40
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	e004      	b.n	80034d8 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80034ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff fa99 	bl	8002a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	46c0      	nop			@ (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b00c      	add	sp, #48	@ 0x30
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff fa91 	bl	8002a18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b004      	add	sp, #16
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b094      	sub	sp, #80	@ 0x50
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b20      	cmp	r3, #32
 8003514:	d06f      	beq.n	80035f6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003518:	225a      	movs	r2, #90	@ 0x5a
 800351a:	2100      	movs	r1, #0
 800351c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351e:	f3ef 8310 	mrs	r3, PRIMASK
 8003522:	61bb      	str	r3, [r7, #24]
  return(result);
 8003524:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003528:	2301      	movs	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	493a      	ldr	r1, [pc, #232]	@ (8003628 <UART_DMAReceiveCplt+0x128>)
 8003540:	400a      	ands	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003546:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f383 8810 	msr	PRIMASK, r3
}
 800354e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003550:	f3ef 8310 	mrs	r3, PRIMASK
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003558:	647b      	str	r3, [r7, #68]	@ 0x44
 800355a:	2301      	movs	r3, #1
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	438a      	bics	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003582:	f3ef 8310 	mrs	r3, PRIMASK
 8003586:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	643b      	str	r3, [r7, #64]	@ 0x40
 800358c:	2301      	movs	r3, #1
 800358e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003592:	f383 8810 	msr	PRIMASK, r3
}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2140      	movs	r1, #64	@ 0x40
 80035a4:	438a      	bics	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ae:	f383 8810 	msr	PRIMASK, r3
}
 80035b2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b6:	2280      	movs	r2, #128	@ 0x80
 80035b8:	2120      	movs	r1, #32
 80035ba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d118      	bne.n	80035f6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c4:	f3ef 8310 	mrs	r3, PRIMASK
 80035c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035ce:	2301      	movs	r3, #1
 80035d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f383 8810 	msr	PRIMASK, r3
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2110      	movs	r1, #16
 80035e6:	438a      	bics	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f383 8810 	msr	PRIMASK, r3
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f8:	2200      	movs	r2, #0
 80035fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003606:	2258      	movs	r2, #88	@ 0x58
 8003608:	5a9a      	ldrh	r2, [r3, r2]
 800360a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f7fc fe9c 	bl	800034c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003614:	e003      	b.n	800361e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff fa05 	bl	8002a28 <HAL_UART_RxCpltCallback>
}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b014      	add	sp, #80	@ 0x50
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	fffffeff 	.word	0xfffffeff

0800362c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10a      	bne.n	800365e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2258      	movs	r2, #88	@ 0x58
 800364c:	5a9b      	ldrh	r3, [r3, r2]
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	0011      	movs	r1, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f7fc fe78 	bl	800034c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800365c:	e003      	b.n	8003666 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	0018      	movs	r0, r3
 8003662:	f7ff f9e9 	bl	8002a38 <HAL_UART_RxHalfCpltCallback>
}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003680:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2280      	movs	r2, #128	@ 0x80
 8003686:	589b      	ldr	r3, [r3, r2]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2280      	movs	r2, #128	@ 0x80
 8003692:	4013      	ands	r3, r2
 8003694:	2b80      	cmp	r3, #128	@ 0x80
 8003696:	d10a      	bne.n	80036ae <UART_DMAError+0x40>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b21      	cmp	r3, #33	@ 0x21
 800369c:	d107      	bne.n	80036ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2252      	movs	r2, #82	@ 0x52
 80036a2:	2100      	movs	r1, #0
 80036a4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff fe47 	bl	800333c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2240      	movs	r2, #64	@ 0x40
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b40      	cmp	r3, #64	@ 0x40
 80036ba:	d10a      	bne.n	80036d2 <UART_DMAError+0x64>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b22      	cmp	r3, #34	@ 0x22
 80036c0:	d107      	bne.n	80036d2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	225a      	movs	r2, #90	@ 0x5a
 80036c6:	2100      	movs	r1, #0
 80036c8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff fe59 	bl	8003384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2284      	movs	r2, #132	@ 0x84
 80036d6:	589b      	ldr	r3, [r3, r2]
 80036d8:	2210      	movs	r2, #16
 80036da:	431a      	orrs	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2184      	movs	r1, #132	@ 0x84
 80036e0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7ff f9af 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b006      	add	sp, #24
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	225a      	movs	r2, #90	@ 0x5a
 8003704:	2100      	movs	r1, #0
 8003706:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2252      	movs	r2, #82	@ 0x52
 800370c:	2100      	movs	r1, #0
 800370e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff f998 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003728:	f3ef 8310 	mrs	r3, PRIMASK
 800372c:	60bb      	str	r3, [r7, #8]
  return(result);
 800372e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	2301      	movs	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			@ (mov r8, r8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2140      	movs	r1, #64	@ 0x40
 800374a:	438a      	bics	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff f94d 	bl	8002a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b006      	add	sp, #24
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003786:	b5b0      	push	{r4, r5, r7, lr}
 8003788:	b08a      	sub	sp, #40	@ 0x28
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	1dbb      	adds	r3, r7, #6
 8003792:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2280      	movs	r2, #128	@ 0x80
 8003798:	589b      	ldr	r3, [r3, r2]
 800379a:	2b20      	cmp	r3, #32
 800379c:	d156      	bne.n	800384c <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80037a4:	1dbb      	adds	r3, r7, #6
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e04e      	b.n	800384e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	015b      	lsls	r3, r3, #5
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d109      	bne.n	80037d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2201      	movs	r2, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d001      	beq.n	80037d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e03e      	b.n	800384e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80037dc:	2527      	movs	r5, #39	@ 0x27
 80037de:	197c      	adds	r4, r7, r5
 80037e0:	1dbb      	adds	r3, r7, #6
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fd07 	bl	80031fc <UART_Start_Receive_DMA>
 80037ee:	0003      	movs	r3, r0
 80037f0:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80037f2:	197b      	adds	r3, r7, r5
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d124      	bne.n	8003844 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d11c      	bne.n	800383c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380a:	f3ef 8310 	mrs	r3, PRIMASK
 800380e:	617b      	str	r3, [r7, #20]
  return(result);
 8003810:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	2301      	movs	r3, #1
 8003816:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f383 8810 	msr	PRIMASK, r3
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2110      	movs	r1, #16
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f383 8810 	msr	PRIMASK, r3
}
 800383a:	e003      	b.n	8003844 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800383c:	2327      	movs	r3, #39	@ 0x27
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003844:	2327      	movs	r3, #39	@ 0x27
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	e000      	b.n	800384e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b00a      	add	sp, #40	@ 0x28
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0018      	movs	r0, r3
 8003866:	f000 fb85 	bl	8003f74 <malloc>
 800386a:	0003      	movs	r3, r0
 800386c:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}

08003878 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <ATC_Free+0x26>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	0018      	movs	r0, r3
 8003894:	f000 fb78 	bl	8003f88 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
  }
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b002      	add	sp, #8
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8a9b      	ldrh	r3, [r3, #20]
 80038bc:	001a      	movs	r2, r3
 80038be:	2100      	movs	r1, #0
 80038c0:	f000 fc1e 	bl	8004100 <memset>
}
 80038c4:	46c0      	nop			@ (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	1dbb      	adds	r3, r7, #6
 80038d8:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 80038da:	2417      	movs	r4, #23
 80038dc:	193b      	adds	r3, r7, r4
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1dba      	adds	r2, r7, #6
 80038e6:	8812      	ldrh	r2, [r2, #0]
 80038e8:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	1dbb      	adds	r3, r7, #6
 80038f0:	881a      	ldrh	r2, [r3, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	0019      	movs	r1, r3
 80038f6:	f7fe fc03 	bl	8002100 <HAL_UART_Transmit_DMA>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d103      	bne.n	8003906 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e000      	b.n	8003908 <ATC_TxRaw+0x3c>
      break;
 8003906:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8003908:	2317      	movs	r3, #23
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	781b      	ldrb	r3, [r3, #0]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b007      	add	sp, #28
 8003914:	bd90      	pop	{r4, r7, pc}

08003916 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	0018      	movs	r0, r3
 8003924:	f7ff f898 	bl	8002a58 <HAL_UART_GetState>
 8003928:	0003      	movs	r3, r0
 800392a:	2b21      	cmp	r3, #33	@ 0x21
 800392c:	d007      	beq.n	800393e <ATC_TxBusy+0x28>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	f7ff f890 	bl	8002a58 <HAL_UART_GetState>
 8003938:	0003      	movs	r3, r0
 800393a:	2b23      	cmp	r3, #35	@ 0x23
 800393c:	d101      	bne.n	8003942 <ATC_TxBusy+0x2c>
  {
    return true;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8003942:	2300      	movs	r3, #0
  }
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b002      	add	sp, #8
 800394a:	bd80      	pop	{r7, pc}

0800394c <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8003956:	230f      	movs	r3, #15
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 800395e:	f7fd f8a9 	bl	8000ab4 <HAL_GetTick>
 8003962:	0003      	movs	r3, r0
 8003964:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8003966:	2001      	movs	r0, #1
 8003968:	f000 faf7 	bl	8003f5a <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	0018      	movs	r0, r3
 8003972:	f7ff f871 	bl	8002a58 <HAL_UART_GetState>
 8003976:	0003      	movs	r3, r0
 8003978:	2b22      	cmp	r3, #34	@ 0x22
 800397a:	d007      	beq.n	800398c <ATC_TxWait+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff f869 	bl	8002a58 <HAL_UART_GetState>
 8003986:	0003      	movs	r3, r0
 8003988:	2b20      	cmp	r3, #32
 800398a:	d104      	bne.n	8003996 <ATC_TxWait+0x4a>
    {
      answer = true;
 800398c:	230f      	movs	r3, #15
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
      break;
 8003994:	e01c      	b.n	80039d0 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff f85c 	bl	8002a58 <HAL_UART_GetState>
 80039a0:	0003      	movs	r3, r0
 80039a2:	2be0      	cmp	r3, #224	@ 0xe0
 80039a4:	d014      	beq.n	80039d0 <ATC_TxWait+0x84>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7ff f854 	bl	8002a58 <HAL_UART_GetState>
 80039b0:	0003      	movs	r3, r0
 80039b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80039b4:	d00c      	beq.n	80039d0 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 80039b6:	f7fd f87d 	bl	8000ab4 <HAL_GetTick>
 80039ba:	0002      	movs	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d8cf      	bhi.n	8003966 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f7fe fc28 	bl	8002220 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 80039d0:	230f      	movs	r3, #15
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	781b      	ldrb	r3, [r3, #0]
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b004      	add	sp, #16
 80039dc:	bd80      	pop	{r7, pc}

080039de <ATC_CheckResponse>:
}

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 80039e8:	230f      	movs	r3, #15
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8b1b      	ldrh	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d031      	beq.n	8003a5c <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80039f8:	230c      	movs	r3, #12
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	e025      	b.n	8003a4e <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003a06:	230c      	movs	r3, #12
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	881a      	ldrh	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	320a      	adds	r2, #10
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	58d3      	ldr	r3, [r2, r3]
 8003a14:	0019      	movs	r1, r3
 8003a16:	f000 fb8f 	bl	8004138 <strstr>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8003a30:	230c      	movs	r3, #12
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	230f      	movs	r3, #15
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	3201      	adds	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
        break;
 8003a40:	e00c      	b.n	8003a5c <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8003a42:	210c      	movs	r1, #12
 8003a44:	187b      	adds	r3, r7, r1
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	3201      	adds	r2, #1
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8adb      	ldrh	r3, [r3, #22]
 8003a52:	220c      	movs	r2, #12
 8003a54:	18ba      	adds	r2, r7, r2
 8003a56:	8812      	ldrh	r2, [r2, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3d2      	bcc.n	8003a02 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8003a5c:	230f      	movs	r3, #15
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	781b      	ldrb	r3, [r3, #0]
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b004      	add	sp, #16
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff f800 	bl	8002a7c <HAL_UART_GetError>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d01f      	beq.n	8003ac0 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4252      	negs	r2, r2
 8003a8a:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7fe fc2b 	bl	80022ec <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69d9      	ldr	r1, [r3, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8a9b      	ldrh	r3, [r3, #20]
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	f7ff fe6f 	bl	8003786 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2104      	movs	r1, #4
 8003abc:	438a      	bics	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7fe ffc7 	bl	8002a58 <HAL_UART_GetState>
 8003aca:	0003      	movs	r3, r0
 8003acc:	2b22      	cmp	r3, #34	@ 0x22
 8003ace:	d027      	beq.n	8003b20 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7fe ffbf 	bl	8002a58 <HAL_UART_GetState>
 8003ada:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8003adc:	2b23      	cmp	r3, #35	@ 0x23
 8003ade:	d01f      	beq.n	8003b20 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4252      	negs	r2, r2
 8003aea:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7fe fbfb 	bl	80022ec <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69d9      	ldr	r1, [r3, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8a9b      	ldrh	r3, [r3, #20]
 8003b02:	001a      	movs	r2, r3
 8003b04:	f7ff fe3f 	bl	8003786 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2104      	movs	r1, #4
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]
  }
}
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b002      	add	sp, #8
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	1dbb      	adds	r3, r7, #6
 8003b36:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8003b38:	2317      	movs	r3, #23
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d100      	bne.n	8003b48 <ATC_Init+0x20>
 8003b46:	e07f      	b.n	8003c48 <ATC_Init+0x120>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d100      	bne.n	8003b50 <ATC_Init+0x28>
 8003b4e:	e07b      	b.n	8003c48 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	223c      	movs	r2, #60	@ 0x3c
 8003b54:	2100      	movs	r1, #0
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 fad2 	bl	8004100 <memset>
    if (pName != NULL)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3304      	adds	r3, #4
 8003b66:	6839      	ldr	r1, [r7, #0]
 8003b68:	2207      	movs	r2, #7
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 fad0 	bl	8004110 <strncpy>
    }
    hAtc->hUart = hUart;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8003b76:	1dbb      	adds	r3, r7, #6
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff fe6b 	bl	8003856 <ATC_Malloc>
 8003b80:	0002      	movs	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d055      	beq.n	8003c3a <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	69d8      	ldr	r0, [r3, #28]
 8003b92:	1dbb      	adds	r3, r7, #6
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	001a      	movs	r2, r3
 8003b98:	2100      	movs	r1, #0
 8003b9a:	f000 fab1 	bl	8004100 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8003b9e:	1dbb      	adds	r3, r7, #6
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7ff fe57 	bl	8003856 <ATC_Malloc>
 8003ba8:	0002      	movs	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d043      	beq.n	8003c3e <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a18      	ldr	r0, [r3, #32]
 8003bba:	1dbb      	adds	r3, r7, #6
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	f000 fa9d 	bl	8004100 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8003bc6:	1dbb      	adds	r3, r7, #6
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff fe43 	bl	8003856 <ATC_Malloc>
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d031      	beq.n	8003c42 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003be2:	1dbb      	adds	r3, r7, #6
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	001a      	movs	r2, r3
 8003be8:	2100      	movs	r1, #0
 8003bea:	f000 fa89 	bl	8004100 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1dba      	adds	r2, r7, #6
 8003bf2:	8812      	ldrh	r2, [r2, #0]
 8003bf4:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4252      	negs	r2, r2
 8003c00:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	69d9      	ldr	r1, [r3, #28]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8a9b      	ldrh	r3, [r3, #20]
 8003c0e:	001a      	movs	r2, r3
 8003c10:	f7ff fdb9 	bl	8003786 <HAL_UARTEx_ReceiveToIdle_DMA>
 8003c14:	1e03      	subs	r3, r0, #0
 8003c16:	d116      	bne.n	8003c46 <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2104      	movs	r1, #4
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
    answer = true;
 8003c30:	2317      	movs	r3, #23
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e006      	b.n	8003c48 <ATC_Init+0x120>
      break;
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	e004      	b.n	8003c48 <ATC_Init+0x120>
      break;
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	e002      	b.n	8003c48 <ATC_Init+0x120>
      break;
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	e000      	b.n	8003c48 <ATC_Init+0x120>
      break;
 8003c46:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8003c48:	2317      	movs	r3, #23
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4053      	eors	r3, r2
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d017      	beq.n	8003c88 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	331c      	adds	r3, #28
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff fe07 	bl	8003878 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3324      	adds	r3, #36	@ 0x24
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fdfe 	bl	8003878 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	223c      	movs	r2, #60	@ 0x3c
 8003c80:	2100      	movs	r1, #0
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 fa3c 	bl	8004100 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8003c88:	2317      	movs	r3, #23
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	781b      	ldrb	r3, [r3, #0]
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b006      	add	sp, #24
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8003c96:	b5b0      	push	{r4, r5, r7, lr}
 8003c98:	b08c      	sub	sp, #48	@ 0x30
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7ff fe33 	bl	8003916 <ATC_TxBusy>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d002      	beq.n	8003cba <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	425b      	negs	r3, r3
 8003cb8:	e0e3      	b.n	8003e82 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8003cba:	2344      	movs	r3, #68	@ 0x44
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d902      	bls.n	8003cca <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8003cc4:	2305      	movs	r3, #5
 8003cc6:	425b      	negs	r3, r3
 8003cc8:	e0db      	b.n	8003e82 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7ff fecc 	bl	8003a6a <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8003cd2:	2348      	movs	r3, #72	@ 0x48
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cdc:	e051      	b.n	8003d82 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1d1a      	adds	r2, r3, #4
 8003ce2:	617a      	str	r2, [r7, #20]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7fc fa0a 	bl	8000104 <strlen>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff fdae 	bl	8003856 <ATC_Malloc>
 8003cfa:	0001      	movs	r1, r0
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d00:	320a      	adds	r2, #10
 8003d02:	0092      	lsls	r2, r2, #2
 8003d04:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d0a:	320a      	adds	r2, #10
 8003d0c:	0092      	lsls	r2, r2, #2
 8003d0e:	58d3      	ldr	r3, [r2, r3]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11c      	bne.n	8003d4e <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8003d14:	2327      	movs	r3, #39	@ 0x27
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e00e      	b.n	8003d3c <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8003d1e:	2427      	movs	r4, #39	@ 0x27
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	330a      	adds	r3, #10
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	18d3      	adds	r3, r2, r3
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7ff fda3 	bl	8003878 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8003d32:	193b      	adds	r3, r7, r4
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	3201      	adds	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	2327      	movs	r3, #39	@ 0x27
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d44:	429a      	cmp	r2, r3
 8003d46:	dcea      	bgt.n	8003d1e <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	425b      	negs	r3, r3
 8003d4c:	e099      	b.n	8003e82 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d52:	320a      	adds	r2, #10
 8003d54:	0092      	lsls	r2, r2, #2
 8003d56:	58d3      	ldr	r3, [r2, r3]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	0011      	movs	r1, r2
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 fa3f 	bl	80041e0 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d66:	320a      	adds	r2, #10
 8003d68:	0092      	lsls	r2, r2, #2
 8003d6a:	58d4      	ldr	r4, [r2, r3]
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fc f9c8 	bl	8000104 <strlen>
 8003d74:	0003      	movs	r3, r0
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	3301      	adds	r3, #1
 8003d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d82:	2344      	movs	r3, #68	@ 0x44
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	dba7      	blt.n	8003cde <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7ff fd88 	bl	80038a6 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7fc f9b3 	bl	8000104 <strlen>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7ff fd90 	bl	80038cc <ATC_TxRaw>
 8003dac:	0003      	movs	r3, r0
 8003dae:	001a      	movs	r2, r3
 8003db0:	2301      	movs	r3, #1
 8003db2:	4053      	eors	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003dc0:	e010      	b.n	8003de4 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff fdbf 	bl	800394c <ATC_TxWait>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4053      	eors	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	425b      	negs	r3, r3
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003de2:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8003de4:	2444      	movs	r4, #68	@ 0x44
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d029      	beq.n	8003e42 <ATC_SendReceive+0x1ac>
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d126      	bne.n	8003e42 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8003df4:	f7fc fe5e 	bl	8000ab4 <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8003dfc:	193b      	adds	r3, r7, r4
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8003e06:	e014      	b.n	8003e32 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f000 f8a6 	bl	8003f5a <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8003e0e:	251f      	movs	r5, #31
 8003e10:	197c      	adds	r4, r7, r5
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7ff fde0 	bl	80039de <ATC_CheckResponse>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8003e22:	197b      	adds	r3, r7, r5
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8003e2a:	197b      	adds	r3, r7, r5
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e30:	e007      	b.n	8003e42 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8003e32:	f7fc fe3f 	bl	8000ab4 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d8e2      	bhi.n	8003e08 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8003e48:	2326      	movs	r3, #38	@ 0x26
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e00e      	b.n	8003e70 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8003e52:	2426      	movs	r4, #38	@ 0x26
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	330a      	adds	r3, #10
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff fd09 	bl	8003878 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	3201      	adds	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	2326      	movs	r3, #38	@ 0x26
 8003e72:	18fa      	adds	r2, r7, r3
 8003e74:	2344      	movs	r3, #68	@ 0x44
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3e8      	bcc.n	8003e52 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8003e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b00c      	add	sp, #48	@ 0x30
 8003e88:	bdb0      	pop	{r4, r5, r7, pc}

08003e8a <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	000a      	movs	r2, r1
 8003e94:	1cbb      	adds	r3, r7, #2
 8003e96:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8003e98:	1cbb      	adds	r3, r7, #2
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8a9b      	ldrh	r3, [r3, #20]
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8b1b      	ldrh	r3, [r3, #24]
 8003ea6:	1acb      	subs	r3, r1, r3
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	dd06      	ble.n	8003eba <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8a99      	ldrh	r1, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8b1a      	ldrh	r2, [r3, #24]
 8003eb4:	1cbb      	adds	r3, r7, #2
 8003eb6:	1a8a      	subs	r2, r1, r2
 8003eb8:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	8b12      	ldrh	r2, [r2, #24]
 8003ec2:	1898      	adds	r0, r3, r2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69d9      	ldr	r1, [r3, #28]
 8003ec8:	1cbb      	adds	r3, r7, #2
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	001a      	movs	r2, r3
 8003ece:	f000 f98f 	bl	80041f0 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8b1a      	ldrh	r2, [r3, #24]
 8003ed6:	1cbb      	adds	r3, r7, #2
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	18d3      	adds	r3, r2, r3
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69d9      	ldr	r1, [r3, #28]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8a9b      	ldrh	r3, [r3, #20]
 8003eee:	001a      	movs	r2, r3
 8003ef0:	f7ff fc49 	bl	8003786 <HAL_UARTEx_ReceiveToIdle_DMA>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d10c      	bne.n	8003f12 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8003f10:	e01f      	b.n	8003f52 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4252      	negs	r2, r2
 8003f1c:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fe f9e2 	bl	80022ec <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69d9      	ldr	r1, [r3, #28]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8a9b      	ldrh	r3, [r3, #20]
 8003f34:	001a      	movs	r2, r3
 8003f36:	f7ff fc26 	bl	8003786 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2104      	movs	r1, #4
 8003f4e:	438a      	bics	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b002      	add	sp, #8
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc fdaf 	bl	8000ac8 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <malloc>:
 8003f74:	b510      	push	{r4, lr}
 8003f76:	4b03      	ldr	r3, [pc, #12]	@ (8003f84 <malloc+0x10>)
 8003f78:	0001      	movs	r1, r0
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	f000 f830 	bl	8003fe0 <_malloc_r>
 8003f80:	bd10      	pop	{r4, pc}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	2000000c 	.word	0x2000000c

08003f88 <free>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <free+0x10>)
 8003f8c:	0001      	movs	r1, r0
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	f000 f938 	bl	8004204 <_free_r>
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	2000000c 	.word	0x2000000c

08003f9c <sbrk_aligned>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4e0f      	ldr	r6, [pc, #60]	@ (8003fdc <sbrk_aligned+0x40>)
 8003fa0:	000d      	movs	r5, r1
 8003fa2:	6831      	ldr	r1, [r6, #0]
 8003fa4:	0004      	movs	r4, r0
 8003fa6:	2900      	cmp	r1, #0
 8003fa8:	d102      	bne.n	8003fb0 <sbrk_aligned+0x14>
 8003faa:	f000 f8db 	bl	8004164 <_sbrk_r>
 8003fae:	6030      	str	r0, [r6, #0]
 8003fb0:	0029      	movs	r1, r5
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f000 f8d6 	bl	8004164 <_sbrk_r>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d103      	bne.n	8003fc4 <sbrk_aligned+0x28>
 8003fbc:	2501      	movs	r5, #1
 8003fbe:	426d      	negs	r5, r5
 8003fc0:	0028      	movs	r0, r5
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	1cc5      	adds	r5, r0, #3
 8003fc8:	439d      	bics	r5, r3
 8003fca:	42a8      	cmp	r0, r5
 8003fcc:	d0f8      	beq.n	8003fc0 <sbrk_aligned+0x24>
 8003fce:	1a29      	subs	r1, r5, r0
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	f000 f8c7 	bl	8004164 <_sbrk_r>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d1f2      	bne.n	8003fc0 <sbrk_aligned+0x24>
 8003fda:	e7ef      	b.n	8003fbc <sbrk_aligned+0x20>
 8003fdc:	20000254 	.word	0x20000254

08003fe0 <_malloc_r>:
 8003fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	1ccb      	adds	r3, r1, #3
 8003fe6:	4393      	bics	r3, r2
 8003fe8:	3308      	adds	r3, #8
 8003fea:	0005      	movs	r5, r0
 8003fec:	001f      	movs	r7, r3
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d234      	bcs.n	800405c <_malloc_r+0x7c>
 8003ff2:	270c      	movs	r7, #12
 8003ff4:	42b9      	cmp	r1, r7
 8003ff6:	d833      	bhi.n	8004060 <_malloc_r+0x80>
 8003ff8:	0028      	movs	r0, r5
 8003ffa:	f000 f871 	bl	80040e0 <__malloc_lock>
 8003ffe:	4e37      	ldr	r6, [pc, #220]	@ (80040dc <_malloc_r+0xfc>)
 8004000:	6833      	ldr	r3, [r6, #0]
 8004002:	001c      	movs	r4, r3
 8004004:	2c00      	cmp	r4, #0
 8004006:	d12f      	bne.n	8004068 <_malloc_r+0x88>
 8004008:	0039      	movs	r1, r7
 800400a:	0028      	movs	r0, r5
 800400c:	f7ff ffc6 	bl	8003f9c <sbrk_aligned>
 8004010:	0004      	movs	r4, r0
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	d15f      	bne.n	80040d6 <_malloc_r+0xf6>
 8004016:	6834      	ldr	r4, [r6, #0]
 8004018:	9400      	str	r4, [sp, #0]
 800401a:	9b00      	ldr	r3, [sp, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d14a      	bne.n	80040b6 <_malloc_r+0xd6>
 8004020:	2c00      	cmp	r4, #0
 8004022:	d052      	beq.n	80040ca <_malloc_r+0xea>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	0028      	movs	r0, r5
 8004028:	18e3      	adds	r3, r4, r3
 800402a:	9900      	ldr	r1, [sp, #0]
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	f000 f899 	bl	8004164 <_sbrk_r>
 8004032:	9b01      	ldr	r3, [sp, #4]
 8004034:	4283      	cmp	r3, r0
 8004036:	d148      	bne.n	80040ca <_malloc_r+0xea>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	0028      	movs	r0, r5
 800403c:	1aff      	subs	r7, r7, r3
 800403e:	0039      	movs	r1, r7
 8004040:	f7ff ffac 	bl	8003f9c <sbrk_aligned>
 8004044:	3001      	adds	r0, #1
 8004046:	d040      	beq.n	80040ca <_malloc_r+0xea>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	19db      	adds	r3, r3, r7
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	6833      	ldr	r3, [r6, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	2a00      	cmp	r2, #0
 8004054:	d133      	bne.n	80040be <_malloc_r+0xde>
 8004056:	9b00      	ldr	r3, [sp, #0]
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	e019      	b.n	8004090 <_malloc_r+0xb0>
 800405c:	2b00      	cmp	r3, #0
 800405e:	dac9      	bge.n	8003ff4 <_malloc_r+0x14>
 8004060:	230c      	movs	r3, #12
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	2000      	movs	r0, #0
 8004066:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004068:	6821      	ldr	r1, [r4, #0]
 800406a:	1bc9      	subs	r1, r1, r7
 800406c:	d420      	bmi.n	80040b0 <_malloc_r+0xd0>
 800406e:	290b      	cmp	r1, #11
 8004070:	d90a      	bls.n	8004088 <_malloc_r+0xa8>
 8004072:	19e2      	adds	r2, r4, r7
 8004074:	6027      	str	r7, [r4, #0]
 8004076:	42a3      	cmp	r3, r4
 8004078:	d104      	bne.n	8004084 <_malloc_r+0xa4>
 800407a:	6032      	str	r2, [r6, #0]
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	6011      	str	r1, [r2, #0]
 8004080:	6053      	str	r3, [r2, #4]
 8004082:	e005      	b.n	8004090 <_malloc_r+0xb0>
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e7f9      	b.n	800407c <_malloc_r+0x9c>
 8004088:	6862      	ldr	r2, [r4, #4]
 800408a:	42a3      	cmp	r3, r4
 800408c:	d10e      	bne.n	80040ac <_malloc_r+0xcc>
 800408e:	6032      	str	r2, [r6, #0]
 8004090:	0028      	movs	r0, r5
 8004092:	f000 f82d 	bl	80040f0 <__malloc_unlock>
 8004096:	0020      	movs	r0, r4
 8004098:	2207      	movs	r2, #7
 800409a:	300b      	adds	r0, #11
 800409c:	1d23      	adds	r3, r4, #4
 800409e:	4390      	bics	r0, r2
 80040a0:	1ac2      	subs	r2, r0, r3
 80040a2:	4298      	cmp	r0, r3
 80040a4:	d0df      	beq.n	8004066 <_malloc_r+0x86>
 80040a6:	1a1b      	subs	r3, r3, r0
 80040a8:	50a3      	str	r3, [r4, r2]
 80040aa:	e7dc      	b.n	8004066 <_malloc_r+0x86>
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	e7ef      	b.n	8004090 <_malloc_r+0xb0>
 80040b0:	0023      	movs	r3, r4
 80040b2:	6864      	ldr	r4, [r4, #4]
 80040b4:	e7a6      	b.n	8004004 <_malloc_r+0x24>
 80040b6:	9c00      	ldr	r4, [sp, #0]
 80040b8:	6863      	ldr	r3, [r4, #4]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	e7ad      	b.n	800401a <_malloc_r+0x3a>
 80040be:	001a      	movs	r2, r3
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	42a3      	cmp	r3, r4
 80040c4:	d1fb      	bne.n	80040be <_malloc_r+0xde>
 80040c6:	2300      	movs	r3, #0
 80040c8:	e7da      	b.n	8004080 <_malloc_r+0xa0>
 80040ca:	230c      	movs	r3, #12
 80040cc:	0028      	movs	r0, r5
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	f000 f80e 	bl	80040f0 <__malloc_unlock>
 80040d4:	e7c6      	b.n	8004064 <_malloc_r+0x84>
 80040d6:	6007      	str	r7, [r0, #0]
 80040d8:	e7da      	b.n	8004090 <_malloc_r+0xb0>
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	20000258 	.word	0x20000258

080040e0 <__malloc_lock>:
 80040e0:	b510      	push	{r4, lr}
 80040e2:	4802      	ldr	r0, [pc, #8]	@ (80040ec <__malloc_lock+0xc>)
 80040e4:	f000 f87a 	bl	80041dc <__retarget_lock_acquire_recursive>
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	46c0      	nop			@ (mov r8, r8)
 80040ec:	20000398 	.word	0x20000398

080040f0 <__malloc_unlock>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4802      	ldr	r0, [pc, #8]	@ (80040fc <__malloc_unlock+0xc>)
 80040f4:	f000 f873 	bl	80041de <__retarget_lock_release_recursive>
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	20000398 	.word	0x20000398

08004100 <memset>:
 8004100:	0003      	movs	r3, r0
 8004102:	1882      	adds	r2, r0, r2
 8004104:	4293      	cmp	r3, r2
 8004106:	d100      	bne.n	800410a <memset+0xa>
 8004108:	4770      	bx	lr
 800410a:	7019      	strb	r1, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	e7f9      	b.n	8004104 <memset+0x4>

08004110 <strncpy>:
 8004110:	0003      	movs	r3, r0
 8004112:	b530      	push	{r4, r5, lr}
 8004114:	001d      	movs	r5, r3
 8004116:	2a00      	cmp	r2, #0
 8004118:	d006      	beq.n	8004128 <strncpy+0x18>
 800411a:	780c      	ldrb	r4, [r1, #0]
 800411c:	3a01      	subs	r2, #1
 800411e:	3301      	adds	r3, #1
 8004120:	702c      	strb	r4, [r5, #0]
 8004122:	3101      	adds	r1, #1
 8004124:	2c00      	cmp	r4, #0
 8004126:	d1f5      	bne.n	8004114 <strncpy+0x4>
 8004128:	2100      	movs	r1, #0
 800412a:	189a      	adds	r2, r3, r2
 800412c:	4293      	cmp	r3, r2
 800412e:	d100      	bne.n	8004132 <strncpy+0x22>
 8004130:	bd30      	pop	{r4, r5, pc}
 8004132:	7019      	strb	r1, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	e7f9      	b.n	800412c <strncpy+0x1c>

08004138 <strstr>:
 8004138:	780a      	ldrb	r2, [r1, #0]
 800413a:	b530      	push	{r4, r5, lr}
 800413c:	2a00      	cmp	r2, #0
 800413e:	d10c      	bne.n	800415a <strstr+0x22>
 8004140:	bd30      	pop	{r4, r5, pc}
 8004142:	429a      	cmp	r2, r3
 8004144:	d108      	bne.n	8004158 <strstr+0x20>
 8004146:	2301      	movs	r3, #1
 8004148:	5ccc      	ldrb	r4, [r1, r3]
 800414a:	2c00      	cmp	r4, #0
 800414c:	d0f8      	beq.n	8004140 <strstr+0x8>
 800414e:	5cc5      	ldrb	r5, [r0, r3]
 8004150:	42a5      	cmp	r5, r4
 8004152:	d101      	bne.n	8004158 <strstr+0x20>
 8004154:	3301      	adds	r3, #1
 8004156:	e7f7      	b.n	8004148 <strstr+0x10>
 8004158:	3001      	adds	r0, #1
 800415a:	7803      	ldrb	r3, [r0, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <strstr+0xa>
 8004160:	0018      	movs	r0, r3
 8004162:	e7ed      	b.n	8004140 <strstr+0x8>

08004164 <_sbrk_r>:
 8004164:	2300      	movs	r3, #0
 8004166:	b570      	push	{r4, r5, r6, lr}
 8004168:	4d06      	ldr	r5, [pc, #24]	@ (8004184 <_sbrk_r+0x20>)
 800416a:	0004      	movs	r4, r0
 800416c:	0008      	movs	r0, r1
 800416e:	602b      	str	r3, [r5, #0]
 8004170:	f7fc fa78 	bl	8000664 <_sbrk>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d103      	bne.n	8004180 <_sbrk_r+0x1c>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d000      	beq.n	8004180 <_sbrk_r+0x1c>
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	bd70      	pop	{r4, r5, r6, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	20000394 	.word	0x20000394

08004188 <__errno>:
 8004188:	4b01      	ldr	r3, [pc, #4]	@ (8004190 <__errno+0x8>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	4770      	bx	lr
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	2000000c 	.word	0x2000000c

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	2600      	movs	r6, #0
 8004198:	4c0c      	ldr	r4, [pc, #48]	@ (80041cc <__libc_init_array+0x38>)
 800419a:	4d0d      	ldr	r5, [pc, #52]	@ (80041d0 <__libc_init_array+0x3c>)
 800419c:	1b64      	subs	r4, r4, r5
 800419e:	10a4      	asrs	r4, r4, #2
 80041a0:	42a6      	cmp	r6, r4
 80041a2:	d109      	bne.n	80041b8 <__libc_init_array+0x24>
 80041a4:	2600      	movs	r6, #0
 80041a6:	f000 f877 	bl	8004298 <_init>
 80041aa:	4c0a      	ldr	r4, [pc, #40]	@ (80041d4 <__libc_init_array+0x40>)
 80041ac:	4d0a      	ldr	r5, [pc, #40]	@ (80041d8 <__libc_init_array+0x44>)
 80041ae:	1b64      	subs	r4, r4, r5
 80041b0:	10a4      	asrs	r4, r4, #2
 80041b2:	42a6      	cmp	r6, r4
 80041b4:	d105      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	00b3      	lsls	r3, r6, #2
 80041ba:	58eb      	ldr	r3, [r5, r3]
 80041bc:	4798      	blx	r3
 80041be:	3601      	adds	r6, #1
 80041c0:	e7ee      	b.n	80041a0 <__libc_init_array+0xc>
 80041c2:	00b3      	lsls	r3, r6, #2
 80041c4:	58eb      	ldr	r3, [r5, r3]
 80041c6:	4798      	blx	r3
 80041c8:	3601      	adds	r6, #1
 80041ca:	e7f2      	b.n	80041b2 <__libc_init_array+0x1e>
 80041cc:	0800438c 	.word	0x0800438c
 80041d0:	0800438c 	.word	0x0800438c
 80041d4:	08004390 	.word	0x08004390
 80041d8:	0800438c 	.word	0x0800438c

080041dc <__retarget_lock_acquire_recursive>:
 80041dc:	4770      	bx	lr

080041de <__retarget_lock_release_recursive>:
 80041de:	4770      	bx	lr

080041e0 <strcpy>:
 80041e0:	0003      	movs	r3, r0
 80041e2:	780a      	ldrb	r2, [r1, #0]
 80041e4:	3101      	adds	r1, #1
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	3301      	adds	r3, #1
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d1f9      	bne.n	80041e2 <strcpy+0x2>
 80041ee:	4770      	bx	lr

080041f0 <memcpy>:
 80041f0:	2300      	movs	r3, #0
 80041f2:	b510      	push	{r4, lr}
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d100      	bne.n	80041fa <memcpy+0xa>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	5ccc      	ldrb	r4, [r1, r3]
 80041fc:	54c4      	strb	r4, [r0, r3]
 80041fe:	3301      	adds	r3, #1
 8004200:	e7f8      	b.n	80041f4 <memcpy+0x4>
	...

08004204 <_free_r>:
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	0005      	movs	r5, r0
 8004208:	1e0c      	subs	r4, r1, #0
 800420a:	d010      	beq.n	800422e <_free_r+0x2a>
 800420c:	3c04      	subs	r4, #4
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	da00      	bge.n	8004216 <_free_r+0x12>
 8004214:	18e4      	adds	r4, r4, r3
 8004216:	0028      	movs	r0, r5
 8004218:	f7ff ff62 	bl	80040e0 <__malloc_lock>
 800421c:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <_free_r+0x90>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <_free_r+0x2c>
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	6014      	str	r4, [r2, #0]
 8004228:	0028      	movs	r0, r5
 800422a:	f7ff ff61 	bl	80040f0 <__malloc_unlock>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	42a3      	cmp	r3, r4
 8004232:	d908      	bls.n	8004246 <_free_r+0x42>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	1821      	adds	r1, r4, r0
 8004238:	428b      	cmp	r3, r1
 800423a:	d1f3      	bne.n	8004224 <_free_r+0x20>
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	1809      	adds	r1, r1, r0
 8004242:	6021      	str	r1, [r4, #0]
 8004244:	e7ee      	b.n	8004224 <_free_r+0x20>
 8004246:	001a      	movs	r2, r3
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <_free_r+0x4e>
 800424e:	42a3      	cmp	r3, r4
 8004250:	d9f9      	bls.n	8004246 <_free_r+0x42>
 8004252:	6811      	ldr	r1, [r2, #0]
 8004254:	1850      	adds	r0, r2, r1
 8004256:	42a0      	cmp	r0, r4
 8004258:	d10b      	bne.n	8004272 <_free_r+0x6e>
 800425a:	6820      	ldr	r0, [r4, #0]
 800425c:	1809      	adds	r1, r1, r0
 800425e:	1850      	adds	r0, r2, r1
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	4283      	cmp	r3, r0
 8004264:	d1e0      	bne.n	8004228 <_free_r+0x24>
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	1841      	adds	r1, r0, r1
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	6053      	str	r3, [r2, #4]
 8004270:	e7da      	b.n	8004228 <_free_r+0x24>
 8004272:	42a0      	cmp	r0, r4
 8004274:	d902      	bls.n	800427c <_free_r+0x78>
 8004276:	230c      	movs	r3, #12
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	e7d5      	b.n	8004228 <_free_r+0x24>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	1821      	adds	r1, r4, r0
 8004280:	428b      	cmp	r3, r1
 8004282:	d103      	bne.n	800428c <_free_r+0x88>
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	1809      	adds	r1, r1, r0
 800428a:	6021      	str	r1, [r4, #0]
 800428c:	6063      	str	r3, [r4, #4]
 800428e:	6054      	str	r4, [r2, #4]
 8004290:	e7ca      	b.n	8004228 <_free_r+0x24>
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	20000258 	.word	0x20000258

08004298 <_init>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr

080042a4 <_fini>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr
